<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xxl-job学习笔记</title>
      <link href="/2024/08/25/2024-08-25-xxl-job%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/25/2024-08-25-xxl-job%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="xxl-job学习笔记"><a href="#xxl-job学习笔记" class="headerlink" title="xxl-job学习笔记"></a>xxl-job学习笔记</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>xxl-job是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><h2 id="任务执行流程"><a href="#任务执行流程" class="headerlink" title="任务执行流程"></a>任务执行流程</h2><p><img src="https://s2.loli.net/2024/08/25/iCr1DvLhW2K94eR.png" alt="image-20240825111454492.png"></p><p><strong>执行流程</strong></p><ol><li><p>任务执行器根据配置的调度中心的地址，自动注册到调度中心</p></li><li><p>达到任务出发条件，调度中心下发任务</p></li><li><p>执行器基于线程池执行任务，并把执行结果放入内存队列、把执行日志写入日志文件中</p></li><li><p>执行器消费内存队列中的执行结果，主动上报给调度中心</p></li><li><p>当用户在调度中心查看任务日志，调度中心请求任务执行器，任务执行器读取任务日志文件并返回日志详情</p></li></ol><h2 id="搭建xxl-job"><a href="#搭建xxl-job" class="headerlink" title="搭建xxl-job"></a>搭建xxl-job</h2><p><a href="https://gitee.com/xuxueli0323/xxl-job">xxl-job: 一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。 (gitee.com)</a></p><h3 id="使用docker搭建xxl-job"><a href="#使用docker搭建xxl-job" class="headerlink" title="使用docker搭建xxl-job"></a>使用docker搭建xxl-job</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker search xxl-job</span><br><span class="line">docker pull xuxueli/xxl-job-admin:2.4.0</span><br><span class="line"></span><br><span class="line">docker run  -d \</span><br><span class="line">        -p 8088:8088\</span><br><span class="line">        -v /tool/xxl-job/logs:/data/applogs \</span><br><span class="line">        -v /tool/xxl-job/application.properties:/xxl-job/xxl-job-admin/src/main/resources/application.properties \</span><br><span class="line">        -e PARAMS=&quot;--server.port=8088\</span><br><span class="line">        --spring.datasource.url=jdbc:mysql://xxx.xx.xx.xxx:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai \</span><br><span class="line">        --spring.datasource.username=root \</span><br><span class="line">        --spring.datasource.password=Wing1Q2W#E&quot; \</span><br><span class="line">        --name xxl-job-admin  \</span><br><span class="line">xuxueli/xxl-job-admin:2.4.0</span><br></pre></td></tr></table></figure><p>使用docker ps命令可以查看是否运行成功。</p><h3 id="常规搭建"><a href="#常规搭建" class="headerlink" title="常规搭建"></a>常规搭建</h3><ol><li><p>下载项目并解压，执行数据库初始化SQL脚本（在doc&#x2F;db目录下），根据数据库脚本创建数据库，有以下八张表（MySQL配置：<a href="https://blog.csdn.net/weixin_47406082/article/details/131867849?ops_request_misc=%7B%22request_id%22:%22172455767816800226561928%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172455767816800226561928&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-131867849-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=MYSQL%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Mysql超详细安装配置教程(保姆级)_mysql安装及配置超详细教程-CSDN博客</a>）（navicat:<a href="https://blog.csdn.net/weixin_50670076/article/details/136350060?ops_request_misc=%7B%22request_id%22:%22172455932816800207023974%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172455932816800207023974&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-136350060-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=navicat&spm=1018.2226.3001.4187">Navicat16\17安装和激活详细讲解（全网最简单且靠谱）_navicat 16-CSDN博客</a>）</p><p><img src="https://s2.loli.net/2024/08/25/1uCKvHfTnWPLipR.png" alt="image-20240825111113486.png"></p><ul><li><strong>xxl_job_lock：</strong>任务调度锁表；</li><li><strong>xxl_job_group：</strong>执行器信息表，维护任务执行器信息；</li><li><strong>xxl_job_info：</strong>调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；</li><li><strong>xxl_job_log：</strong>调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；</li><li><strong>xxl_job_logglue：</strong>任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；</li><li><strong>xxl_job_registry</strong>：执行器注册表，维护在线的执行器和调度中心机器地址信息；</li><li><strong>xxl_job_user：</strong>系统用户表；</li></ul><p>注意事项：</p><ul><li>调度中心（即xxl-job）支持集群部署，集群情况下各节点务必连接同一个mysql实例;</li><li>如果mysql做主从,调度中心集群节点务必强制走主库;</li><li>默认账号密码：admin&#x2F;123456</li></ul></li><li><p>部署配置调度中心</p><ul><li><p>调度中心项目：xxl-job-admin</p></li><li><p>作用：统一管理任务调度平台上调度任务，负责触发调度执行，并且提供任务管理平台。</p></li><li><p>调度中心配置文件地址：&#x2F;xxl-job&#x2F;xxl-job-admin&#x2F;src&#x2F;main&#x2F;resources&#x2F;application.properties</p><p><img src="https://s2.loli.net/2024/08/25/MlOS5o38knEebrQ.png" alt="image-20240825133654385.png"></p><p>如图所示，这里配置的有对应的数据库的地址、用户名和密码等内容。</p></li></ul></li><li><p>启动xxl-job</p><p>启动成功，访问<strong><a href="http://localhost:8080/xxl-job-admin/**%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81">http://localhost:8080/xxl-job-admin/**，默认登录账号密码</a> “**admin&#x2F;123456</strong>”, 登录后运行界面如下图所示。</p><p><img src="https://s2.loli.net/2024/08/25/nzdXia3VHRfDNvL.png" alt="image-20240825133630704.png"></p></li></ol><h2 id="案例使用-pku-service，进行接入"><a href="#案例使用-pku-service，进行接入" class="headerlink" title="案例使用(pku-service，进行接入)"></a>案例使用(pku-service，进行接入)</h2><p>前置条件：xxl-job的服务端已经起好。</p><p>目录结构（需要从xxl-job的项目中将xxl-job-executor-sample-springboot目录copy出来）：</p><p><img src="https://s2.loli.net/2024/08/25/TK1eRXJpIgALwt6.png" alt="image-20240825145410259.png"></p><ol><li><p><strong>java连接xxl-job</strong></p><p><strong>添加依赖</strong>maven（pom.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--xxl-job--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yaml文件添加</strong>(或者直接application.properties也行)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://*******:8080/xxl-job-admin/</span>  <span class="comment">#**** 更换服务器地址  </span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">pku-service</span>         <span class="comment">#执行器名字</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="attr">ip:</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="attr">logpath:</span> <span class="string">/data/applogs/xxl-job-jobhandler</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置xxl-job的执行器</strong></p><ul><li><p>将示例工程下的配置类拷贝到pku-service工程下，该类中的属性就是获取配置文件中的配置得到的，同时提供了一个执行器的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> (Logger) LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> XxlJobSpringExecutor <span class="title function_">xxlJobExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        <span class="type">XxlJobSpringExecutor</span> <span class="variable">xxlJobSpringExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxlJobSpringExecutor</span>();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对多网卡、容器内部署等情况，可借助 &quot;spring-cloud-commons&quot; 提供的 &quot;InetUtils&quot; 组件灵活定制注册IP；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      1、引入依赖：</span></span><br><span class="line"><span class="comment">     *          &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;artifactId&gt;spring-cloud-commons&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     *             &lt;version&gt;$&#123;version&#125;&lt;/version&gt;</span></span><br><span class="line"><span class="comment">     *         &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      2、配置文件，或者容器启动变量</span></span><br><span class="line"><span class="comment">     *          spring.cloud.inetutils.preferred-networks: &#x27;xxx.xxx.xxx.&#x27;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      3、获取IP</span></span><br><span class="line"><span class="comment">     *          String ip_ = inetUtils.findFirstNonLoopbackHostInfo().getIpAddress();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写执行器代码（SampleXxlJob.java）</p><p>注意这里的jobHandler的名称要匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、简单任务示例（Bean模式）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(&quot;PKUJobHandler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            XxlJobHelper.log(<span class="string">&quot;beat at:&quot;</span> + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// default success</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>新增执行器</strong></p><p><img src="https://s2.loli.net/2024/08/25/pe5PfDoUkBvqQ38.png" alt="image-20240825134502190.png"></p><p><img src="https://s2.loli.net/2024/08/25/CAtXTZEYodl32Up.png" alt="image-20240825135245256.png"></p><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>AppName</td><td>是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;</td></tr><tr><td>名称</td><td>执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;</td></tr><tr><td>排序</td><td>执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;</td></tr><tr><td>注册方式</td><td>调度中心获取执行器地址的方式；</td></tr><tr><td>机器地址</td><td>注册方式为”手动录入”时有效，支持人工维护执行器的地址信息；</td></tr></tbody></table></li><li><p>创建任务</p><p>登录调度中心，点击下图所示“新建任务”按钮，新建示例任务：</p><p><img src="https://s2.loli.net/2024/08/25/xGND9ycV3aznuvF.png" alt="image-20240825150227329.png"></p><p>注意这里的JobHandler的名称要匹配。</p><p><strong>基础配置：</strong></p><ul><li>执行器：每个任务必须绑定一个执行器, 方便给任务进行分组</li><li>任务描述：任务的描述信息，便于任务管理；</li><li>负责人：任务的负责人；</li><li>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔</li></ul><p><strong>调度配置：</strong></p><ul><li><p>调度类型：</p><ul><li><p>无：该类型不会主动触发调度；</p></li><li><p>CRON：该类型将会通过CRON，触发任务调度；</p></li><li><p>固定速度：该类型将会以固定速度，触发任务调度；按照固定的间隔时间，周期性触发；</p></li></ul></li></ul><p><strong>任务配置：</strong></p><ul><li>运行模式：<ul><li>BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务；</li></ul></li><li>JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；</li><li>任务参数：任务执行所需的参数；</li></ul><p><strong>高级配置</strong>：</p><ul><li><p><strong>阻塞处理策略：</strong></p><ul><li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；</li><li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO(First Input First Output)队列并以串行方式运行；</li><li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li><li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li></ul></li><li><p><strong>路由策略：</strong></p><p>当执行器集群部署时，提供丰富的路由策略，包括；</p><ul><li>FIRST（第一个）：固定选择第一个机器；</li><li>LAST（最后一个）：固定选择最后一个机器；</li><li>ROUND（轮询）</li><li>RANDOM（随机）：随机选择在线的机器；</li><li>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</li><li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</li><li>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</li><li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</li><li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li><li>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</li></ul></li></ul></li><li><p>启动JobExecutorApplication</p><p><img src="https://s2.loli.net/2024/08/25/dGneOK7hab5pNtI.png" alt="image-20240825150957492.png"></p><p>这里已经能够成功调度了。同时注意到执行器这里已经自动注册上了：</p><p><img src="https://s2.loli.net/2024/08/25/gDEbZwI95W3xmuJ.png" alt="image-20240825151112157.png"></p></li></ol><h2 id="补充：执行器和jobhandler的区别"><a href="#补充：执行器和jobhandler的区别" class="headerlink" title="补充：执行器和jobhandler的区别"></a>补充：执行器和jobhandler的区别</h2><p><img src="https://s2.loli.net/2024/08/25/O6C7zl8WNDEnrd2.png" alt="image-20240825111406289.png"></p><p>XXL-JOB是一个分布式任务调度平台，它具有简单易用、轻量级和易扩展的特点。在XXL-JOB中，执行器（Executor）和任务处理器（JobHandler）是两个核心组件，它们共同协作来完成定时任务的执行。</p><p>执行器是任务的实际执行者，可以理解为承载任务的具体服务实例。每个执行器有自己独特的名称，通常设置为服务名以方便识别。执行器的主要职责是接收来自调度中心的调度请求，并执行相应的任务逻辑。执行器支持集群部署，以实现任务的高可用性和负载均衡  。</p><p>JobHandler则是任务的抽象表示，它负责编写和处理具体的任务代码。开发者需要实现JobHandler接口中的<code>execute</code>方法，该方法是任务执行的入口点。在执行器启动时，会初始化JobHandler并将它们注册到执行器的容器中，以便在接收到调度请求时能够找到并执行相应的任务逻辑  。</p><p>在XXL-JOB的架构中，”调度中心”负责管理调度信息并发出调度请求，而”执行器”则负责接收这些请求并执行JobHandler中的业务逻辑。这种设计使得调度和任务可以相互解耦，提高了系统整体的稳定性和扩展性  。</p><p>总结来说，执行器和JobHandler在XXL-JOB中的区别主要在于：</p><ul><li>执行器（Executor）：任务的实际执行者，接收调度请求并执行任务。</li><li>任务处理器（JobHandler）：任务的抽象，包含具体的业务逻辑代码，由执行器执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式任务调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射：获取类字段（getDeclaredFields()）</title>
      <link href="/2024/08/17/2024-08-17-Java%E5%8F%8D%E5%B0%84%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%AD%97%E6%AE%B5%EF%BC%88getDeclaredFields()%EF%BC%89/"/>
      <url>/2024/08/17/2024-08-17-Java%E5%8F%8D%E5%B0%84%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%AD%97%E6%AE%B5%EF%BC%88getDeclaredFields()%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射：获取类字段getFields-方法和getDeclaredFields-方法"><a href="#Java反射：获取类字段getFields-方法和getDeclaredFields-方法" class="headerlink" title="Java反射：获取类字段getFields()方法和getDeclaredFields ()方法"></a>Java反射：获取类字段getFields()方法和getDeclaredFields ()方法</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>反射是Java中一种强大的机制，允许在运行时获取、检查和操作类、方法、字段等信息，而不需要在编译时知道这些信息。</p><p>其中字段（Field）在Java中是类中用于存储数据的成员变量。在反射中，可以通过Field类获取和操作类的字段。</p><ul><li><p><code>getFields()</code>： 该方法用于获取某个类及其父类中所有的公有字段。公有字段是指用public修饰的字段。</p><p>这个方法对于需要获取类的公有属性时很有用，例如在某些框架或通用库中。</p></li><li><p><code>getDeclaredFields()</code>： 该方法用于获取某个类中声明的所有字段，包括公有、私有、受保护的字段，但不包括继承的字段。</p><p>这个方法对于需要获取类的所有字段时很有用，尤其是在进行一些高级的操作时。</p></li></ul><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20240817170953470.png" alt="image-20240817170953470"></p><h2 id="2-getFields"><a href="#2-getFields" class="headerlink" title="2. getFields()"></a>2. getFields()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFieldsTest1</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isAdmin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Field[] fields = Student.class.getFields();</span><br><span class="line">        System.out.println(fields.length); <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName()); <span class="comment">// 输出：school, number, name, </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里获取了自己的字段和父类中的public字段。</p><h2 id="3-getDeclaredFields"><a href="#3-getDeclaredFields" class="headerlink" title="3. getDeclaredFields()"></a>3. getDeclaredFields()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFieldsTest2</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Field[] fields = User.class.getDeclaredFields();</span><br><span class="line">        System.out.println(fields.length); <span class="comment">// 输出：4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName()); <span class="comment">// 输出：number, name, isAdmin, this$0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有个<code>this$0</code>。在Java中，<code>this$0</code>是一个在匿名内部类或局部内部类中使用的特殊的引用变量。它指向外部类的一个实例，即内部类被创建的那个外部类的实例。</p><h2 id="4-Field的一些方法"><a href="#4-Field的一些方法" class="headerlink" title="4. Field的一些方法"></a>4. Field的一些方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法:get(Object obj) 返回指定对象obj上此 Field 表示的字段的值</span></span><br><span class="line"></span><br><span class="line">field.get(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法: set(Object obj, Object value)  将指定对象变量上此 Field 对象表示的字段设置为指定的新值</span></span><br><span class="line"></span><br><span class="line">field.set(obj,value)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用ES条件构造器BoolQueryBuilder</title>
      <link href="/2024/08/14/2024-08-14-Java%E4%BD%BF%E7%94%A8ES%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8BoolQueryBuilder/"/>
      <url>/2024/08/14/2024-08-14-Java%E4%BD%BF%E7%94%A8ES%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8BoolQueryBuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="Java使用ES条件构造器BoolQueryBuilder"><a href="#Java使用ES条件构造器BoolQueryBuilder" class="headerlink" title="Java使用ES条件构造器BoolQueryBuilder"></a>Java使用ES条件构造器BoolQueryBuilder</h1><h2 id="1-检索前构造"><a href="#1-检索前构造" class="headerlink" title="1. 检索前构造"></a>1. 检索前构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.构建SearchRequest请求对象，指定索引库</span></span><br><span class="line"><span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;data_info&quot;</span>);</span><br><span class="line"><span class="comment">//2.构建SearchSourceBuilder查询对象</span></span><br><span class="line"><span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"><span class="comment">//2.1 这个条件用于返回所有命中条件的数据数量, 不设置则返回大概数值</span></span><br><span class="line">sourceBuilder.trackTotalHits(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//3.检索条件构造</span></span><br><span class="line"><span class="type">BoolQueryBuilder</span> <span class="variable">bqb</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br></pre></td></tr></table></figure><h2 id="2-条件构造"><a href="#2-条件构造" class="headerlink" title="2. 条件构造"></a>2. 条件构造</h2><ul><li>must可用filter代替，查询效率会更高，因为must会对结果进行_score评估</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.1 完全匹配</span></span><br><span class="line">bqb.must(QueryBuilders.matchQuery(<span class="string">&quot;code&quot;</span>, <span class="number">666L</span>);</span><br><span class="line">         </span><br><span class="line"><span class="comment">//3.2 模糊匹配</span></span><br><span class="line">bqb.must(QueryBuilders.matchPhraseQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张&quot;</span>);</span><br><span class="line">         </span><br><span class="line"><span class="comment">//3.3 in的效果 传单个参数就是完全匹配</span></span><br><span class="line">bqb.must(QueryBuilders.termsQuery(<span class="string">&quot;code&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>&#125;);</span><br><span class="line">bqb.must(QueryBuilders.termsQuery(<span class="string">&quot;code&quot;</span>, <span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">         </span><br><span class="line"><span class="comment">//3.4 or条件</span></span><br><span class="line"><span class="type">BoolQueryBuilder</span> <span class="variable">shouldQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">shouldQuery.should(QueryBuilders.matchQuery(<span class="string">&quot;code&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">shouldQuery.should(QueryBuilders.matchQuery(<span class="string">&quot;code&quot;</span>, <span class="number">2L</span>);</span><br><span class="line">shouldQuery.minimumShouldMatch(<span class="number">1</span>); <span class="comment">//至少满足一个</span></span><br><span class="line">bqb.must(shouldQuery);</span><br><span class="line">                   </span><br><span class="line"><span class="comment">//3.5 非null</span></span><br><span class="line">bqb.must(QueryBuilders.existsQuery(<span class="string">&quot;iden&quot;</span>));</span><br><span class="line"><span class="comment">//是null             </span></span><br><span class="line">bqb.mustNot(QueryBuilders.existsQuery(<span class="string">&quot;iden&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.6 大于等于gte (gt-大于 lt-小于 lte-小于等于)</span></span><br><span class="line">bqb.must(QueryBuilders.rangeQuery(<span class="string">&quot;time&quot;</span>).gte(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">         </span><br><span class="line"><span class="comment">//3.7 中文完全匹配</span></span><br><span class="line">bqb.must(queryBuilder.matchPhraseQuery(<span class="string">&quot;key&quot;</span>, value));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.8 匹配多个字段</span></span><br><span class="line">bqb.must(queryBuilder.multiMatchQuery(value, key1, key2, key3));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-构造完成进行查询"><a href="#3-构造完成进行查询" class="headerlink" title="3. 构造完成进行查询"></a>3. 构造完成进行查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.将BoolQueryBuilder对象设置到SearchSourceBuilder对象中</span></span><br><span class="line">sourceBuilder.query(bqb);</span><br><span class="line"><span class="comment">//5.排序</span></span><br><span class="line">sourceBuilder.sort(<span class="string">&quot;updateTime&quot;</span>, SortOrder.DESC);</span><br><span class="line"><span class="comment">//6.分页</span></span><br><span class="line">sourceBuilder.from((dto.getPageNum() - <span class="number">1</span>) * dto.getPageSize());</span><br><span class="line">sourceBuilder.size(dto.getPageSize());</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.将SearchSourceBuilder设置到SearchRequest中</span></span><br><span class="line">searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.调用方法查询数据</span></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">         </span><br><span class="line"><span class="comment">//9.解析返回结果</span></span><br><span class="line">SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hits.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回的结果： &quot;</span> + hits[i].getSourceAsString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;返回总数为：&quot;</span> + searchResponse.getHits().getTotalHits());</span><br><span class="line"><span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> (<span class="type">int</span>)searchResponse.getHits().getTotalHits().value;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现LRU的两种方式</title>
      <link href="/2024/08/14/2024-08-14-Java%E5%AE%9E%E7%8E%B0LRU%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/08/14/2024-08-14-Java%E5%AE%9E%E7%8E%B0LRU%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java实现LRU的两种方式"><a href="#Java实现LRU的两种方式" class="headerlink" title="Java实现LRU的两种方式"></a>Java实现LRU的两种方式</h1><h2 id="1-直接继承LinkedHashMap"><a href="#1-直接继承LinkedHashMap" class="headerlink" title="1. 直接继承LinkedHashMap"></a>1. 直接继承<code>LinkedHashMap</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-哈希-双链表"><a href="#2-哈希-双链表" class="headerlink" title="2. 哈希+双链表"></a>2. 哈希+双链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">(<span class="type">int</span> _key, <span class="type">int</span> _value)</span> &#123;key = _key; value = _value;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> DLinkedNode head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 使用伪头部和伪尾部节点</span></span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 key 不存在，创建一个新的节点</span></span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>(key, value);</span><br><span class="line">            <span class="comment">// 添加进哈希表</span></span><br><span class="line">            cache.put(key, newNode);</span><br><span class="line">            <span class="comment">// 添加至双向链表的头部</span></span><br><span class="line">            addToHead(newNode);</span><br><span class="line">            ++size;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="comment">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class="line">                <span class="type">DLinkedNode</span> <span class="variable">tail</span> <span class="operator">=</span> removeTail();</span><br><span class="line">                <span class="comment">// 删除哈希表中对应的项</span></span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                --size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DLinkedNode <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">res</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
            <tag> LRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分页查询总结</title>
      <link href="/2024/08/14/2024-08-14-MySQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2024/08/14/2024-08-14-MySQL%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL分页查询总结"><a href="#MySQL分页查询总结" class="headerlink" title="MySQL分页查询总结"></a>MySQL分页查询总结</h1><p>LIMIT语法： LIMIT {[offset,] row_count | row_count OFFSET offset}</p><p>LIMIT子句可以被用于限制被SELECT语句返回的行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用两个参数时，第一个参数指定返回的偏移量，第二个参数指定返回的行数。初始行的偏移量为<span class="number">0</span>（不是<span class="number">1</span>）：</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl LIMIT <span class="number">5</span>,<span class="number">10</span>;  # Retrieve <span class="keyword">rows</span> <span class="number">6</span><span class="number">-15</span></span><br><span class="line"></span><br><span class="line">使用一个参数时，指定从开头返回的行数：</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl LIMIT <span class="number">5</span>;     # Retrieve <span class="keyword">first</span> <span class="number">5</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure><p><strong>写法实现：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分页查询 通用语句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">TABLE</span> </span><br><span class="line">LIMIT (pageIndex<span class="number">-1</span>)<span class="operator">*</span>pageSize,pageSize</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 每页100条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP LIMIT <span class="number">0</span>,<span class="number">100</span></span><br><span class="line"><span class="comment">-- 第二页 每页100条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP LIMIT <span class="number">100</span>,<span class="number">100</span></span><br><span class="line"><span class="comment">-- 第801页 每页100条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP LIMIT <span class="number">80000</span>,<span class="number">100</span>  <span class="comment">-- 用时0.046s</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
            <tag> 分页查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实现分布式锁及Redisson</title>
      <link href="/2024/08/11/2024-08-11-Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8F%8ARedisson/"/>
      <url>/2024/08/11/2024-08-11-Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8F%8ARedisson/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis实现分布式锁及Redisson"><a href="#Redis实现分布式锁及Redisson" class="headerlink" title="Redis实现分布式锁及Redisson"></a>Redis实现分布式锁及Redisson</h1><p>​分布式锁是控制分布式系统之间同步访问共享资源的一种方式。</p><p>​在分布式系统中，常常需要协调他们的动作，若不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要互斥来防止彼此干扰来保证<a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7?fromModule=lemma_inlink">一致性</a>，这个时候，便需要使用到分布式锁。</p><p><img src="https://s2.loli.net/2024/08/11/YoWBi2jXDCratgx.png" alt="image-20240811183351968.png"></p><h2 id="例子：商品秒杀超卖"><a href="#例子：商品秒杀超卖" class="headerlink" title="例子：商品秒杀超卖"></a>例子：商品秒杀超卖</h2><h3 id="1-无锁"><a href="#1-无锁" class="headerlink" title="1. 无锁"></a>1. 无锁</h3><p><img src="https://s2.loli.net/2024/08/11/1hIc83xbNWUgKv2.png" alt="image-20240811183509559.png"></p><p>这是一个订单库存的例子，库存stock为1，这里很容易会发现容易造成多次下单成功的错误。</p><h3 id="2-加同步锁"><a href="#2-加同步锁" class="headerlink" title="2. 加同步锁"></a>2. 加同步锁</h3><p><img src="https://s2.loli.net/2024/08/11/b6XwlNH2iLxFPQf.png" alt="image-20240811183631363.png"></p><p>这里在单机情况下确实能够满足不出现超卖的问题。</p><p>缺点：如果作Nginx进行负载均衡+分布式集群部署，依然会出现超卖问题。</p><ul><li>原因是同步锁<code>synchronized</code>是JVM级别的，每台服务器在并发情况下，只能锁住一个线程。</li></ul><p><img src="https://s2.loli.net/2024/08/11/ToOWu59JGKh3y2b.png" alt="image-20240811184041126.png"></p><p>所以，如何处理这种分布式的情况呢？</p><h3 id="3-Redis-or-Zookeeper"><a href="#3-Redis-or-Zookeeper" class="headerlink" title="3. Redis or Zookeeper"></a>3. Redis or Zookeeper</h3><p>由于系统已经使用到了Redis，为了系统的轻量避免冗余引入新组件，选择通过Redis来进行实现分布式锁。</p><h2 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h2><h3 id="1-SETNX和SET-NX命令"><a href="#1-SETNX和SET-NX命令" class="headerlink" title="1. SETNX和SET NX命令"></a>1. SETNX和SET NX命令</h3><p>[Windows版Docker安装Redis教程(保姆级)，适合开发环境快速提供Redis服务_windows docker 安装redis-CSDN博客](<a href="https://blog.csdn.net/BXD19931010/article/details/135065606?ops_request_misc=&request_id=&biz_id=102&utm_term=windows">https://blog.csdn.net/BXD19931010/article/details/135065606?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=windows</a> docker安装redis&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-3-135065606.142^v100^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器并执行</span></span><br><span class="line">docker run -it --name redis -p 6379:6379 redis --bind 0.0.0.0 --protected-mode no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行容器</span></span><br><span class="line">docker run -it -d redis</span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exec</span>表示在运行的容器中执行命令 it表示以终端交互的方式执行命令 /bin/bash表示需要指定的命令</span></span><br><span class="line">docker exec it redis /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器后可通过redis-cli命令连接容器内的redis服务器，可通过<span class="built_in">set</span>创建变量，get获取变量的值</span></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>​<code>Redis</code>实现分布式锁的核心便在于<code>SETNX</code>命令，它是<code>SET if Not eXists</code>的缩写，如果键不存在，则将键设置为给定值，在这种情况下，它等于SET；当键已存在时，不执行任何操作；成功时返回1，失败返回0</p><p>​但<code>setnx</code>不能同时完成<code>expire</code>设置失效时长，不能保证<code>setnx</code>和<code>expire</code>的原子性。我们可以使用<code>set</code>命令完成<code>setnx</code>和<code>expire</code>的操作，并且这种操作是原子操作。</p><p>​下面是<code>set</code>命令的可选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line">EX seconds：设置失效时长，单位秒</span><br><span class="line">PX milliseconds：设置失效时长，单位毫秒</span><br><span class="line">NX：key不存在时设置value，成功返回OK，失败返回(nil)</span><br><span class="line">XX：key存在时设置value，成功返回OK，失败返回(nil)</span><br></pre></td></tr></table></figure><ul><li><p>使用示例：</p><ul><li><p>两次插入相同键不同值，第一次返回成功，第二次返回失败：</p><p><img src="https://s2.loli.net/2024/08/11/2Gs4CMv78hiuzlx.png" alt="image-20240811191203670.png"></p></li><li><p>设置过期时间（十秒）：</p><p><img src="https://s2.loli.net/2024/08/11/9cB6eCYJLUnwRxQ.png" alt="image-20240811191459809.png"></p></li></ul></li></ul><h3 id="2-通过Redis的SETNX实现分布式锁"><a href="#2-通过Redis的SETNX实现分布式锁" class="headerlink" title="2. 通过Redis的SETNX实现分布式锁"></a>2. 通过Redis的SETNX实现分布式锁</h3><p>命令 SET resource-name anystring NX EX max-lock-time 是一种在 Redis 中实现锁的简单方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给lock设置了过期时间为60000毫秒(也可以用ex 6000,单位就变成了秒)，当用NX再次赋值，则返回nil,不能重入操作</span></span><br><span class="line">127.0.0.1:6379&gt; set lock true NX px 60000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set lock true NX px 6000</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get lock</span><br><span class="line">&quot;true&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl lock</span><br><span class="line">(integer) 43</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间过期后再次get,返回nil,表明key 为 lock的锁已经释放</span></span><br><span class="line">127.0.0.1:6379&gt; get lock</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果setnx 返回ok 说明拿到了锁；如果setnx 返回 nil，说明拿锁失败，被其他线程占用。</p><p>换成客户端服务器则是如下：</p><ul><li>客户端执行以上的命令：<ul><li>如果服务器返回 OK ，那么这个客户端获得锁。</li><li>如果服务器返回 NIL ，那么客户端获取锁失败，可以在稍后再重试。</li></ul></li></ul><p><img src="https://s2.loli.net/2024/08/11/IKD3wsvdYLnlfuM.png" alt="image-20240811190440207.png"></p><h4 id="问题一：为什么需要PX-XX设置超时时间？"><a href="#问题一：为什么需要PX-XX设置超时时间？" class="headerlink" title="问题一：为什么需要PX&#x2F;XX设置超时时间？"></a>问题一：为什么需要PX&#x2F;XX设置超时时间？</h4><p>答：如果第一个set的进程A不讲道理&#x2F;突然宕机，锁永远释放不了，导致系统中其他机器的其他线程谁也拿不到锁。</p><h4 id="问题二：设置了超时时间还有什么问题吗？"><a href="#问题二：设置了超时时间还有什么问题吗？" class="headerlink" title="问题二：设置了超时时间还有什么问题吗？"></a>问题二：设置了超时时间还有什么问题吗？</h4><ol><li>如果第一个set的进程A又不讲道理，业务步骤时间超过设置的超时时间，那么就会导致其他进程拿到锁（趁虚而入），导致超卖问题。</li><li>同时，等进程A回来了，回手就是把其他进程的锁删了&#x2F;释放其他线程的锁，就会更加趁虚而入导致超卖。</li></ol><p><strong>解决办法：</strong></p><ol><li>加长锁的过期时间，并添加子线程每隔10秒确认主线程是否在线，如果在线则将过期时间重新设置（给锁续命）。</li><li>给锁加上UUID（锁与线程的唯一性），这样就不会释放别人的锁了。</li></ol><p>以上解决方案要确保代码的正确性、健壮性还是比较麻烦的，在此引入<code>Redisson</code>工具。</p><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><h3 id="Redisson原理"><a href="#Redisson原理" class="headerlink" title="Redisson原理"></a>Redisson原理</h3><p><img src="https://s2.loli.net/2024/08/11/ghpivaGCYZNtf6d.png" alt="image-20240811200433350.png"></p><p>这里的原理就是上面提到的那两点。</p><h3 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h3><p>因为<code>Redis</code>是满足<code>AP</code>（高可用+分区容错），当<code>Redis</code>采用集群（主从节点），这里的加锁只会往<code>Redis</code>的一个节点去加锁，比如对主节点加锁了，这时主节点会去从节点那进行锁状态的同步。倘若这时主节点挂掉了，从节点没有有效同步，依然会发生线程不安全的情况。</p><p>解决方案：</p><ul><li><p>采用<code>redlock</code>（红锁）实现：对<code>Redis</code>的所有节点都进行加锁后，才返回响应。</p><p><a href="https://way2j.com/a/1338">Redisson-红锁(Redlock)-使用&#x2F;原理 - 自学精灵 (way2j.com)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Stream流</title>
      <link href="/2024/08/08/2024-08-08-Java%E7%9A%84Stream%E6%B5%81/"/>
      <url>/2024/08/08/2024-08-08-Java%E7%9A%84Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的Stream流"><a href="#Java的Stream流" class="headerlink" title="Java的Stream流"></a>Java的Stream流</h1><p>[讲透JAVA Stream的collect用法与原理，远比你想象的更强大_stream.collection-CSDN博客](<a href="https://blog.csdn.net/veezean/article/details/125857074?ops_request_misc=%7B%22request_id%22:%22172258578116800227423214%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258578116800227423214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125857074-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Java">https://blog.csdn.net/veezean/article/details/125857074?ops_request_misc=%7B%22request%5Fid%22%3A%22172258578116800227423214%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172258578116800227423214&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125857074-null-null.142^v100^pc_search_result_base8&amp;utm_term=Java</a> stream collect&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[Java–Stream流详解_java stream-CSDN博客](<a href="https://blog.csdn.net/MinggeQingchun/article/details/123184273?ops_request_misc=%7B%22request_id%22:%22172258592916800182196501%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258592916800182196501&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123184273-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Java">https://blog.csdn.net/MinggeQingchun/article/details/123184273?ops_request_misc=%7B%22request%5Fid%22%3A%22172258592916800182196501%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172258592916800182196501&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123184273-null-null.142^v100^pc_search_result_base8&amp;utm_term=Java</a> stream流&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="stream的创建："><a href="#stream的创建：" class="headerlink" title="stream的创建："></a>stream的创建：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Stream.of(array) （这里面的1,2,3,4其实是Array的类型）</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.list.Stream()</span></span><br><span class="line"><span class="number">2.</span> list.stream()</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="常用中间操作符"><a href="#常用中间操作符" class="headerlink" title="常用中间操作符"></a>常用中间操作符</h3><ol><li><p>filter：用于过滤 ，接受一个返回boolean值的函数，返回一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(number-&gt;number&gt;=<span class="number">2</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>map：用于映射 ，映射流中的每一个元素为另一个流中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toList</span></span><br><span class="line">list.stream().(str-&gt;str+<span class="string">&quot;-IT&quot;</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//toMap  在 toMap 方法中，以每个整数的字节值为键，该整数乘以 2 为值，当遇到重复的键时取最后一个值。（这里实际上可以用任何能区分不同键的方式作为第一个参数，而不一定是 Integer::byteValue）</span></span><br><span class="line">list.stream().collect(Collectors.toMap(Integer::byteValue,num-&gt;num*<span class="number">2</span>,(num1,num2)-&gt;num2));</span><br></pre></td></tr></table></figure></li><li><p>dinstinct:  用于去重 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.stream().filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>).distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_36929361/article/details/84926277?ops_request_misc=%7B%22request_id%22:%22172258713216800188592335%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258713216800188592335&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-84926277-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=System.out::println&spm=1018.2226.3001.4187&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT1TeXN0ZW0ub3V0JTNBJTNBcHJpbnRsbiZ0PSZ1PSZ1cnc9">教你看懂System.out::println-CSDN博客</a></p></li><li><p>sorted: 用于排序  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; collect = strings1.stream().sorted().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>limit: 可以将流限制为指定的元素数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; collect = numbers.stream().limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ol><h3 id="常用终端操作符"><a href="#常用终端操作符" class="headerlink" title="常用终端操作符"></a>常用终端操作符</h3><ol><li><p>collect: 收集器，将流转换为其他形式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strings.stream().collect(Collectors.toSet()); </span><br><span class="line"></span><br><span class="line">strings.stream().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">strings.stream().collect(Collectors.toMap()); </span><br></pre></td></tr></table></figure></li><li><p>forEach:遍历流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.stream().forEach(s -&gt; out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>Count(计数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Charles&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> names.stream().count();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发：Java的Future和FutureTask</title>
      <link href="/2024/08/08/2024-08-08-%E5%B9%B6%E5%8F%91%EF%BC%9AJava%E7%9A%84Future%E5%92%8CFutureTask/"/>
      <url>/2024/08/08/2024-08-08-%E5%B9%B6%E5%8F%91%EF%BC%9AJava%E7%9A%84Future%E5%92%8CFutureTask/</url>
      
        <content type="html"><![CDATA[<h1 id="并发：Java的Future和FutureTask"><a href="#并发：Java的Future和FutureTask" class="headerlink" title="并发：Java的Future和FutureTask"></a>并发：Java的Future和FutureTask</h1><h2 id="Future类的作用"><a href="#Future类的作用" class="headerlink" title="Future类的作用"></a>Future类的作用</h2><p><code>Future </code>类是异步思想的典型运用，主要用在一些需要执行耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。具体来说是这样的：当我们执行某一耗时的任务时，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，不用傻傻等待耗时任务执行完成。等我们的事情干完后，我们再通过 Future 类获取到耗时任务的执行结果。这样一来，程序的执行效率就明显提高了。</p><p>这其实就是多线程中经典的 <code>Future</code> 模式，你可以将其看作是一种设计模式，核心思想是异步调用，主要用在多线程领域，并非 Java 语言独有。</p><p>在 <code>Java </code>中，<code>Future</code> 类只是一个泛型接口，位于<code>java.util.concurrent</code>包下，其中定义了 5 个方法，主要包括下面这 4 个功能：</p><ol><li>取消任务；</li><li>判断任务是否被取消;</li><li>判断任务是否已经执行完成;</li><li>获取任务执行结果。</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V 代表了Future执行的任务返回值的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消任务执行</span></span><br><span class="line">    <span class="comment">// 成功取消返回 true，否则返回 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line">    <span class="comment">// 判断任务是否被取消</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 判断任务是否已经执行完成</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取任务执行结果</span></span><br><span class="line">    V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line">    <span class="comment">// 指定时间内没有返回计算结果就抛出 TimeOutException 异常</span></span><br><span class="line">    V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutExceptio</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FutureTask的作用"><a href="#FutureTask的作用" class="headerlink" title="FutureTask的作用"></a>FutureTask的作用</h2><p><code>FutureTask</code>是<code>Future</code>的具体实现。</p><p><code>FutureTask</code>实现了<code>RunnableFuture</code>接口。<code>RunnableFuture</code>接口又同时继承了<code>Future </code>和 <code>Runnable</code> 接口。所以<code>FutureTask</code>既可以作为<code>Runnable</code>被线程执行，又可以作为<code>Future</code>得到<code>Callable</code>的返回值，可以作为任务直接被线程执行。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.callable = callable;</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Runnable runnable, V result)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTaskTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">starttime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//input2生成， 需要耗费3秒</span></span><br><span class="line">        FutureTask&lt;Integer&gt; input2_futuretask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(input2_futuretask).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//input1生成，需要耗费2秒</span></span><br><span class="line">        FutureTask&lt;Integer&gt; input1_futuretask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(input1_futuretask).start();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> input1_futuretask.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> input2_futuretask.get();</span><br><span class="line">        System.out.println(algorithm(integer1, integer2));</span><br><span class="line">        <span class="type">long</span> <span class="variable">endtime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;用时：&quot;</span> + String.valueOf(endtime - starttime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是我们要执行的算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">algorithm</span><span class="params">(<span class="type">int</span> input, <span class="type">int</span> input2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input + input2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/08/LZ8uTfUOjQ7dMlP.png" alt="image-20240808152922034.png"></p><p>这里用时仅仅只有3013ms，”input2生成， 需要耗费3秒”，这一步占了主要时间。由此观之，整个过程是异步的（不然时间将会是&gt;3+2&#x3D;5s的）。</p><h2 id="CompletableFuture类"><a href="#CompletableFuture类" class="headerlink" title="CompletableFuture类"></a>CompletableFuture类</h2><p><code>Future</code> 在实际使用过程中存在一些局限性，比如不支持异步任务的编排组合、获取计算结果的 get() 方法为阻塞调用。</p><p>Java 8 才被引入<code>CompletableFuture</code> 类可以解决<code>Future</code> 的这些缺陷。<code>CompletableFuture</code> 除了提供了更为好用和强大的 <code>Future</code> 特性之外，还提供了函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）等能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//programmer-club中的例子 </span></span><br><span class="line"><span class="comment">//对于每个category，调用异步的CompletableFuture.supplyAsync()执行getLabelBOList方法和ThreadPoolExecutor作为Executor去多线程+异步的获取labelBOList</span></span><br><span class="line">List&lt;CompletableFuture&lt;Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt;&gt;&gt; completableFutureList = categoryBOList.stream().map(category -&gt;</span><br><span class="line">                CompletableFuture.supplyAsync(() -&gt; getLabelBOList(category), labelThreadPool).collect(Collectors.toList());</span><br><span class="line">                                                                                                     </span><br></pre></td></tr></table></figure><p><code>CompletableFuture</code>是对<code>Future</code>的扩展和增强。<code>CompletableFuture</code>实现了<code>Future</code>接口，并在此基础上进行了丰富的扩展，完美弥补了<code>Future</code>的局限性，<strong>同时<code>CompletableFuture</code>实现了对任务编排的能力</strong>(重点)。</p><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20240826221248525.png" alt="image-20240826221248525"></p><p><code>CompletionStage</code>接口定义了任务编排的方法，执行某一阶段，可以向下执行后续阶段。<strong>异步执行的，默认线程池是<code>ForkJoinPool.commonPool()</code>，但为了业务之间互不影响，且便于定位问题，强烈推荐使用自定义线程池</strong>。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><strong>依赖关系</strong></p><ul><li>thenApply()：把前面任务的执行结果，交给后面的Function。</li><li>thenCompose()：用来连接两个有依赖关系的任务，结果由第二个任务返回。</li></ul><p><strong>and集合关系</strong></p><ul><li>thenCombine()：合并任务，有返回值。</li><li>thenAccepetBoth()：两个任务执行完成后，将结果交给thenAccepetBoth处理，无返回值。</li><li>runAfterBoth()：两个任务都执行完成后，执行下一步操作(Runnable类型任务)。</li></ul><p><strong>or聚合关系</strong></p><ul><li>applyToEither()：两个任务哪个执行的快，就使用哪一个结果，有返回值。</li><li>acceptEither()：两个任务哪个执行的快，就消费哪一个结果，无返回值。</li><li>runAfterEither()：任意一个任务执行完成，进行下一步操作(Runnable类型任务)。</li></ul><p><strong>并行执行</strong></p><ul><li>allOf()：当所有给定的 CompletableFuture 完成时，返回一个新的 CompletableFuture。</li><li>anyOf()：当任何一个给定的CompletablFuture完成时，返回一个新的CompletableFuture。</li></ul><p><strong>结果处理</strong></p><ul><li>whenComplete：当任务完成时，将使用结果(或 null)和此阶段的异常(或 null如果没有)执行给定操作。</li><li>exceptionally：返回一个新的CompletableFuture，当前面的CompletableFuture完成时，它也完成，当它异常完成时，给定函数的异常触发这个CompletableFuture的完成。</li></ul><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><p>提供了四个静态方法来创建一个异步操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span><br></pre></td></tr></table></figure><p>这四个方法的区别：</p><ul><li><p><code>runAsync()</code> 以<code>Runnable</code>函数式接口类型为参数，没有返回结果，<code>supplyAsync() </code>以<code>Supplier</code>函数式接口类型为参数，返回结果类型为<code>U</code>；<code>Supplier</code>接口的 <code>get()</code>是有返回值的(会阻塞)</p></li><li><p>使用没有指定<code>Executor</code>的方法时，内部使用<code>ForkJoinPool.commonPool() </code>作为它的线程池执行异步代码。如果指定线程池，则使用指定的线程池运行。</p></li><li><p>默认情况下<code>CompletableFuture</code>会使用公共的<code>ForkJoinPool</code>线程池，这个线程池默认创建的线程数是 CPU 的核数（也可以通过<code> JVM option</code>:</p><p><code>-Djava.util.concurrent.ForkJoinPool.common.parallelism </code>来设置<code>ForkJoinPool</code>线程池的线程数）。如果所有<code>CompletableFuture</code>共享一个线程池，那么一旦有任务执行一些很慢的 I&#x2F;O 操作，就会导致线程池中所有线程都阻塞在 I&#x2F;O 操作上，从而造成线程饥饿，进而影响整个系统的性能。所以，强烈建议你要根据不同的业务类型创建不同的线程池，以避免互相干扰</p></li></ul><p><strong>异步操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;无返回结果异步任务&quot;</span>);</span><br><span class="line">CompletableFuture.runAsync(runnable);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;有返回值的异步任务&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>获取结果（join&amp;get）</strong></p><p><code>join()</code>和<code>get()</code>方法都是用来获取<code>CompletableFuture</code>异步之后的返回值。<code>join()</code>方法抛出的是<code>uncheck</code>异常（即未经检查的异常),不会强制开发者抛出。<code>get()</code>方法抛出的是经过检查的异常，<code>ExecutionException, InterruptedException </code>需要用户手动处理（抛出或者 <code>try catch</code>）</p><p><strong>结果处理</strong></p><p>当CompletableFuture的计算结果完成，或者抛出异常的时候，我们可以执行特定的 Action。主要是下面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action, Executor executor)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Action</code>的类型是<code>BiConsumer&lt;? super T,? super Throwable&gt;</code>，它可以处理正常的计算结果，或者异常情况。<br>方法不以<code>Async</code>结尾，意味着<code>Action</code>使用相同的线程执行，而<code>Async</code>可能会使用其它的线程去执行(如果使用相同的线程池，也可能会被同一个线程选中执行)。<br>这几个方法都会返回<code>CompletableFuture</code>，当<code>Action</code>执行完毕后它的结果返回原始的<code>CompletableFuture</code>的计算结果或者返回异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">12</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行结束！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 任务完成或异常方法完成时执行该方法</span></span><br><span class="line"><span class="comment">// 如果出现了异常,任务结果为null</span></span><br><span class="line">future.whenComplete(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;String, Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String t, Throwable action)</span> &#123;</span><br><span class="line">        System.out.println(t+<span class="string">&quot; 执行完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出现异常时先执行该方法</span></span><br><span class="line">future.exceptionally(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Throwable, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行失败：&quot;</span> + t.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异常xxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future.get();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码当出现异常时，输出结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行失败：java.lang.ArithmeticException: / by zero</span><br><span class="line">null 执行完成！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Future </tag>
            
            <tag> FutureTask </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>法律垂类大模型DISC-LawGPT的部署运行和对比</title>
      <link href="/2024/08/07/2024-08-07-%E6%B3%95%E5%BE%8B%E5%9E%82%E7%B1%BB%E5%A4%A7%E6%A8%A1%E5%9E%8BDISC-LawGPT%E7%9A%84%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C%E5%92%8C%E5%AF%B9%E6%AF%94/"/>
      <url>/2024/08/07/2024-08-07-%E6%B3%95%E5%BE%8B%E5%9E%82%E7%B1%BB%E5%A4%A7%E6%A8%A1%E5%9E%8BDISC-LawGPT%E7%9A%84%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C%E5%92%8C%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h1 id="法律垂类大模型DISC-LawGPT的部署运行和对比"><a href="#法律垂类大模型DISC-LawGPT的部署运行和对比" class="headerlink" title="法律垂类大模型DISC-LawGPT的部署运行和对比"></a>法律垂类大模型DISC-LawGPT的部署运行和对比</h1><h2 id="部署和运行"><a href="#部署和运行" class="headerlink" title="部署和运行"></a>部署和运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署</span></span><br><span class="line">git clone https://github.com/FudanDISC/DISC-LawLLM.git</span><br><span class="line">cd DISC-LawLLM</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">mkdir ShengbinYue</span><br><span class="line">cd ShengbinYue</span><br><span class="line">git clone https://hf-mirror.com/ShengbinYue/DISC-LawLLM</span><br><span class="line">cd ..</span><br><span class="line">mkdir cache</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遇到报错 [Errno 13] Permission denied: <span class="string">&#x27;/data/.cache/huggingface/modules/transformers_modules/DISC-LawLLM&#x27;</span></span></span><br><span class="line">export HF_HOME=&quot;~/verticalLLM/lzjr/DISC-LawLLM/cache&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果遇到CUDA error: out of memory 用 watch -n 0.5 nvidia-smi查看显卡占用情况 如果<span class="built_in">kill</span>不了相关进程，就运行下面的指令，比如有三张卡0,1,2,其中2被另一个程序占用了大量显存且Kill不了，就用下面的命令</span></span><br><span class="line">export CUDA_VISIBLE_DEVICES=0,1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">python cli_demo.py</span><br></pre></td></tr></table></figure><p>运行成功：</p><p><img src="https://s2.loli.net/2024/08/07/oK1lrgLAFYdjhb3.png" alt="image-20240807123508410.png"></p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><ol><li><p>请对以下案件做出分析并给出可能的判决：2021年11月9日，原告与被告南湖国旅公司签订《综合授信协议》，约定原告向被告南湖公司提供授信额度1000万元。同日，原告与被告南湖国旅公司、南湖粤途公司、王子山公司、布某、郭某、郑某、刘某、徐某、胡某、赵某、许某签订《最高额保证合同》，约定为上述债务提供最高额保证担保。2021年11月10日，原告与被告南湖国旅公司签订《流动资金借款合同》，约定贷款金额分别为1000万元，2021年1月10日，原告依约发放上述贷款。但被告南湖国旅公司在原告发放贷款后的2个月内，新增数十笔执行案件，严重危及原告债权，被告布某作为保证人，也发生新的重大执行案件，且在发生上述情况后，均未及时书面通知原告。</p><ul><li><p>DISC-LawGPT：</p><p><img src="https://s2.loli.net/2024/08/07/eoKcCgHjTyqQDv9.png" alt="image-20240807131707454.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/07/FwzhXucij3eyK5I.png" alt="image-20240807131726207.png"></p></li></ul></li><li><p>请对以下案件做出分析并给出可能的判决：2021年4月17日，刘某1向刘某出具借条一份，内容为：“借条今借到现金贰拾万元（￥200000.00）借款人：刘某1（捺印）2021.4月17号”刘某通过微信转账方式向刘某1交付出借款，分别为2021年4月17日转账30000元、30000元、30000元、10000元，2021年5月29日转账30000元、20000元、30000元、20000元，共计200000元。至本次诉讼，刘某1通过微信转账还款61500元，尚欠138500元。</p><ul><li><p>DISC-LawGPT：</p><p><img src="https://s2.loli.net/2024/08/07/iqcLWBl2a9uysOx.png" alt="image-20240807132055034.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/07/meUoVv8lhtfRnX2.png" alt="image-20240807132106568.png"></p></li></ul></li><li><p>劳动者（正式工）未提前30日告知用人单位即离职，需要支付违约金吗？</p><ul><li><p>DISC-LawGPT</p><p><img src="https://s2.loli.net/2024/08/07/ETL7JypSWdkaAbh.png" alt="image-20240807132306145.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/07/46CNPuW38xb9QYZ.png" alt="image-20240807132324700.png"></p></li></ul></li><li><p>请对以下案件做出分析并给出可能的判决：原告与被告于2020年8月11日签订《内江师范学院新校区建设工程配电箱买卖合同》，双方约定由原告向被告内江师范学院新校区项目提供配电箱设备，合同暂定合计1262676.36元，双方并就供货期限、运输及交货方式、验收、货款支付、争议解决等进行约定。合同签订后，原告依约履行，至2021年5月6日完成全部供货，实际供货金额1164220.59元，并已向被告开具全额发票。现被告已支付货款695000元，剩余货款469220.59元未支付。另外，原告于2020年8月31日向被告缴纳了该项目履约保证金63133元，被告未予退还。</p><ul><li><p>DISC-LawGPT:</p><p><img src="https://s2.loli.net/2024/08/07/5ZztM1dk8SrwAHq.png" alt="image-20240807132716297.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/07/2SBbJ4cG5fxwpYT.png" alt="image-20240807132607039.png"></p></li></ul></li><li><p>网购商品用快递送达，商品在快递途中、签收之前毁损的风险谁承担？</p><ul><li><p>DISC-LawGPT:</p><p><img src="https://s2.loli.net/2024/08/07/ta5LNwDUFjI7bCW.png" alt="image-20240807133036171.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/07/aibWvgdDErx1ehN.png" alt="image-20240807132754350.png"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DISC-LawGPTt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程、多线程与线程池总结</title>
      <link href="/2024/08/07/2024-08-07-Java%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2024/08/07/2024-08-07-Java%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java线程、多线程与线程池总结"><a href="#Java线程、多线程与线程池总结" class="headerlink" title="Java线程、多线程与线程池总结"></a>Java线程、多线程与线程池总结</h1><h2 id="Java创建线程的三种方法"><a href="#Java创建线程的三种方法" class="headerlink" title="Java创建线程的三种方法"></a>Java创建线程的三种方法</h2><ol><li><p><strong>继承Thread类创建线程类 （extends）</strong></p><ol><li><p>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体(线程体)。</p></li><li><p>创建Thread子类的实例，即创建了线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadByExtendThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i); <span class="comment">//获取本线程的名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">CreateThreadByExtendThread</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateThreadByExtendThread</span>();</span><br><span class="line">        <span class="type">CreateThreadByExtendThread</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateThreadByExtendThread</span>();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>通过Runnable接口创建线程类</strong></p><ol><li><p>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p></li><li><p>创建 Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p></li><li><p>调用线程对象的start()方法来启动该线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadByImplementRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        CreateThreadByImplementRunnable createThreadByImplementRunnable1=<span class="keyword">new</span> <span class="title class_">CreateThreadByImplementRunnable</span>();</span><br><span class="line">        CreateThreadByImplementRunnable createThreadByImplementRunnable2=<span class="keyword">new</span> <span class="title class_">CreateThreadByImplementRunnable</span>();</span><br><span class="line">        Thread thread1= <span class="keyword">new</span> <span class="title class_">Thread</span>(createThreadByImplementRunnable1,<span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">        Thread thread2= <span class="keyword">new</span> <span class="title class_">Thread</span>(createThreadByImplementRunnable2,<span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>通过Callable和Future创建线程</strong></p><p>callable-&gt;callable实现类-&gt;FutureTask&lt;&gt;(callable实现类实例)-&gt;Thread（futuretask实例）</p><ol><li><p>创建Callable接口的实现类，并实现call()方法，该<em><strong>call()方法将作为线程执行体，并且有返回值</strong></em>。</p></li><li><p>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方</p><p>法的返回值。（FutureTask是一个包装器，它通过接受Callable来创建，它同时实现了Future和Runnable接口）</p></li><li><p>使用FutureTask对象作为Thread对象的target创建并启动新线程。</p></li><li><p>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadByImplementCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="type">CreateThreadByImplementCallable</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateThreadByImplementCallable</span>();</span><br><span class="line">            FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(ct);</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Java创建线程池的五种方法"><a href="#Java创建线程池的五种方法" class="headerlink" title="Java创建线程池的五种方法"></a>Java创建线程池的五种方法</h2><p>继承的ExecutorService接口</p><ol><li><p><strong>newCachedThreadPool</strong>（没有上限的线程池），如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">cachedThreadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">cachedThreadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行线程任务&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>newFixdedThreadPool</strong>（有上限的线程池），创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">fixedThreadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行线程任务&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>newScheduledThreadPool</strong>，创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delay 3 seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">3</span>, TimeUnit.SECONDS);<span class="comment">//延迟三秒执行</span></span><br></pre></td></tr></table></figure></li><li><p><strong>newSingleThreadExecutor</strong>，创建一个<strong>单线程化</strong>的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行线程任务&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>ThreadPoolExecutor</strong>（自定义创建线程池）</p><ul><li><p>它最长的构造方法有七个参数。</p><ol><li>核心线程数量——在线程池当中无论空闲多久都不会被删除的线程</li><li>线程池当中最大的线程数量——线程池当中最大能创建的线程数量</li><li>空闲时间（数值）——临时线程（线程池中出核心线程之外的线程）空闲了多久就会被淘汰的时间。</li><li>空闲时间（单位）——临时线程空闲了多久就会被淘汰的时间单位，要用枚举类TimeUnit类作为参数</li><li>阻塞队列——就是创建一个阻塞队列作为参数传入，就是当线程池当中线程数量已经达到了最大线程数量，允许多少个任务排队获取线程，其余的用参数七那个方案来处理。</li><li>创建线程的方式——不是new一个线程，而是传入一个线程工厂（例如：Executors工具类中的defaultThreadFactory方法返回的就是一个线程工厂）</li><li>要执行的任务过多时的解决方案——当等待队列中也排满时要怎么处理这些任务(任务拒绝策略)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码实现</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 之前用工具类进行创建，有好多参数不能自己设置</span></span><br><span class="line"><span class="comment">     * 咱直接自己手动创建一个线程池，自己设置参数</span></span><br><span class="line"><span class="comment">     * 参数一：核心线程数量                           不能小于0</span></span><br><span class="line"><span class="comment">     * 参数二：最大线程数                             不能小于0，数值大于等于核心线程数量</span></span><br><span class="line"><span class="comment">     * 参数三：空闲临时线程最大存活时间（数值）           不能小于0</span></span><br><span class="line"><span class="comment">     * 参数四：空闲临时线程最大存活时间（单位）            用TimeUnit这个枚举类表示</span></span><br><span class="line"><span class="comment">     * 参数五：任务队列，也就是一个堵塞队列               不能为null</span></span><br><span class="line"><span class="comment">     * 参数六:创建线程的工厂                            不能为null</span></span><br><span class="line"><span class="comment">     * 参数七：任务的拒绝策略                             不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">3</span>,  <span class="comment">// 核心线程数量</span></span><br><span class="line">        <span class="number">6</span>,              <span class="comment">//最大线程数</span></span><br><span class="line">        <span class="number">60</span>,             <span class="comment">//空闲临时线程最大存活时间（数值）</span></span><br><span class="line">        TimeUnit.SECONDS,<span class="comment">//空闲临时线程最大存活时间（单位）</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),<span class="comment">//任务队列，也就是一个堵塞队列，也可以使用LinkedBlockingQueue这个阻塞队列</span></span><br><span class="line">        Executors.defaultThreadFactory(),<span class="comment">//用线程池工具类Executors创建线程的工厂</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">//任务的拒绝策略中其中一个，丢弃任务并抛出RejectedExecutionException</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="https://s2.loli.net/2024/08/04/fTsqWtGjBRbrVxS.png" alt="image-20240804205131842.png"></p><h2 id="ExecutorService的submit和execute的区别"><a href="#ExecutorService的submit和execute的区别" class="headerlink" title="ExecutorService的submit和execute的区别"></a>ExecutorService的submit和execute的区别</h2><p>在 Java 中，ExecutorService 接口是用于管理和执行线程的框架，它定义了两个用于提交任务的方法：submit() 和 execute()。这两种方法有一些区别：</p><ol><li><p>返回值：</p><ul><li>submit() 方法接受 <strong>Callable</strong>（因为实现Callable的call也有返回值嘛，而且还要抛出异常） 或 Runnable 任务，并返回一个 Future 对象，可以用于获取任务的执行结果或取消任务的执行。</li><li>execute() 方法接受 Runnable 任务，但它没有返回值，因此无法获取任务的执行结果。</li></ul></li><li><p>异常处理：</p><ul><li>submit() 方法可以捕获任务执行过程中抛出的异常，并通过 Future 对象的 get() 方法抛出，从而实现对异常的处理。</li><li>execute() 方法无法捕获任务执行过程中的异常，因为它没有返回值。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubmitVsExecuteExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 submit() 提交 Callable 任务</span></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Submit Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 execute() 提交 Runnable 任务</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Callable task completed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Runnable task completed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试汇总</title>
      <link href="/2024/08/06/2024-08-06-Java%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
      <url>/2024/08/06/2024-08-06-Java%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面试汇总"><a href="#Java面试汇总" class="headerlink" title="Java面试汇总"></a>Java面试汇总</h1><h2 id="项目问题"><a href="#项目问题" class="headerlink" title="项目问题"></a>项目问题</h2><h3 id="数联网交换机"><a href="#数联网交换机" class="headerlink" title="数联网交换机"></a>数联网交换机</h3><p><a href="https://blog.csdn.net/xiaojiejie_baby/article/details/136445150?ops_request_misc=%7B%22request_id%22:%22D9065D87-9E90-424F-8F26-052C345CCA28%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=D9065D87-9E90-424F-8F26-052C345CCA28&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-136445150-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=netty%E9%9D%A2%E7%BB%8F&spm=1018.2226.3001.4187">Netty核心面试题20连问，由浅入深 助你轻松吊打面试官_netty面试题-CSDN博客</a></p><h3 id="programmer-club"><a href="#programmer-club" class="headerlink" title="programmer club"></a>programmer club</h3><p><a href="https://roger-lv.github.io/2024/07/21/2024-07-21-%E5%90%8E%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1-programmer-club%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%BF%83%E5%BE%97/">后端微服务-programmer-club项目的设计与实现心得 | Roger-Lv’s space</a></p><h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>​好的，面试官，接下来我来阐述一个这个项目的业务是什么。这个项目主要是我在学校和几个小伙伴一起来做的，背景主要是我们是学校的软件工程专业，本科存在“工作室”这么一个概念的组织，然后每年我们大三下都会有半年的实习时间，大家在求职的过程中，免不了要进行面试题的学习，网上的pdf 很多，大家一般都是基于此来进行背诵或者收集，重复的题目及答案的质量参差不齐，我们和老师就都有一个想法，做一个线上化的面试题网站，来进行资源整合。学习面试的同时，将所学习的技术结合到一起。我们采用的是主流的微服务架构 alibaba，配合主流的中间件，前端主要是以 react 配合 antdesiqn 来进行，以C端为主的一个网站形式。我们叫他programmer_club(说你自己起的名字)，整体为一个社区的形式，主要实现的功能有刷题，练题，交流群，模拟面试。我在这里面承担的角色是负责人，主要是输出想法设计技术选型，架构设计，功能的设计及落地。其中刷题模块、登录注册鉴权等模块以及优化等是我来进行主要落地实现的。项目主要为我们软件学院的人来提供使用，目前这个网站已经给学校内部的同学来使用，由工作室内部的同学继续去优化。</p><h4 id="为什么要选用ddd（领域驱动设计）"><a href="#为什么要选用ddd（领域驱动设计）" class="headerlink" title="为什么要选用ddd（领域驱动设计）"></a>为什么要选用ddd（领域驱动设计）</h4><p>使用DDD（领域驱动设计)的原因主要有以下几点:</p><ol><li>提高可维护性<ul><li>DDD通过将复杂的业务场景划分为简单的领域，有利于代码的阅读和维护。这有助于开发者更好地组织代码，降低系统复杂度。</li><li>通过明确领域边界和概念，DDD使得每个领域的代码更加内聚，降低了领域之间的耦合，提高了代码的可维护性。</li></ul></li><li>提高可扩展性:<ul><li>DDD强调业务领域的划分和建模，领域之间的解耦降低了系统间的合度，有利于未来的功能扩展和新技术引入。</li><li>清晰的领域模型设计可以更容易地支持新功能的添加和旧功能的修改，而不会影响到其他不相关的领域。</li></ul></li><li>提高灵活性:<ul><li>基于领域模型的设计使得系统能够更快地响应业务变化，提高适应性。</li><li>当业务需求发生变化时，DDD的灵活性允许开发者通过修改或扩展领域模型来应对这些变化，而不需要对整个系统进行大规模的重构。</li></ul></li><li>促进团队沟通:<ul><li>通过清晰地定义领域边界，DDD有助于团队之间的交流和协作。每个团队成员都可以更加专注于自己所在的领域，减少跨领域沟通的成本。</li><li>清晰的领域模型还可以作为团队成员之间的共同语言，促进对业务需求和系统设计的深入讨论和理解。</li></ul></li><li>支持复杂业务场景:<ul><li>对于涉及多个业务领域目业务逻辑复杂的项目，DDD能够显著提高系统的可维护性、可扩展性和灵活性。它可以帮助开发者更好地理解和把握业务需求，实现高质量的软件开发。</li></ul></li><li>使用业务变化：<ul><li>在业务领域变化频繁的情况下，DDD能够方便地进行模型的调整和优化，以适应不断变化的业务需求。这有助于降低因业务变动导致的开发成本，提高系统的适应能力。</li></ul></li><li>支持团队协作:<ul><li>在大型项目中，DDD有助于明确各团队的职责范围，提高团队之间的沟通协作效率。通过将系统划分为不同的领域，每个团队可以专注于自己所在领域的开发，减少了跨团队的依赖和冲突。</li></ul></li></ol><p>DDD通过强调业务领域的划分和建模，提高了软件系统的可维护性、可扩展性和灵活性。这使得DDD成为应对复杂业务场景、团队协作和业务变化的有效方法论。然而，需要注意的是，DDD对开发者经验和领域知识要求较高，开发者需要避免过度设计和降低学习成本。</p><h4 id="是怎么在这个项目里面使用satoken的？"><a href="#是怎么在这个项目里面使用satoken的？" class="headerlink" title="是怎么在这个项目里面使用satoken的？"></a>是怎么在这个项目里面使用satoken的？</h4><p>​这个问题从两个方面来回答的吧：</p><ul><li>一方面是技术选型涉及的成本，大家都知道权限是每个项目都绕不开的，如何快速的接入，并且具备较好的扩展性，功能完备，使我们最开始需要考虑的一个东西，Sa-Token十分轻量，功能齐全，学习成本低，可以快速接入。</li><li>另一方面就是复杂性考虑: Sa-Token 是一个轻量级 Java 权限认证框架，主要解决:登录认证、权限认证、单点登录、OAuth2.0、分布式Session会话、微服务网关鉴权 等一系列权限相关问题，正好符合我们的微服务分布式项目的场景，无需实现任何接口，无需创建任何配置文件，只需要一句静态代码的调用，便可以完成会话登录认证相比 Shiro、SpringSecurity 等框架的复杂，使用之后就知道 Sa-Token 的 API 设计是多么的好用,</li></ul><p>​说到 token 必须先说一下 cookie。传统的常规的一般是由 cookie 进行完成，Cookie 有两个特性:可由后端控制写入，每次请求自动提交。这就使得我们在前端代码中，无需任何特殊操作，就能完成鉴权的全部流程。但是在app、小程序等前后端分离场景中，一般是没有 Cookie 这一功能的。所以我们就引入 token 的这个概念。拆解出来主要是两步，一步是登录后，后端返回 token，另一部是前端请求带着 token，将 token 放到 header 里面。实现了 token 的传递之后，token 的生成过程，可以包含各种信息，比如用户的用户名，相关的权限，都可以包含在里面，这样一个 token 就可以帮助我们带来很多信息，鉴权等功能也就非常容易做了，同时还解决了cookie 问题。</p><p><a href="https://blog.csdn.net/weixin_42672802/article/details/132511713">session、cookie和token的区别_cookie,session,token的区别-CSDN博客</a></p><h4 id="登录认证是怎么做的"><a href="#登录认证是怎么做的" class="headerlink" title="登录认证是怎么做的"></a>登录认证是怎么做的</h4><ol><li><p>如何对接公众号登录</p><p>对接公众号主要是希望用微信的唯一的 openld，来作为唯一的标识，也方便用户的登录。</p><ul><li>整体流程主要是用户扫公众号码。然后发一条消息:验证码。</li><li>我们通过 api 回复一个随机的码，存入redis 的主要结构，key是一个前缀+validCode，value是 OpenId。</li><li>用户在验证码框输入之后，点击登录，进入我们的注册模块，同时关联角色和权限(数据库操作)，就实现了<strong>网关的统一鉴权</strong>，用户就可以进行操作，用户可以根据个人的 openld 来维护个人信息。</li><li>用户登录成功之后，返回 token（satoken通过openId调用一个自带的方法登录，有一个自带的方法返回token），前端的所有请求都带着 token 就可以访问从服务涉及上，我们开一个新服务，专门用于对接某信的 api 和微信的消息的回调。</li></ul></li><li><p>你是如何监听用户发给公众号的消息的?</p><p>主要是对接公众号的回调消息平台配置。重点主要分为三步:填写服务器配置，验证服务器地址的有效性，依据接口文档实现业务逻辑。</p><ul><li>在公众号配置界面填写服务器地址(URL)、Token和EncodingAESKey。<ul><li>其中URL是开发者用来接收微信消息和事件的接口URL。</li><li>Token可由开发者可以任意填写，<strong>用作生成签名</strong>(该Token会和接口URL中包含的Token进行比对，从而验证安全性)。</li><li>EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。</li></ul></li><li>验证消息的确来自微信服务器:某信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带参数有签名，内容，时间戳之类的，后台服务要通过一样的加密形式来进行校验。</li><li>依据接口文档实现业务逻辑:验证URL有效性成功后即接入生效，用户每次向公众号发送消息，开发者填写的服务器配置URL将得到微信服务器推送过来的消息和事件，开发者可以依据自身业务逻辑进行响应，如回复消息。</li></ul></li><li><p>回调消息的验证校验是如何做的？</p><p>开发者通过检验signature对请求进行校验。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。加密&#x2F;校验流程如下:</p><p>1)将token、timestamp、nonce三个参数进行字典序排序</p><p>2)将三个参数字符串拼接成一个字符串进行sha1加密</p><p>3)开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p></li></ol><h4 id="gateway网关是怎么设计的"><a href="#gateway网关是怎么设计的" class="headerlink" title="gateway网关是怎么设计的"></a>gateway网关是怎么设计的</h4><p>​gateway 网关，作为我们项目的整个流量入口，目前主要实现了路由，负载，统一鉴权，全局过滤器，异常处理这些功能。路由和负载承载了后台微服务的 ur 转发和前缀匹配。统一鉴权主要是配合 satoken，在 gateway 集成 redis，同时实现 satoken 提供的权限读取接口，在其中自定义读取逻辑，实现鉴权的校验。在其中还实现了登录拦截器，用于传递 loginld 到微服务中，借助了 header 的传递。</p><h4 id="分布式会话的鉴权在微服务中是怎么做的"><a href="#分布式会话的鉴权在微服务中是怎么做的" class="headerlink" title="分布式会话的鉴权在微服务中是怎么做的"></a>分布式会话的鉴权在微服务中是怎么做的</h4><p>​分布式会话鉴权的重点主要是如何获取到权限数据，然后进行校验处理，一般其实有三种形式：</p><ul><li>在网关处集成ORM框架，直接从数据库查询数据。</li><li>先从Redis中获取数据，获取不到时走ORM框架查询数据库。</li><li>从Redis中获取缓存数据。</li></ul><p>​我们采取的是第三种直接从redis 中获取缓存的权限数据，这有一个要求，就是我们的 redis 的高可用性必须要高。因为我们是内部使用，这块可以采取刷新等措施，来处理极端异常情况，例如权限缓存丢失。如果想要保障的话，可以采用第二种方式，也是常见的缓存没有查数据库。从角度来看，个人觉得我们这种场景下，再集成数据库 orm 导致网关有点重，所以我们直接与缓存做交互。</p><h4 id="gateway如何实现全局异常处理"><a href="#gateway如何实现全局异常处理" class="headerlink" title="gateway如何实现全局异常处理"></a>gateway如何实现全局异常处理</h4><p>​gateway 的全局异常处理主要需要我们实现一个接口ErrorWebExceptionHandler，实现其中的 handle 方法在方法内，我们能获取到其中request与response，webhandler 会帮助我们拦住所有异常的情况。然后我们可以在里面做拦截的进一步处理，更改状态码，状态错误信息等等。最后通过 response 可以将其返回出去。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><a href="https://blog.csdn.net/wangzhengjiushiwo/article/details/111370159">讲解java单例模式中的饿汉模式和懒汉模式的区别与使用_饿汉式和懒汉式用那个-CSDN博客</a></p><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><p><a href="https://blog.csdn.net/yyuggjggg/article/details/120803154?ops_request_misc=%7B%22request_id%22:%22F58045E8-7B9B-4B46-A20B-8787BDE2F55B%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=F58045E8-7B9B-4B46-A20B-8787BDE2F55B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120803154-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=arraylist%E5%92%8Clinkedlist%E5%BA%95%E5%B1%82&spm=1018.2226.3001.4187">ArrayList集合和LinkedList集合底层原理_linkedarraylist底层-CSDN博客</a></p><h3 id="JVM、JRE、JDK的关系"><a href="#JVM、JRE、JDK的关系" class="headerlink" title="JVM、JRE、JDK的关系"></a>JVM、JRE、JDK的关系</h3><p>JVM、JRE 和 JDK 是 Java 生态系统中的三个核心组件，它们在 Java 开发和运行时环境中扮演着不同的角色。</p><p><strong>JVM (Java Virtual Machine)</strong></p><p><strong>Java 虚拟机</strong>是一种抽象计算机，它为 Java 程序提供了运行环境。JM 的主要职责是执行 Java 字节码，并将其转换为机器代码，以便在特定平台上运行。JVM 是实现 Java 平台无关性的关键组件。</p><ul><li>功能:<ul><li>字节码执行: JVM 负责加载、验证和执行Java 字节码。</li><li>内存管理: JVM 管理堆内存和栈内存，并执行垃圾回收(GarbageCollection)</li><li>安全性: JVM 提供了安全机制，确保Java 应用在受控环境中运行</li></ul></li></ul><p><strong>JRE (Java Runtime Environment)</strong></p><p>Java 运行时环境是一个<strong>软件包</strong>，它提供了运行 Java 应用程序所需的所有组件。JRE 包含 JVM 以及 Java 类库和其他支持文件。JRE <strong>是运行 Java 应用程序的最低要求。</strong></p><ul><li><p>组成:</p><ul><li>JVM:JRE<strong>包含 JVM</strong>，用于执行 Java 字节码。</li><li><strong>核心类库:J</strong>RE 包含 Java 标准类库(如java.lang、java.util等)，这些类库为 Java 应用提供基础功能。</li><li>其他支持文件:包括配置文件、资源文件等。</li></ul></li></ul><p><strong>JDK (Java Development Kit)</strong></p><p>Java 开发工具包是为 Java 开发者提供的完整开发环境。JDK 包含 JRE 以及开发 Java 应用程序所需的工具和库。JDK是开发和编译 Java 程序的必备工具。</p><ul><li><p>组成:</p><ul><li>JRE:JDK 包含一个完整的 JRE 环境。</li><li>**开发工具:**包括编译器(javac)、调试器(jdb)、打包工具(jar)等，用于开发、编译和调试 Java 程序。</li><li>**额外的库:**提供了额外的库和头文件，用于开发Java 应用程序。</li></ul></li></ul><p><strong>关系</strong>：</p><ul><li>JVM 是JRE的一部分:JVM 是JRE中的核心组件，负责执行Java 字节码。</li><li>JRE 是 JDK 的一部分:JRE提供了运行 Java 应用程序所需的环境。而JDK则在此基础上添加了开发工具和额外的库。</li></ul><p><strong>总结：</strong></p><ul><li>JVM:执行 Java 字节码的虚拟机，提供内存管理和安全机制。</li><li>JRE:包含 JVM 和核心类库，提供运行 Java 应用程序的环境。</li><li>JDK:包含 JRE 和开发工具，提供开发、编译和调试 Java 应用程序的完整环境。</li></ul><h3 id="Java三大特性"><a href="#Java三大特性" class="headerlink" title="Java三大特性"></a>Java三大特性</h3><p>Java大特性是面向对象编程（OOP）的核心概念:封装、继承和多态。这些特性使得 Java 程序具有良好的结构和可维护性。</p><ol><li><p><strong>封装（Encapsulation）</strong></p><p>封装是将对象的状态(属性)和行为(方法)组合在一起，并对外隐藏对象的内部细节，只暴露必要的接口。通过封装，可以保护对象的状态不被外部直接修改，增强了代码的安全性和可维护性。</p><ul><li>实现方式：<ul><li>使用private关键字将属性声明为私有的。</li><li>提供public的 getter 和 setter 方法来访问和修改私有属性。</li></ul></li></ul></li><li><p><strong>继承（Inheritance）</strong></p><p>继承是面向对象编程中的一个机制，通过继承，一个类可以继承另一个类的属性和方法，从而实现代码的重用。被继承的类称为父类(超类)，继承的类称为子类(派生类)。</p><ul><li>实现方式:<ul><li>使用extends关键字来声明一个类继承另一个类</li></ul></li></ul></li><li><p><strong>多态(Polymorphism)</strong></p><p>多态是指同一个方法在不同对象中具有不同的实现方式。多态性允许对象在不同的上下文中以不同的形式表现。多态可以通过<strong>方法重载(Overloading)和方法重写(Overriding)来实现</strong>。</p><ul><li>方法重载:在同一个类中，方法名相同但参数列表不同。</li><li>方法重写:在子类中重新定义父类中的方法。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li>封装:通过将数据和方法封装在类中，并使用访问控制符来保护数据。</li><li>继承:通过继承机制，实现代码的重用和扩展。</li><li>多态:通过方法重载和方法重写，实现同一方法在不同对象中的不同表现。</li></ul><h3 id="什么是封装？"><a href="#什么是封装？" class="headerlink" title="什么是封装？"></a>什么是封装？</h3><p>封装(Encapsulation)是面向对象编程(OOP)中的一个基本概念。它涉及到将对象的状态(属性)和行为(方法)封装在一个类中，并<strong>对外部隐藏内部实现细节，只暴露必要的接口</strong>。这种做法有助于提高代码的安全性、可维护性和可重用性。</p><ol><li><p>属性私有化</p><p>将类的属性声明为私有(private)，以防止外部直接访问和修改这些属性</p></li><li><p>提供公共的访问方法</p><p>通过公共(public)的 getter 和 setter 方法来控制对私有属性的访问和修改。这些方法允许外部代码在受控的情况下读取和修改属性值。</p></li><li><p>隐藏实现细节</p><p>封装还包括隐藏类内部的实现细节，只暴露必要的接口给外部使用者。这有助于降低代码的复杂性，提高模块化程度</p></li></ol><p><strong>封装的优点：</strong></p><ol><li>**数据保护:**通过私有化属性，可以防止外部代码直接修改对象的状态，从而保护数据的完整性简化接口:只暴露必要的方法，隐藏不需要的实现细节，使得类的接口更加简洁明了</li><li>**提高可维护性:**封装使得类的实现细节可以独立于外部代码进行修改，只要接口不变，外部代码不需要做任何改变。</li><li>**增强灵活性: **通过 getter 和 setter 方法，可以在访问或修改属性时添加额外的逻辑，比如数据验证或事件触发。</li></ol><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><p>继承(Inheritance)是面向对象编程(OOP)中的一个核心概念。它允许一个类(子类或派生类)继承另一个类(父类或超类)的属性和方法，从而实现代码的重用和扩展。通过继承，子类可以复用父类的代码，并且可以新增或重写(覆盖)父类的方法以实现特定的功能。</p><p><strong>继承的基本概念：</strong></p><ul><li>**父类(Super Class):**被继承的类，提供属性和方法。</li><li>**子类(Sub Class):**继承父类的类，可以复用父类的代码，并且可以新增或重写父类的方法。</li><li>**extends关键字:**用于声明一个类继承另一个类。</li></ul><p><strong>继承的特点：</strong></p><ol><li><strong>单继承:</strong> Java 只支持单继承，即一个类只能有一个直接父类。</li><li>**继承层次: **子类可以继续被其他类继承，形成继承层次结构。</li><li>**super关键字: **用于引用父类的属性和方法，特别是在子类重写父类的方法时，可以通过super调用父类的方法。</li></ol><p><strong>继承的优点：</strong></p><ol><li><strong>代码重用:</strong> 子类可以复用父类的代码，减少代码重复。</li><li><strong>代码扩展:</strong> 子类可以在继承父类的基础上新增属性和方法，扩展功能。</li><li>**多态性: **通过继承和方法重写，可以实现多态性，使得同一方法在不同对象中具有不同的实现。</li></ol><p><strong>继承中的一些注意事项</strong></p><ol><li>**构造方法:**子类的构造方法会调用父类的构造方法。如果父类没有无参构造方法，子类必须显式调用父类的有1参构造方法。</li><li>**方法重写(Overriding):**子类可以重写父类的方法，以提供特定的实现。重写的方法必须具有相同的方法2签名(方法名、参数列表和返回类型)。</li><li>**super关键字:**用于调用父类的构造方法或父类的方法。例如，在子类的构造方法中使用super调用父类的构》造方法。</li></ol><h3 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h3><p>多态(Polymorphism)是面向对象编程(OOP)中的一个核心概念，它允许相同的操作在不同的对象上表现出不同的行为。多态性使得一个接口可以有多种实现，从而提高代码的灵活性和可扩展性。</p><p><strong>多态的类型</strong></p><p>多态主要有两种形式:</p><ol><li>编译时多态(静态多态)):通过方法重载(Method Overloading)实现:</li><li>运行时多态(动态多态):通过方法重写(Method Overriding)和接口实现(InterfaceImplementation)实现。</li></ol><p><strong>编译时多态(方法重载)</strong></p><p>编译时多态是通过<strong>方法重载</strong>实现的，即同一个类中多个方法具有相同的名称，但参数列表不同。编译器在编译时根据方法的参数列表来决定调用哪个方法。</p><p><strong>运行时多态(方法重写)</strong></p><p>运行时多态是通过<strong>方法重写</strong>实现的，即子类重写父类的方法。在运行时，Java 虚拟机根据对象的实际类型调用对应的方法。</p><p><strong>接口和抽象类的多态性</strong><br>多态性还可以通过接口和抽象类实现。子类或实现类可以提供不同的实现，从而实现多态性。</p><p><strong>多态的优点</strong></p><ol><li>**代码重用:**通过多态性，可以使用同一个接口或父类来操作不同的对象，减少代码重复。</li><li>**灵活性和可扩展性:**多态性使得代码更加灵活，可以轻松地扩展新的子类或实现类而不影响现有代码。</li><li>**简化代码:**通过多态性，可以使用统一的接口来处理不同的对象，简化代码逻辑。</li></ol><p><strong>总结</strong><br>多态是面向对象编程中的一个重要特性，它允许相同的操作在不同的对象上表现出不同的行为。通过方法重载和方法重写，以及接口和抽象类的实现，多态性提高了代码的灵活性、可扩展性和可维护性。</p><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>重载(Overoading)和重写(Overriding)是面向对象编程中两个重要的概念，它们在方法定义和调用时有不同的用途和规则。</p><p><strong>重载(Overloading)</strong></p><p><strong>定义:</strong> 在同一个类中，方法名称相同，但参数列表(参数的类型、数量或顺序)不同的多个方法。</p><p><strong>特性:</strong></p><ul><li>**方法名称:**相同。</li><li>**参数列表:**必须不同(参数的类型、数量、或顺序)。</li><li>**返回类型:**可以相同也可以不同。</li><li>**访问修饰符:**可以相同也可以不同。</li><li>**静态&#x2F;实例方法:**都可以重载。</li><li>**编译时决定:**方法的选择在编译时由编译器根据参数列表决定。</li></ul><p><strong>重写(Overriding)</strong></p><p>**定义:**在子类中定义一个方法，该方法与父类中的某个方法具有相同的方法名称、参数列表和返回类型，以便在子类中提供该方法的具体实现。</p><p><strong>特性:</strong></p><ul><li>方法名称:相同。</li><li>参数列表:必须相同。</li><li>返回类型:必须相同(Java5及以后可以是协变返回类型，即返回类型可以是父类方法返回类型的子类型)。</li><li>访问修饰符:访问级别不能比父类方法更严格(可以更宽松)。</li><li>静态&#x2F;实例方法:只能重写实例方法，不能重写静态方法。</li><li>运行时决定:方法的选择在运行时由JVM 根据对象的实际类型决定(动态绑定)。</li></ul><p><strong>总结</strong></p><ul><li><strong>重载:</strong><ul><li>发生在同一个类中。</li><li>方法名称相同，参数列表不同。</li><li>编译时决定调用哪个方法(静态绑定)。</li></ul></li><li><strong>重写：</strong><ul><li>发生在子类和父类之间。</li><li>方法名称、参数列表和返回类型必须相同(或协变返回类型）。</li><li>运行时决定调用哪个方法(动态绑定)。</li></ul></li></ul><h3 id="构造器能否被重写？"><a href="#构造器能否被重写？" class="headerlink" title="构造器能否被重写？"></a>构造器能否被重写？</h3><p><strong>构造器不能被重写</strong></p><p>**定义:**构造器不能被重写(Overridden)。重写是指在子类中提供一个与父类方法具有相同签名的方法，以便在子类中提供该方法的具体实现。但构造器不属于类的继承成员，因此不能被子类重写。</p><p><strong>原因:</strong></p><ol><li>**构造器的作用:**构造器的主要作用是初始化对象的状态。每个类都有自己的构造器，用于初始化该类的实例。子类不能直接继承父类的构造器，因为子类的初始化过程可能与父类不同。</li><li>**方法签名不同:**重写要求方法签名(包括方法名称和参数列表)相同，而构造器在子类中的名称与父类不同2(构造器名称必须与类名相同)。</li><li>**构造器不是类成员:**构造器不属于类的成员方法，它们是特殊的初始化方法，不参与继承机制。</li></ol><p><strong>构造器可以被重载：</strong></p><p>虽然构造器不能被重写，但它们可以被重载(Overloaded)。构造器重载是指在同一个类中定义多个构造器，这些构造器具有相同的名称(类名)，但参数列表不同。</p><p><strong>结论：</strong></p><ul><li>构造器不能被重写:因为构造器不属于类的继承成员，并且它们的名称必须与类名相同。</li><li>构造器可以被重载:在同一个类中，可以定义多个构造器，只要它们的参数列表不同。</li></ul><h3 id="String、StringBuilder、StringBuffer的区别"><a href="#String、StringBuilder、StringBuffer的区别" class="headerlink" title="String、StringBuilder、StringBuffer的区别"></a>String、StringBuilder、StringBuffer的区别</h3><ol><li><p><strong>String</strong></p><p><strong>特性:</strong></p><ul><li>不可变性:String对象是不可变的。一旦创建，字符串的内容就不能被改变。任何对字符串的修改都会生成一个新的String对象。</li><li>线程安全:由于String对象是不可变的，它们是线程安全的，可以在多个线程中安全地共享。</li></ul><p><strong>使用场景：</strong></p><ul><li>适用于字符串内容不会发生变化的场景，例如字符串常量、少量的字符串操作等,</li></ul></li><li><p><strong>StringBuilder</strong></p><p><strong>特性:</strong></p><ul><li>可变性:StringBuilder对象是可变的，可以对字符串内容进行修改，而不会生成新的对象。</li><li>非线程安全:StringBuilder不是线程安全的，它的方法没有同步，因此在多线程环境中使用时需要额外注意。</li></ul><p><strong>使用场景:</strong></p><ul><li>适用于在单线程环境中需要频繁修改字符串内容的场景，性能比StringBuffer更高。</li></ul></li><li><p><strong>StringBuffer</strong></p><p><strong>特性:</strong></p><ul><li><strong>可变性:</strong> StringBuffer对象是可变的，可以对字符串内容进行修改，而不会生成新的对象。</li><li><strong>线程安全:</strong> StringBuffer是线程安全的，它的方法是同步的，可以在多线程环境中安全使用。</li></ul><p><strong>使用场景:</strong></p><ul><li>适用于在多线程环境中需要频繁修改字符串内容的场景。</li></ul><p><strong>线程安全的原因：</strong></p><ul><li>在诸多方法上加了同步锁<code>synchronized</code>。</li></ul></li></ol><h3 id="JDK1-8的字符串常量拼接是怎样的过程？"><a href="#JDK1-8的字符串常量拼接是怎样的过程？" class="headerlink" title="JDK1.8的字符串常量拼接是怎样的过程？"></a>JDK1.8的字符串常量拼接是怎样的过程？</h3><p><strong>编译时优化：</strong></p><ol><li><p><strong>编译时常量折叠:</strong><br>对于编译时已知的字符串常量，Java 编译器会进行常量折叠(Constant Folding)。这意味着在编译阶段，编译器会直接计算出拼接结果，并将其作为一个单一的字符串常量存储在.class文件中。例如:在编译时，这段代码会被优化为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello &quot;</span> + <span class="string">&quot;World!&quot;</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>非常量表达式:</strong><br>如果拼接的字符串包含变量或方法调用，编译器不能在编译时确定结果，因此需要在运行时进行拼接在 JDK 1.8 中，编译器会将这些拼接操作<strong>转换为使用StringBuilder的代码</strong>。例如:在编译时，这段代码会被转换为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;World!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> s1 + <span class="string">&quot; &quot;</span> + s2;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(str1);</span><br><span class="line">sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">sb.append(str2);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure></li></ol><p><strong>运行时处理：</strong></p><ol><li><p><strong>StringBuilder的使用:</strong></p><p>在运行时，对于非常量的字符串拼接，StringBuilder被用来构建最终的字符串。StringBuilder是可变的，因此可以高效地进行字符串的拼接操作。</p><p>例如:在运行时，StringBuilder会依次调用append方法，将各个部分拼接起来，并最终调用toString方法生成结果字符串。</p><p><strong>性能优化：</strong></p><ul><li><p>循环拼接一个长字符串，建议使用StringBuilder，虽然“+”拼接字符串编译后也会变成StringBuilder，但是每次循环处理都会new一个StringBuilder对象，耗时会大大增加。而直接使用StringBuilder，new一次就可以了，效率相对高。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环使用+拼接字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLoopStringConcatenation03ByPlus</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;testLoopStringConcatenation03ByPlus:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        str = str + <span class="string">&quot;-&quot;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;testLoopStringConcatenation03ByPlus，拼接字符串&quot;</span> + count + <span class="string">&quot;次，花费&quot;</span> + (endTime - startTime) + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试循环使用StringBuilder拼接字符串耗时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLoopStringConcatenation04ByStringBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;testLoopStringConcatenation04ByStringBuilder:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        stringBuilder.append(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;testLoopStringConcatenation04ByStringBuilder，拼接字符串&quot;</span> + count + <span class="string">&quot;次，花费&quot;</span> + (endTime - startTime) + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testLoopStringConcatenation03ByPlus</code>，拼接字符串10000次，花费463秒。</p><p><code>testLoopStringConcatenation04ByStringBuilder</code>，拼接字符串10000次，花费13秒。</p><p>可以看出，差异明显，不在一个量级了。</p></li></ul></li></ol><p><strong>总结：</strong></p><p>在 JDK 1.8 中，字符串常量的拼接过程包括编译时的常量折叠和运行时的StringBuilder优化。常量折叠在编译时完成，而对于包含变量或方法调用的拼接，编译器会将其转换为StringBuilder操作，以提高运行时的性能。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><a href="https://blog.csdn.net/qq_31129841/article/details/134800508?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E9%94%81&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-134800508.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">Java中涉及到的锁_java的锁-CSDN博客</a></p><p><a href="https://blog.csdn.net/w8y56f/article/details/89554060?ops_request_misc=%7B%22request_id%22:%226AC14F77-B54A-40E2-BC9B-B5E43E80DDE1%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=6AC14F77-B54A-40E2-BC9B-B5E43E80DDE1&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89554060-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81&spm=1018.2226.3001.4187">可重入锁详解（什么是可重入）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_15002323/article/details/78299615?ops_request_misc=%7B%22request_id%22:%22189C86F7-3A36-4590-84CA-80D0EE05EA8B%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=189C86F7-3A36-4590-84CA-80D0EE05EA8B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-78299615-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=synchronized%E5%92%8Cwait&spm=1018.2226.3001.4187">浅谈synchronized、wait、notify和notifyAll_synchronized,wait,notify-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45795744/article/details/123493673?ops_request_misc=%7B%22request_id%22:%22757F3D0D-BE29-47FB-B090-2CC888215371%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=757F3D0D-BE29-47FB-B090-2CC888215371&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123493673-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=java%E9%94%81%E5%8D%87%E7%BA%A7&spm=1018.2226.3001.4187">Java中的锁升级_java 锁升级-CSDN博客</a></p><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p><a href="https://blog.csdn.net/agonie201218/article/details/128150609?ops_request_misc=%7B%22request_id%22:%2246413ADA-D970-4C57-A5F8-AF3CEAC5C857%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=46413ADA-D970-4C57-A5F8-AF3CEAC5C857&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-128150609-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=AQS&spm=1018.2226.3001.4187">谈谈Java多线程离不开的AQS_java aqs-CSDN博客</a></p><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p><a href="https://blog.csdn.net/qq_45871274/article/details/130223673?ops_request_misc=%7B%22request_id%22:%22C245A664-AD37-4411-9C27-8D08BC787897%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=C245A664-AD37-4411-9C27-8D08BC787897&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-130223673-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=countdownlatch&spm=1018.2226.3001.4187">CountDownLatch介绍和使用【Java多线程必备】-CSDN博客</a></p><h3 id="sleep和wait"><a href="#sleep和wait" class="headerlink" title="sleep和wait"></a>sleep和wait</h3><p><a href="https://blog.csdn.net/jiaomubai/article/details/125235039?ops_request_misc=%7B%22request_id%22:%22C7E88F95-1EE1-4572-90A8-5A2C87D9DDC6%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=C7E88F95-1EE1-4572-90A8-5A2C87D9DDC6&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-125235039-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=sleep%E5%92%8Cwait&spm=1018.2226.3001.4187">线程的 sleep() 方法与 wait() 方法的区别_线程sleep和wait的区别-CSDN博客</a></p><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><h3 id="如何监控慢SQL"><a href="#如何监控慢SQL" class="headerlink" title="如何监控慢SQL"></a>如何监控慢SQL</h3><ol><li><p><strong>启用慢查询日志</strong></p><p>慢查询日志是 MySQL 内置的一种功能，用于记录执行时间超过指定阈值的 SQL 查询。</p><p><strong>配置 MySQL 配置文件(my.cnf 或 my.ini)</strong></p><p>在 MySQL 配置文件中添加或修改以下参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">slow_query_log=1</span><br><span class="line"></span><br><span class="line">slow_query_log_file=/var/log/mysql/slow-query.log</span><br><span class="line"></span><br><span class="line">long_query_time =2</span><br><span class="line"></span><br><span class="line">log queries not using indexes =1</span><br></pre></td></tr></table></figure><ul><li>slow_query_log: 启用慢查询日志。</li><li>slow_query_log_file: 指定慢查询日志文件的路径。</li><li>long_query_time: 定义慢查询的阈值(单位:秒)。</li><li>·log_queries_not _using_indexes: 记录末使用索引的查询。</li></ul><p><strong>重启 MySQL服务</strong></p><p>修改配置文件后，重启 MySQL服务以使配置生效:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 MySQL内置的性能模式(Performance Schema)</strong></p><p>Performance Schema是 MySQL 内置的一个工具，用于收集数据库内部的运行时统计信息。可以通过以下步骤启用和使用 Performance Schema:</p><p><strong>启用Performance Scheme</strong></p><p>在MySQL配置文件中添加或修改以下参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">performance_schema =ON</span><br></pre></td></tr></table></figure><p><strong>重启MySQL服务</strong></p><p>修改配置文件后，重启MySQL服务以使配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p><strong>查询慢查询信息</strong></p><p>使用以下SQL语句查询慢查询信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM performance_schema.events_statements_summary_by_digest ORDER BY SUM_TIMER_WAIT DESC LIMIT 10</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 MySQL 企业监控工具</strong></p><p>MySQL提供了企业版的监控工具，如 MySQL Enterprise Monitor，它可以自动收集、分析和报告慢查询信息。</p><p>这个工具适合企业环境下的全面监控和管理。</p></li><li><p><strong>使用第三方监控工具</strong></p><p>有许多第三方监控工具可以帮助你监控 MySQL的性能，包括慢查询。这些工具通常提供更丰富的功能和更友好的界面。常见的第三方工具包括:</p><ul><li>**Percona Monitoring and Management (PMM):**一个开源的监控和管理工具，专为 MySQL和MongoDB 设计。</li><li>**New Relic:**一个强大的应用性能监控工具，支持 MySQL 和其他数据库。</li><li>**Datadog:**一个综合性的监控平台，支持 MySQL 和其他数据库。</li></ul></li><li><p>使用 SQL分析工具</p><p>MySQL提供了EXPLAIN语句，用于分析 SQL查询的执行计划。通过分析执行计划，可以识别和优化慢查询</p><p><strong>使用EXPLAIN分析查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM your_table WHERE your_condition;</span><br></pre></td></tr></table></figure><p>EXPLAIN的输出结果包含了查询执行的详细信息，包括使用的索引、扫描的行数等。通过分析这些信息，可以找出查询的性能瓶颈并进行优化。</p></li></ol><p><strong>总结</strong></p><p>监控慢 SQL是一个持续的过程，需要结合多种工具和方法。以下是一个综合的监控策略:</p><ol><li>启用慢查询日志:记录执行时间超过阈值的查询。</li><li>使用 Performance Schema:收集和分析详细的运行时统计信息。</li><li>使用企业监控工具:如 MySQLEnterprise Monitor，进行全面的监控和管理。</li><li>使用第三方监控工具:如 Percona Monitoring and Management(PMM)、New Relic、Datadog 等。</li><li>使用 SQL 分析工具:如EXPLAIN，分析和优化查询执行计划。</li></ol><h3 id="MySQL常用监控指标"><a href="#MySQL常用监控指标" class="headerlink" title="MySQL常用监控指标"></a>MySQL常用监控指标</h3><ol><li><p>QPS: 数据库每秒处理的请求数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status where variable_name in(&#x27;Queries&quot;,&#x27;uptime&#x27;);</span><br></pre></td></tr></table></figure><p>QPS &#x3D;(Queries2 -Queries1)&#x2F;(uptime2 -uptime1)</p></li><li><p>TPS: 数据库每秒处理的事务数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status where variable name in(&#x27;com insert&#x27;,com delete&#x27;,com update&#x27;,&#x27;uptime&#x27;);</span><br></pre></td></tr></table></figure><p>事务数TC  ≈ ‘com_insert’,’com_delete’,’com_update’</p><p>TPS ≈ (TC2 -TC1)&#x2F;(uptime2 -uptime1)</p></li><li><p>并发数：数据库实例当前并行处理的会话数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;Threads_running&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>连接数：连接到数据库会话的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;Threads connected&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>缓存命中率：查询命中缓存的比例</p><p>innodb缓冲池查询总数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;innodb_buffer_pool_read_requests&#x27;;</span><br></pre></td></tr></table></figure><p>innodb从磁盘查询数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;innodb_buffer_pool_reads&#x27;;</span><br></pre></td></tr></table></figure><p>生产中配置报警阈值:innodb buffer pool read requests &#x2F;(innodb buffer pool read requests +innodb buffer pool reads)&gt;0.95</p></li><li><p>可用性:数据库是否可以正常对外服务</p><p>周期性连接数据库并执行 <strong>select @@version;</strong></p></li><li><p>阻塞：当前阻塞的会话数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select waiting_pid as &#x27;被阳塞线程&#x27;,</span><br><span class="line">waiting_query as &#x27;被阻塞SQL&#x27;,</span><br><span class="line">blocking_pid as &#x27;阻塞线程&#x27;,</span><br><span class="line">blocking_query as &#x27;阻塞SQL&#x27;,</span><br><span class="line">wait_age as &#x27;阻塞时间’,</span><br><span class="line">sql_ki1l_blocking_query as&#x27;建议操作&#x27;</span><br><span class="line">from sys.innodb_lock_waits</span><br><span class="line">where(unix_timestamp()-unix_timestamp(wait started))&gt;阻塞秒数</span><br></pre></td></tr></table></figure></li><li><p>慢查询：慢查询情况</p><p>开启慢查询日志。my.inf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=on</span><br><span class="line">slow_query_log_file=存放目录long_query_time=0.1秒</span><br><span class="line">log_queries_not_using_indexes=on</span><br></pre></td></tr></table></figure></li></ol><h3 id="慢sql优化方向"><a href="#慢sql优化方向" class="headerlink" title="慢sql优化方向"></a>慢sql优化方向</h3><ol><li>检查查询语句本身。确保使用了合适的索引，避免全表扫描。比如，在WHERE、JOIN或ORDER BY子句中涉及的列上创建索引，这样可以大大提升查询速度。</li><li>优化数据库设计。比如，使用表分区来处理大表，或者根据实际需要在规范化和反规范化之间做出平衡，以减少复杂的JOIN操作。</li><li>调整 MVSQL的配置参数。比如，增加 InnoDB 缓冲池的大小，让更多的数据可以缓存在内存中，减少磁盘 &#x2F;&#x2F;O 操作。同时，根据需要调整查询缓存的大小。</li><li>使用一些性能分析工具，比如EXPLAIN，来分析查询的执行计划，找出性能瓶颈。PerformanceSchema 也是一个很好的工具，可以帮助收集详细的性能数据。</li><li>持续的监控和调优是必不可少的。使用一些监控工具，比如Percona Monitoring and Management(PMM) 或 Datadog，来实时监控数据库的性能，并定期审查和优化慢查询，确保数据库始终保持高效。</li></ol><p><strong>详细解读：</strong></p><ol><li><p><strong>优化查询语句</strong></p><p><strong>使用适当的索引</strong></p><ul><li><p><strong>创建索引</strong>: 确保查询使用了适当的索引。对频繁出现在WHERE、JOIN、ORDER BY和GROUP BY子句中的列创建索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_column_name <span class="keyword">on</span> table_name(column_name);</span><br></pre></td></tr></table></figure></li><li><p><strong>复合索引</strong>：对于多列查询，考虑使用复合索引(多列索引)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_columns <span class="keyword">ON</span> table_ name(column1,column2);</span><br></pre></td></tr></table></figure></li></ul><p><strong>避免全表扫描</strong></p><ul><li><p><strong>使用合适的过滤条件</strong>: 确保WHERE子句中的条件能够有效地利用索引，避免全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> index_colum <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>限制返回的行数</strong>：使用LIMIT字句限制返回的行数，减少数据库的负担。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> name <span class="keyword">WHERE</span> <span class="keyword">condition</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>优化JOIN操作</strong></p><ul><li><p><strong>使用小表驱动大表</strong>：在JOIN操作中，确保小表在前，大表在后。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> small_table ST <span class="keyword">JOIN</span> <span class="keyword">large</span></span><br><span class="line">_table LT <span class="keyword">on</span> ST.id<span class="operator">=</span>LT.id;</span><br></pre></td></tr></table></figure></li></ul><p><strong>避免不必要的复杂查询</strong></p><ul><li><p><strong>简化查询</strong>：尽量简化查询，避免使用不必要的子查询和嵌套查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 避免复杂的嵌套查询</span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span><span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> id <span class="keyword">IN</span>(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> another_table <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br><span class="line"># 使用<span class="keyword">JOIN</span>替代</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">JOIN</span> another_table <span class="keyword">ON</span> table_name.id <span class="operator">=</span> another_table.id <span class="keyword">WHERE</span> <span class="keyword">condition</span>;  </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>优化数据库设计</strong></p><p><strong>规范化与反规范化</strong></p><ul><li><strong>规范化</strong>:确保数据库设计符合第三范式，减少数据几余，</li><li><strong>反规范化</strong>:在某些情况下，为了性能，可以适度反规范化，减少复杂的JOIN操作。</li></ul><p><strong>分区表</strong></p><ul><li><p>表分区:对于非常大的表，可以使用表分区，将数据分成更小的部分，提高查询性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATETABLE orders</span><br><span class="line"><span class="keyword">order</span> id <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">order</span> <span class="type">date</span> <span class="type">DATE</span>,</span><br><span class="line">...</span><br><span class="line">)PARTITIONBYRANGE(<span class="keyword">YEAR</span>(<span class="keyword">order</span> <span class="type">date</span>))(<span class="keyword">PARTITION</span> PO <span class="keyword">VALUES</span> LESS THAN(<span class="number">2020</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> PI <span class="keyword">VALUES</span> LESS THAN(<span class="number">2021</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> P2 <span class="keyword">VALUES</span> LESS THAN(<span class="number">2022</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>优化服务器配置</strong></p><p><strong>调整 MySQL 配置参数</strong></p><ul><li><p>**调整缓冲池大小:**对于InnoDB 存储引擎，调整innodb_buffer_pool_size参数，使其尽量大(但不要超过物理内存的 70-80%)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]innodb_buffer_pool_size = 4G</span><br></pre></td></tr></table></figure></li><li><p>**调整查询缓存:**根据应用需求，调整查询缓存大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]query_cache_size =64M</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用合适的存储引擎：</strong></p><ul><li>选择适当的存储引擎:根据应用需求选择合适的存储引警(如InnoDB、MyISAM)。</li></ul></li><li><p><strong>使用性能分析工具</strong></p><p><strong>使用EXPLAIN分析查询</strong></p><ul><li><p><strong>分析执行计划：</strong>使用EXPLAIN分析查询的执行计划，识别性能瓶颈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT*FROM your table WHERE your condition;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用性能模式（Performance Schema）</strong></p><ul><li><p>收集性能数据:使用 Performance Schema 收集详细的性能数据，分析慢查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span><span class="keyword">FROM</span> performance_schema.events_statements_summary_by_digest <span class="keyword">ORDER</span> <span class="keyword">BY</span> SUM_TIMER_WAIT <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>监控和调优</strong></p><p><strong>持续监控</strong></p><ul><li>**使用监控工具:**使用 MySQLEnterprise Monitor、Percona Monitoring and Management (PMM)、New Relic、Datadog 等工具持续监控数据库性能。</li></ul><p><strong>定期调优</strong></p><ul><li>**定期审查查询:**定期审查和优化慢查询，确保数据库性能持续提升。</li></ul></li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM的主要组成部分"><a href="#JVM的主要组成部分" class="headerlink" title="JVM的主要组成部分"></a>JVM的主要组成部分</h3><ol><li><p>类加载子系统（五步）</p><ul><li>描述:类加载子系统负责将 .class 文件加载到内存中，并进行验证、准备、解析和初始化。</li><li>主要功能:<ul><li>加载:从文件系统或网络中读取 .class 文件。</li><li>验证:确保字节码文件的正确性和安全性。</li><li>准备:为类的静态变量分配内存并设置默认初始值。</li><li>解析:将符号引用转换为直接引用。</li><li>初始化:执行类的静态初始化块和静态变量的初始化。</li></ul></li></ul></li><li><p>运行时数据区（五部分）</p><p>JVM 在运行时将内存划分为多个不同的数据区域，每个区域都有特定的用途。</p><ul><li><strong>方法区(Method Area)</strong>: 存储已加载的类信息、常量、静态变量、即时编译器编译后的代码等。</li><li><strong>堆(Heap)</strong>: 存储所有对象实例和数组，是垃圾收集的主要区域。</li><li><strong>Java 栈(Java Stacks)</strong>: 每个线程都有自己的 Java 栈，存储局部变量表、操作数栈、动态链接、方法返回地址等信息。</li><li><strong>本地方法栈(Native Method stacks)</strong>: 为本地方法调用服务，存储本地方法调用的状态。</li><li><strong>程序计数器(Program Counter Register)</strong>:每个线程都有自己的程序计数器，指示当前线程执行的字节码行号。</li></ul></li><li><p>执行引擎（三部分）</p><ul><li><strong>描述:</strong> 执行引擎负责执行字节码指令,</li><li><strong>主要组件:</strong><ul><li><strong>解释器(Interpreter)</strong>: 逐条解释执行字节码指令，速度较慢。</li><li><strong>即时编译器(Just-In-Time Compiler, JIT)</strong>: 将热点代码(频繁执行的代码)编译为本地机器码，提高执行速度。</li><li>**垃圾收集器(Garbage Colector, GC):**自动管理内存，回收不再使用的对象，防止内存泄漏。</li></ul></li></ul></li><li><p>本地接口</p><ul><li>**描述:**本地接口(通常是Java Native Interface,JNI)允许Java 代码与本地(非Java)代码进行交互。</li><li>主要功能:<ul><li>调用本地方法(通常是用C或C++编写的)。</li><li>允许 Java 代码使用操作系统特性或访问硬件。</li></ul></li></ul></li><li><p>本地方法库</p><ul><li>描述:本地方法库是存储本地方法实现的动态链接库(如.d 文件或.so 文件)。</li><li>主要功能:<ul><li>提供本地方法的具体实现。</li><li>由本地接口调用以执行本地代码。</li></ul></li></ul></li></ol><p><strong>总结：</strong></p><ul><li><strong>类加载子系统</strong>: 负责加载、验证、准备、解析和初始化类。</li><li><strong>运行时数据区:</strong> 包括方法区、堆、Java 栈、本地方法栈和程序计数器。</li><li><strong>执行引擎:</strong> 包括解释器、即时编译器和垃圾收集器。</li><li><strong>本地接口:</strong> 允许 Java 代码与本地代码交互。</li><li><strong>本地方法库:</strong> 存储本地方法实现的动态链接库。</li></ul><h3 id="JVM堆的内部结构是什么？"><a href="#JVM堆的内部结构是什么？" class="headerlink" title="JVM堆的内部结构是什么？"></a>JVM堆的内部结构是什么？</h3><p>​JVM 堆是 Java 虚拟机用于存储对象实例和数组的内存区域。堆内存是 JVM 管理的主要内存区域之一，堆内存的管理和优化对 Java 应用程序的性能至关重要。堆内存的内部结构通常分为几个不同的区域，以便更高效地进行内存分配和垃圾回收。</p><ol><li><p><strong>新生代(Young Generation)</strong></p><p>新生代用于存储新创建的对象。大多数对象在新生代中创建，并且很快就会被垃圾回收。新生代进一步分为三个区域：</p><ul><li>**Eden 区(Eden Space): **大多数新对象首先分配在 Eden 区。当 Eden 区填满时，会触发一次轻量级的垃圾回收(Minor GC)。</li><li>**幸存者区(Survivor Spaces): **新生代中有两个幸存者区，称为S0(Survivor0)和S1(Survivor 1)。在一次 Minor GC之后，仍然存活的对象会从 Eden 区和当前的幸存者区复制到另一个幸存者区（标记复制）。两个幸存者区会在每次 GC 后交替使用。</li></ul></li><li><p><strong>老年代(Old Generation)</strong></p><p>老年代用于存储生命周期较长的对象。那些在新生代经历了多次垃圾（默认15次）回收仍然存活的对象会被移动到老年代。老年代的垃圾回收相对较少，但每次回收的时间较长，称为 Major GC 或 FuI GC。</p></li><li><p><strong>永久代(Permanent Generation)和元空间(Metaspace)</strong></p><ul><li>**永久代(Permanent Generation): **在JDK8之前，永久代用于存储类的元数据、常量池、方法信息等。永久代的大小是固定的，容易导致OutOfMemoryError错误。</li><li>**元空间(Metaspace): **从JDK8开始，永久代被元空间取代。元空间不在JVM堆中，而是使用本地内存。元空间的大小可以动态调整，减少了OutOfMemoryError的风险。</li></ul></li></ol><h3 id="JVM堆和栈的区别"><a href="#JVM堆和栈的区别" class="headerlink" title="JVM堆和栈的区别"></a>JVM堆和栈的区别</h3><p>​在 JVM(Java Virtual Machine)中，堆(Heap)和栈(Stack)是两种不同的内存区域，它们在内存管理和程序执行中扮演着不同的角色。以下是它们的主要区别:</p><ol><li><p><strong>存储内容</strong></p><ul><li><strong>堆：</strong><ul><li>用于存储所有的对象实例和数组。</li><li>所有对象实例和数组都在堆中分配内存。</li></ul></li><li><strong>栈：</strong><ul><li>用于存储局部变量表、操作数栈、动态链接、方法返回地址)。</li><li>每个线程都有自己的栈，栈中的数据与线程–对应。</li></ul></li></ul></li><li><p><strong>内存管理方式</strong></p><ul><li><strong>堆：</strong><ul><li>由垃圾收集器(Garbage Collector)进行自动管理，负责分配和回收对象内存。</li><li>堆内存是全局共享的，所有线程都可以访问堆中的对象。</li></ul></li><li><strong>栈：</strong><ul><li>由编译器自动管理，内存分配和释放按照方法调用的顺序进行(LIFO，后进先出)。</li><li>栈内存是线程私有的，每个线程都有自己的栈，互不干扰。</li></ul></li></ul></li><li><p><strong>生命周期：</strong></p><ul><li>堆：<ul><li>对象在堆中的生命周期由垃圾收集器决定，只要有引用指向对象，对象就会存在对象的生命周期可以跨越多个方法调用，直到没有引用指向它时才会被垃圾收集器回收。</li></ul></li><li>栈：<ul><li>局部变量的生命周期与方法调用的生命周期一致，方法调用结束时，栈帧被销毁，局部变量也随之销毁。</li><li>栈中的数据在方法调用结束后立即释放。</li></ul></li></ul></li><li><p><strong>内存大小:</strong></p><ul><li><strong>堆：</strong><ul><li>适合存储需要较长生命周期的大量对象。</li><li>通常较大，可以通过 JVM 参数(如-Xms和-Xmx)进行配置。</li></ul></li><li><strong>栈：</strong><ul><li>通常较小，每个线程的栈大小可以通过 JVM 参数(如-Xss)进行配置。</li><li>适合存储短生命周期的小数据。</li></ul></li></ul></li><li><p><strong>线程安全</strong></p><ul><li><strong>堆：</strong><ul><li>由于是全局共享的，堆中的对象在多线程环境下需要进行同步控制，以避免线程安全问题。</li></ul></li><li><strong>栈：</strong><ul><li>由于是线程私有的，栈中的数据天然是线程安全的，不需要额外的同步控制。</li></ul></li></ul></li><li><p><strong>访问速度</strong></p><ul><li><strong>堆：</strong><ul><li>访问速度相对较慢，因为需要通过引用进行访问，并且涉及到垃圾收集器的管理。</li></ul></li><li><strong>栈：</strong><ul><li>访问速度相对较快，因为栈中数据直接通过栈帧进行访问，且且栈的内存分配和释放效率高。</li></ul></li></ul></li><li><p>内存溢出</p><ul><li><strong>堆：</strong><ul><li>如果堆内存不足，会抛出OutOfMemoryError(如java.lang.OutOfMemoryError: Java heap space)。</li></ul></li><li><strong>栈：</strong><ul><li>如果栈内存不足，会抛出StackOverflowError(如java.lang.StackOverflowError)。</li></ul></li></ul></li></ol><p>总结</p><ul><li><strong>堆:</strong> 用于存储对象实例和数组，由垃圾收集器管理，生命周期较长，内存较大，线程共享。</li><li><strong>栈:</strong> 用于存储局部变量和方法调用信息，由编译器管理，生命周期短，内存较小，线程私有。</li></ul><h3 id="JVM运行时的数据区域如何理解？"><a href="#JVM运行时的数据区域如何理解？" class="headerlink" title="JVM运行时的数据区域如何理解？"></a>JVM运行时的数据区域如何理解？</h3><p>Java 虚拟机(JM)在运行时将内存划分为若干不同的数据区域，每个区域都有特定的用途。</p><p><strong>JVM 运行时数据区域</strong></p><p>JVM 运行时数据区域主要包括以下几个部分:</p><ol><li>方法区(Method Area)</li><li>堆(Heap)</li><li>Java 栈(Java Stacks)</li><li>本地方法栈(Native Method Stacks)</li><li>程序计数器(Program Counter Register)</li></ol><p><strong>方法区(Method Area)</strong></p><ul><li><strong>描述:</strong> 方法区是所有线程共享的内存区域，用于存储已被 JVM 加载的类信息、常量、即时编译器静态变量、编译后的代码等数据。</li><li><strong>功能:</strong><ul><li>存储类的结构信息(如类的名称、访问修饰符、字段描述、方法描述等)。</li><li>包括字面量和符号引用。存储运行时常量池。</li><li>存储静态变量</li><li>存储编译后的代码。</li></ul></li><li>在 HotSpot JVM 中，方法区的一部分实现为永久代(PermGen)，在 Java8 及以后版本中被称为元空间(Metaspace)。</li></ul><p><strong>堆(Heap)</strong></p><ul><li><strong>描述:</strong> 堆是所有线程共享的内存区域，用于存储所有对象实例和数组。</li><li><strong>功能:</strong><ul><li>动态分配对象内存。</li><li>垃圾收集器主要在堆上工作，回收不再使用的对象内存。</li></ul></li><li>堆通常分为年轻代(Young Generation)和老年代(Old Generation)，年轻代又进一步划分为 Eden 区和两个Survivor区(S0和S1)。</li></ul><p><strong>Java 栈(Java Stacks)</strong></p><ul><li><strong>描述:</strong> 每个线程都有自己的 Java 栈，栈帧(Stack Frame)在栈中按顺序存储。</li><li><strong>功能:</strong><ul><li>存储局部变量表、操作数栈、动态链接、方法返回地址等信息。</li><li>每调用一个方法，就会创建一个新的栈帧，方法执行完毕后栈帧被销毁。</li></ul></li><li>栈帧包括:<ul><li>局部变量表:存储方法的局部变量，个包括参数和方法内部的局部变量</li><li>操作数栈:用于操作数的临时存储。</li><li>动态链接:指向常量池的方法引用，</li><li>方法返回地址:方法调用后的返回地址，</li></ul></li></ul><p><strong>本地方法栈（Native Method Stacks）</strong></p><ul><li><p>**描述:**本地方法栈与 Java 栈类似，但它为本地(Native)方法服务。</p></li><li><p><strong>功能:</strong></p><ul><li>存储本地方法调用的状态。</li><li>一些 JVM 使用 C 栈来支持本地方法调用。</li></ul></li></ul><p><strong>程序计数器(Program Counter Register)</strong></p><ul><li>**描述:**每个线程都有自己的程序计数器，是一个很小的内存区域。</li><li><strong>功能:</strong><ul><li>当前线程所执行的字节码的行号指示器。</li><li>如果当前执行的是本地方法，这个计数器值为空(Undefined)。</li></ul></li></ul><p><strong>总结</strong></p><ul><li><strong>方法区:</strong> 存储类信息、常量、静态变量、即时编译代码。</li><li><strong>堆:</strong> 存储对象实例和数组，是垃圾收集的主要区域。</li><li><strong>Java 栈:</strong> 每个线程有一个，存储方法调用的帧。</li><li><strong>本地方法栈:</strong> 存储本地方法调用的状态。</li><li><strong>程序计数器:</strong> 存储当前线程执行的字节码行号</li></ul><h3 id="为什么要分Eden和Survivor"><a href="#为什么要分Eden和Survivor" class="headerlink" title="为什么要分Eden和Survivor?"></a>为什么要分Eden和Survivor?</h3><p>在JVM 中将新生代(Young Generation)分为 Eden 区和两个Survivor区(S0和S1)的主要原因是为了优化垃圾回收的效率和性能。这种分区策略基于对象的生命周期特点，利用复制算法来减少内存碎片和提高垃圾回收的效率。</p><ol><li><p><strong>优化垃圾回收效率</strong></p><p>新生代的垃圾回收通常使用复制算法(Copying Algorithm)，这种算法的核心思想是将存活的对象从一个区域复制到另一个区域，而不是在原地进行标记和清除。复制算法的步骤如下:</p><ul><li>**对象分配:**新创建的对象首先分配在 Eden 区。。</li><li>**Minor GC 触发:**当 Eden 区填满时，会触发一次 Minor GC</li><li>**对象复制:**在 Minor GC 过程中，存活的对象会从 Eden 区和当前使用的 Survivor 区(例如 S0)复制到另一个 Survivor 区(例如 S1)。复制完成后，Eden 区和当前使用的 Survivor 区将被清空。</li><li>**区域交换:**两个 Survivor 区在每次 GC 后交替使用。</li></ul><p>这种算法的优点是:</p><ul><li>**减少内存碎片: **复制算法通过将存活对象紧密排列在一起，避免了内存碎片的问题。</li><li>**提高回收速度:**复制算法只需要遍历存活对象，而不需要遍历整个内存区域，这使得垃圾回收的速度更快。</li></ul></li><li><p><strong>优化内存分配</strong></p><p>将新生代分为 Eden 区和两个 Survivor 区，能够更好地管理对象的生命周期</p><ul><li><p><strong>大多数对象生命周期短</strong>: 大多数新创建的对象很快就会变得不可达并被回收。Eden 区专门用于存储这些短生命周期对象，提高了内存分配和回收的效率。</p></li><li><p>**幸存者对象管理:**那些在一次或多次 Minor GC后仍然存活的对象会被复制到 Survivor 区。通过在两个Survivor 区之间复制和交换，可以有效管理这些对象的生命周期，直到它们被提升到老年代。</p></li></ul></li><li><p><strong>减少GC停顿时间：</strong></p><p>复制算法和分区策略有助于减少 GC 停顿时间(GC Pause Time)，提高应用程序的响应速度:</p><ul><li><strong>Minor GC 更快速:</strong> 由于新生代通常较小，并且复制算法只处理存活对象，Minor GC 的停顿时间通常较短。</li><li>**老年代 GC减少:**通过有效管理新生代的对象，减少了老年代的对象数量和垃圾回收频率，从而减少了Major GC 或 Ful GC 的次数和停顿时间。</li></ul></li></ol><p><strong>示例</strong>：</p><ul><li>假设有一个新生代大小为1GB，其中Eden区占80%(800MB)，两个Survivor 区各占 10%(100 MB)。对象首先分配在 Eden 区，当 Eden 区填满时，触发 Minor Gc，将存活对象复制到一个 Survivor 区。下次 GC时，再将存活对象从当前 Survivor 区复制到另一个 Survivor 区。</li></ul><p><strong>总结</strong>：</p><ul><li>将新生代分为 Eden 区和两个 Survivor 区的主要目的是优化垃圾回收的效率和性能。通过利用复制算法，可以减少内存碎片，提高垃圾回收速度，并有效管理对象的生命周期，从而减少GC停顿时间，提高应用程序的响应速度。这种分区策略是 JVM 内存管理的重要组成部分，帮助提高Java 应用程序的性能和稳定性。</li></ul><h3 id="什么是JVM方法区？"><a href="#什么是JVM方法区？" class="headerlink" title="什么是JVM方法区？"></a>什么是JVM方法区？</h3><p>JVM 方法区(Method Area)是 JVM 运行时数据区的一部分，用于存储与类和方法相关的元数据。它是所有线程共享的内存区域，包含了 JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等。方法区的内容在JVM 启动时创建，并在 JVM 运行期间动态扩展或收缩。</p><p><strong>方法区的主要内容：</strong></p><ol><li>**类信息:**包括类名、父类名、访问修饰符、接口列表等的元数据。</li><li>**运行时常量池:**存储编译期生成的各种字面量和符号引用，这些引用在类加载后被解析为直接引用。</li><li>**静态变量:**类的静态字段，存储类级别的变量。</li><li>**即时编译器编译后的代码:**即时编译器(JIT)将热点代码编译为本地机器码，存储在方法区中。</li><li>**字段和方法信息:**包括字段描述、方法描述、方法字节码、方法的访问修饰符等。</li></ol><p><strong>方法区在不同 JVM 实现中的差异：</strong></p><p>在不同的 JVM 实现中，方法区的具体实现和管理方式可能有所不同。</p><p>以下是一些常见的 JVM 实现方式:</p><ul><li>HotSpot JVM(Java7及之前):方法区实现为<strong>永久代</strong>(Permanent Generation，<strong>PermGen</strong>)。永久代的内存空间固定，容易**导致内存溢出(OutOfMemoryError)**。</li><li>HotSpot JVM (Java8及之后):方法区实现为<strong>元空间</strong>(Metaspace)。元空间使用<strong>本地内存(Native Memory)<strong>，默认情况下可以根据需要动态扩展，</strong>减少了内存溢出的风险</strong>。</li></ul><p><strong>方法区的内存管理：</strong></p><p>方法区的内存管理主要包括以下几个方面:</p><ol><li><strong>类加载:</strong> 当一个类被加载时，其相关信息会被存储在<strong>方法区中。</strong></li><li><strong>类卸载</strong>：当一个类<strong>不再被使用且没有任何引用时</strong>，<strong>垃圾收集器</strong>可以回收方法区中的类元数据。</li><li><strong>垃圾收集:</strong> 方法区的垃圾收集主要针对废弃的<strong>类元数据</strong>和常量池中的<strong>无用常量</strong>。相比堆内存的垃圾收集，<strong>方法区的垃圾收集频率较低</strong>。</li></ol><p><strong>方法区相关的异常</strong>：</p><p>由于方法区存储了大量的类元数据和常量，可能会出现以下异常:</p><ul><li>OutOfMemoryError: PermGen space: 在Java7及之前的版本中，永久代空间不足时会抛出此异常。</li><li>OutOfMemoryError: Metaspace:在 Java8 及之后的版本中，元空间内存不足时会抛出此异常。</li></ul><p><strong>总结：</strong></p><ul><li>方法区是 JVM 运行时数据区的一部分，用于<strong>存储类和方法的元数据</strong>。</li><li>方法区存储类信息、运行时常量池、静态变量、即时编译器编译后的代码以及字段和方法信息。</li><li>在不同的 JVM 实现中，方法区的管理方式可能不同，例如 HotSpot JVM 在 Java8 之前使用永久代(PermGen)，在Java8之后使用元空间(Metaspace)。</li><li>方法区的内存管理包括<strong>类加载、类卸载和垃圾收集</strong>。</li><li>常见的异常包括<strong>OutOfMemoryError</strong>: PermGen space和<strong>OutOfMemoryError</strong>: Metaspace.</li></ul><h3 id="Java双亲委派机制是什么"><a href="#Java双亲委派机制是什么" class="headerlink" title="Java双亲委派机制是什么"></a>Java双亲委派机制是什么</h3><p>JVM 的双亲委派机制(Parent Delegation Model)是一种<strong>类加载机制</strong>，用于<strong>确保 Java 类加载过程的安全性和一致性</strong>。</p><p>它的主要思想是:每个类加载器在加载类时，首先将<strong>请求委派给父类加载器</strong>，<strong>只有当父类加载器无法完成加载时，才由当前类加载器尝试加载类</strong>。</p><p><strong>双亲委派机制的工作流程：</strong></p><ol><li><strong>启动类加载器</strong>(Bootstrap ClassLoader): 负责加载Java 核心库(位于JAVA HOME&#x2F;lib目录下的类库，如rt.jar)。</li><li><strong>扩展类加载器</strong>(Extension ClassLoader): 负责加载Java 扩展库(位于JAVA HOME&#x2F;ib&#x2F;ext目录下的类库)。</li><li><strong>应用程序类加载器</strong>(Application ClassLoader): 负责加载应用程序类路径(classpath)上的类。</li></ol><p>启动-&gt;扩展-&gt;应用程序类</p><p><strong>加载类的具体步骤如下:</strong></p><ol><li>当前类加载器收到类加载请求:当一个类加载器收到加载类的请求时，它不会立即尝试加载该类。</li><li>将请求委派给父类加载器:当前类加载器首先将加载请求委派给父类加载器。</li><li>父类加载器处理请求:<ul><li>如果父类加载器存在，则父类加载器会继续将请求向上委派，直到到达启动类加载器。</li><li>启动类加载器尝试加载类，如果成功，则返回类的引用。</li></ul></li><li>父类加载器无法加载类:如果启动类加载器无法加载该类，加载失败返回到子类加载器。</li><li>当前类加载器尝试加载类:如果父类加载器无法加载该类，则由当前类加载器尝试加载。</li></ol><p>通过这种机制，可以确保核心类库不会被篡改，避免了类的重复加载和类的冲突问题。</p><p>（委派是向上委派的，执行是从上到下的。）</p><p><strong>双亲委派机制的优点：</strong></p><ol><li><p>安全性:通过将类加载请求逐级向上委派，可以避免核心类库被篡改或替换，确保系统安全。</p></li><li><p>避免类的重复加载:确保每个类只被加载一次，避免类的重复加载和类的冲突问题。</p></li><li><p>提高加载效率:通过委派机制，可以利用已经加载的类，提高类加载的效率。</p></li></ol><p><strong>双亲委派机制的例外（自定义类加载器和一些框架中）：</strong></p><p>尽管双亲委派机制是 Java 类加载的标准机制，但在某些情况下，这一机制会被打破。例如:</p><ul><li>自定义类加载器:某些自定义类加载器可能会覆盖默认的双亲委派机制，直接加载类。</li><li>OSGi 框架:OSGi 框架中，类加载机制更加复杂，可能会打破双亲委派机制。</li><li>SPl(Service Provider Interface):在某些服务提供者接口的实现中，可能需要打破双亲委派机制来加载服务实现类。</li></ul><p><strong>总结：</strong></p><ul><li>双亲委派机制是 Java 类加载过程中的一个重要机制，通过将类加载请求逐级向上委派，确保了类加载的安全性和一致性。</li></ul><h3 id="Java双亲委派机制的作用"><a href="#Java双亲委派机制的作用" class="headerlink" title="Java双亲委派机制的作用"></a>Java双亲委派机制的作用</h3><ol><li><p>保证 Java 核心库的安全性<br>通过双亲委派机制，Java 核心库(如java.lang.Object等)由启动类加载器(Bootstrap ClassLoader)加载。由于启动类加载器是在 JVM 启动时由本地代码实现的，并且它加载的类路径是固定的系统核心库路径，因此可以确呆这些核心类不会被篡改或替换。这样，系统的安全性和稳定性得到了保障。</p></li><li><p>避免类的重复加载</p><p>双亲委派机制确保了每个类只会被加载一次。如果一个类已经被父类加载器加载过，那么子类加载器就不会再重复加载这个类。这样可以避免类的重复加载，提高类加载的效率，并减少内存消耗。</p></li><li><p>保证类加载的一致性</p><p>通过双亲委派机制，可以确保同一个类在整个 JVM 中只有一个定义。这样可以避免类的冲突和不一致问题。例如，如果应用程序和第三方库中都定义了一个相同的类名，通过双亲委派机制可以确保最终加载的是位于更高层次的类加载器中的类，从而避免冲突。</p></li><li><p>提高类加载的效率</p><p>双亲委派机制通过将类加载请求逐级向上委派，可以利用已经加载的类，提高类加载的效率。父类加载器在加载类时，如果该类<strong>已经被加载过，那么直接返回该类的引用</strong>，从而减少了重复加载的开销。</p></li><li><p>支持动态扩展</p><p>双亲委派机制允许在不同的类加载器中加载不同的类，从而支持动态扩展。例如，应用程序类加载器(Application ClassLoader)可以加载应用程序特定的类，而扩展类加载器(Extension ClassLoader)可以加载扩展库中的类，这样可以方便地进行<strong>动态扩展</strong>和模块化开发。</p></li></ol><p><strong>总结：</strong></p><p>安全性-&gt;避免重复加载-&gt;避免冲突保持一致性-&gt;提高加载效率-&gt;支持动态扩展。</p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="什么是Spring-MVC"><a href="#什么是Spring-MVC" class="headerlink" title="什么是Spring MVC"></a>什么是Spring MVC</h3><p>Spring MVC是 Spring 框架中的一个模块，用于构建基于 Web 的应用程序。它遵循 Model-View-Controler(MVC)设计模式，将业务逻辑、用户界面和数据分离，以促进代码的可维护性和可扩展性。</p><ol><li>模型(Model)<br>模型代表应用程序的数据和业务逻辑。它通常包含数据对象(如POJO)和服务层(如 Spring 服务)来处理业务逻辑。模型负责从数据库或其他数据源获取数据，并将数据传递给视图以显示给用户。</li><li>视图(View)<br>视图负责展示数据，通常是 HTML 页面或其他类型的用户界面。Spring MVC支持多种视图技术，包括 JSP、Thymeleaf、FreeMarker 等。视图从模型获取数据并将其呈现给用户。</li><li>控制器(Controller)<br>控制器处理用户请求并决定将数据传递给哪个视图。它接收用户输入，调用模型进行处理，并选择合适的视图来显示结果。控制器通常使用@Controller 注解来标识，并使用 @RequestMapping 注解来映射 URL 请求。</li></ol><p><strong>Spring MVC 的工作流程</strong></p><ol><li><strong>用户请求:</strong> 用户通过浏览器发送 HTTP 请求到服务器。</li><li><strong>前端控制器(DispatcherServlet):</strong> Spring MVC的前端控制器 DispatcherServlet 拦截所有请求并进行分发。</li><li><strong>处理器映射(Handler Mapping):</strong> 根据请求 URL，DispatcherServlet 查找相应的控制器。</li><li><strong>控制器处理:</strong> 控制器处理请求，调用服务层或数据访问层以获取数据，并将数据封装到型中。</li><li><strong>视图解析器(View Resolver):</strong> 控制器返回视图名称， DispatcherServlet 使用视图解析器将视图名称解析为实际的视图对象。</li><li><strong>视图渲染:</strong> 视图对象负责将模型数据渲染为用户界面，通常是 HTML页面。</li><li><strong>响应返回:</strong> 渲染后的视图返回给 DispatcherServlet，DispatcherServlet 将最终的响应发送回用户浏览器。</li></ol><p><strong>核心组件</strong></p><ol><li>**DispatcherServlet:**前端控制器，负责接收并分发请求</li><li>**Controller:**处理用户请求，包含业务逻辑。</li><li><strong>ModelAndView</strong>: 包含模型数据和视图名称的对象。</li><li>**View Resolver:**将视图名称解析为实际的视图对象。</li><li>**Handler Mapping:**根据请求 URL 查找相应的控制器。</li></ol><h3 id="SpringMVC的原理及执行流程"><a href="#SpringMVC的原理及执行流程" class="headerlink" title="SpringMVC的原理及执行流程"></a>SpringMVC的原理及执行流程</h3><p><strong>组件</strong><br>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，它大量使用了Spring框架中提供的设计模式。Spring MVC框架的核心组件包括:</p><ol><li>DispatcherServet:前端控制器，负责接收请求并根据映射关系调用相应的控制器</li><li>HandlerMapping:负责根据请求的URL到HandlerMapping中找到映射的处理器(Controller)。</li><li>HandlerAdapter:负责根据处理器，生成处理器适配器，通过适配器调用实际的处理器。</li><li>Controller:处理器，执行相应的业务逻辑操作，并返回ModelAndView对象。</li><li>ModelAndView:包含了视图逻辑名和模型数据的对象，是连接控制器和视图的桥梁。</li><li>ViewResolver:负责解析视图名到具体视图实现类的映射，根据视图名称找到对应的视图实现类。</li><li>View:视图，负责渲染数据并展示给用户。</li></ol><p><strong>执行流程</strong><br>Spring MVC 的执行流程大致可以分为以下几个步骤</p><ol><li><strong>发送请求到DispatcherServlet:</strong> 用户向服务器发送请求，请求被DispatcherServlet捕获。</li><li><strong>查找Handler:</strong> DispatcherServlet根据请求URL到HandlerMapping中查找映射的处理器(Controller)。</li><li><strong>调用HandlerAdapter:</strong> DispatcherServlet根据处理器，到HandlerAdapter中找到对应的处理器适配器。</li><li><strong>执行Controller:</strong> 处理器适配器调用实际的处理器(Controler)执行业务逻辑操作，并返回ModelAndView对象。</li><li><strong>处理ModelAndView:</strong> DispatcherServlet根据ModelAndView中的视图名称，到ViewResolver中找到对应的视图实现类。</li><li><strong>渲染视图:</strong> 视图实现类根据ModelAndView中的数据和视图模板渲染视图。</li><li><strong>返回响应到客户端:</strong> DispatcherServet将渲染后的视图返回给客户端。</li></ol><h3 id="什么是DispatcherServlet"><a href="#什么是DispatcherServlet" class="headerlink" title="什么是DispatcherServlet"></a>什么是DispatcherServlet</h3><p>DispatcherServlet 充当前端控制器(Front Controller)，负责接收所有进入的 HTTP 请求并将它们分派给适当的处理器进行处理。 DispatcherServlet 是实现 MVC 模式的关键部分，负责协调整个请求处理流程。</p><p><strong>主要职责</strong></p><ol><li>**请求接收和分派:**拦截所有进入的 HTTP 请求并将它们分派给适当的控制器(Controller)</li><li>**处理器映射:**根据请求 URL，查找相应的处理器(通常是控制器方法)。</li><li>**视图解析:**将控制器返回的视图名称解析为实际的视图对象。</li><li>**请求处理:**调用处理器进行请求处理，并将处理结果封装到模型中。</li><li>**视图渲染:**将模型数据传递给视图对象进行渲染，并生成最终的响应。</li></ol><p><strong>工作流程</strong></p><p>以下是 DispatcherServlet 的详细工作流程:</p><ol><li><strong>初始化:</strong><ul><li>在应用程序启动时， DispatcherServlet被初始化。它加载 Spring 应用程序上下文，配置处理器映射、视图解析器等组件。</li></ul></li><li><strong>接收请求:</strong><ul><li>用户通过浏览器发送 HTTP 请求到服务器。</li><li>DispatcherServlet 拦截所有符合配置的 URL 模式的请求。</li></ul></li><li><strong>处理器映射:</strong><ul><li>DispatcherServlet 使用处理器映射器(Handler Mapping)根据请求 URL 查找相应的处理器(Controller)。</li></ul></li><li><strong>调用处理器:</strong><ul><li>找到处理器后， Dispatcherservlet 调用处理器的方法进行请求处理。</li><li>处理器执行业务逻辑，通常会调用服务层或数据访问层获取数据，并将数据封装到型中。</li></ul></li><li><strong>视图解析：</strong><ul><li>处理器处理完请求后，返回一个包含视图名称和模型数据的ModelAndview 对象。</li><li>DispatcherServlet 使用视图解析器(View Resolver)将视图名称解析为实际的视图对象。</li></ul></li><li><strong>视图渲染:</strong><ul><li>视图对象负责将模型数据渲染为用户界面，通常是 HTML 页面。</li></ul></li><li><strong>响应返回:</strong><ul><li>渲染后的视图返回给 DispatcherServlet，Dispatcherservlet 将最终的响应发送回用户浏览器。</li></ul></li></ol><h3 id="什么是Handler-Mapping"><a href="#什么是Handler-Mapping" class="headerlink" title="什么是Handler Mapping"></a>什么是Handler Mapping</h3><p>Handler Mapping 负责将 HTTP 请求映射到相应的处理器(通常是控制器方法)。当DispatcherServlet接收到一个请求时，它会使用 Handler Mapping 来确定哪个处理器应该处理这个请求。</p><p><strong>主要职责</strong></p><ol><li>**请求映射:**根据请求的 URL、HTTP 方法、请求参数等信息，查找并确定相应的处理器。</li><li>**处理器返回:**返回一个包含处理器对象和处理器拦截器链的 HandlerExecutionchain 对象。</li></ol><p><strong>工作流程</strong></p><ol><li><strong>请求到达Dispatcherservlet</strong>:当一个HTTP 请求到达 DispatcherServlet 时，它会首先交给 Handler Mapping 进行处理。</li><li>**查找处理器:**Handler Mapping根据请求的 URL、HTTP 方法等信息查找匹配的处理器。</li><li><strong>返回处理器:</strong> Handler Mapping 返回一个 <strong>HandlerExecutionchain</strong> 对象，其中包含<strong>处理器</strong>(通常是控制器方法)和<strong>处理器拦截器链</strong>。</li><li><strong>处理请求:</strong> DispatcherServlet 使用找到的处理器来处理请求，并生成响应。</li></ol><p><strong>常见的 Handler Mapping 实现</strong></p><ol><li><strong>BeanNameUrlHandlerMapping：</strong><ul><li>通过 bean 的名称来映射处理器。</li><li>例如，bean 名称为&#x2F;hello 的处理器会处理 &#x2F;hello 请求。</li></ul></li><li><strong>SimpleUrlHandlerMapping：</strong><ul><li>通过显式配置的 URL 路径来映射处理器。</li><li>可以在 Spring 配置文件中指定 URL 到处理器的映射关系。</li></ul></li><li><strong>DefaultAnnotationHandlerMapping(过时):</strong><ul><li>通过注解(如 @RequestMapping )来映射处理器。</li><li>在较新的 Spring 版本中被 RequestMappingHandlerMapping 取代。</li></ul></li><li><strong>RequestMappingHandlerMapping</strong><ul><li>这是最常用的 Handler Mapping 实现。</li><li>通过注解(如 <strong>@RequestMapping、@GetMapping、@PostMapping</strong> 等)来映射处理器支持复杂的请求映射规则，包括路径变量、请求参数、请求头等。</li></ul></li></ol><p><strong>总结</strong><br>Handler Mapping 负责将 HTTP 请求映射到相应的处理器。通过使用不同的 Handler Mapping 实现，开发者可以灵活地配置请求映射规则，以满足各种应用需求。最常用的 Handler Mapping 实现是 RequestMappingHandlerMapping，它通过注解提供了强大的请求映射功能。</p><h3 id="什么是Handler-Adapter"><a href="#什么是Handler-Adapter" class="headerlink" title="什么是Handler Adapter"></a>什么是Handler Adapter</h3><p>Handler Adapter 负责将<strong>处理器(Handler)适配为具体的处理方法</strong>。 Handler Adapter 的主要作用是<strong>根据处理器的类型和具体实现，执行相应的处理逻辑</strong>。Handler Adapter是 DispatcherServlet 和具体处理器之间的桥梁。</p><p><strong>主要职责</strong></p><ol><li>处理器执行:调用处理器的方法来处理请求。</li><li>返回模型和视图:处理完请求后，返回一个ModelAndView 对象，包含视图名称和模型数据。</li></ol><p><strong>工作流程</strong></p><ol><li><strong>请求到达 DispatcherServlet：</strong>当一个 HTTP 请求到达 DispatcherServlet 时，它会先通过HandlerMapping 找到对应的处理器。</li><li><strong>选择 Handler Adapter:</strong> DispatcherServlet根据处理器的类型选择合适的 Handler Adapter 。</li><li><strong>执行处理器:</strong> Handler Adapter 调用处理器的方法来处理请求。</li><li>**返回结果:**处理完请求后，Handler Adapter返回一个 ModelAndView 对象，DispatcherServlet。<br>再根据这个对象生成最终的响应。</li></ol><p><strong>常见的 Handler Adapter 实现</strong></p><ol><li>HttpRequestHandlerAdapter<ul><li>用于处理实现 HttpRequestHandler 接口的处理器。</li><li>例如实现了 HttpRequestHandler接口的处理器。</li></ul></li><li>SimpleControllerHandlerAdapter<ul><li>用于处理实现Controller 接口的处理器。</li><li>例如实现了 Controller接口的处理器。</li></ul></li><li>RequestMappingHandlerAdapter<ul><li>最常用的 Handler Adapter 实现。</li><li>用于处理使用 @RequestMapping 注解的控制器方法。</li><li>支持复杂的请求映射规则和数据绑定。</li></ul></li></ol><p><strong>总结</strong><br><code>Handler Adapter</code> 负责将处理器适配为具体的处理方法。通过使用不同的 <code>Handler Adapter</code> 实现，<code>SpringMVC</code>可以灵活地支持多种类型的处理器。最常用的 <code>Handler Adapter</code> 实现是<code> RequestMappingHandlerAdapter</code>它支持通过注解定义的控制器方法，并提供了强大的请求处理功能。</p><h3 id="什么是View-Resolver"><a href="#什么是View-Resolver" class="headerlink" title="什么是View Resolver"></a>什么是View Resolver</h3><p><code>View Resolver</code> 负责将逻辑视图名称解析为具体的视图对象(如<code>JSP、Thymeleaf</code> 模板等)。<code>ViewResolver</code>的主要作用是根据控制器返回的视图名称，找到相应的视图资源，并将其渲染成最终的 <code>HTML</code> 响应。</p><p><strong>主要职责</strong></p><ol><li><strong>视图名称解析:</strong> 将控制器返回的逻辑视图名称解析为具体的视图对象。</li><li><strong>视图对象返回:</strong> 返回一个 view 对象，该对象可以用来染模型数据</li></ol><p><strong>工作流程</strong></p><ol><li>**控制器处理请求: **当一个HTTP 请求到达 DispatcherServlet 时，它会通过 Handler Adapter 调用控制器的方法来处理请求。</li><li>**返回视图名称: **控制器方法处理完请求后，会返回一个包含视图名称和模型数据的 ModelAndView 对象。</li><li><strong>视图名称解析:</strong> DispatcherServlet使用 View Resolver 将逻辑视图名称解析为具体的视图对象。</li><li><strong>渲染视图:</strong> view 对象使用模型数据来渲染最终的 HTML 响应。</li></ol><h3 id="Spring-MVC-中的-Controller注解有什么作用"><a href="#Spring-MVC-中的-Controller注解有什么作用" class="headerlink" title="Spring MVC 中的@Controller注解有什么作用"></a>Spring MVC 中的@Controller注解有什么作用</h3><p><code>@controller</code> 注解用于标记一个类作为控制器组件。控制器是处理 HTTP 请求的核心组件，它负责接收请求处理业务逻辑并返回视图或数据响应。</p><p><strong>主要作用</strong></p><ol><li>标识控制器类: @contro1ler 注解告诉 Spring 该类是一个控制器，应该由 Spring 容器管理。</li><li>处理请求:控制器类中的方法通过映射注解(如 @RequestMapping、@GetMapping、@PostMapping等)处理 HTTP 请求。</li></ol><p><strong>相关注解</strong></p><p>在Spring MVC中，除了 @controller，还有一些常用的注解用于处理请求</p><ol><li>@RequestMapping<ul><li>用于定义请求 URL 和 HTTP 方法的映射。</li><li>可以应用于类级别和方法级别。</li></ul></li><li>@PutMapping@DeleteMapping@GetMapping、@PostMapping<ul><li>分别用于处理GET、POST、PUTDELETE 请求。</li><li>是 @RequestMapping 的快捷方式。</li></ul></li><li>@RequestParam<ul><li>用于绑定请求参数到方法参数。</li><li>可以指定参数名称、是否必需以及默认值。</li></ul></li><li>@PathVariable<ul><li>用于绑定 URL 路径中的变量到方法参数。</li></ul></li><li>@ModelAttribute<ul><li>用于将请求参数绑定到模型对象，并将模型对象添加到模型中。</li></ul></li><li>@ResponseBody<ul><li>用于将方法的返回值直接作为 HTTP 响应体。</li><li>常用于返回 JSON 或 XML 数据。</li></ul></li></ol><p><strong>总结</strong></p><p>@controller 注解在 Spring MVC 中用于标记一个类为控制器组件，控制器负责处理 HTTP 请求并返回视图或数据响应。通过结合使用各种映射注解(如 @RequestMapping、@GetMapping 等)和参数绑定注解(如 @RequestParam@PathVariable 等)，可以灵活地处理不同类型的请求和参数。</p><h3 id="Spring-MVC-中的-RequestMapping-注解有什么作用"><a href="#Spring-MVC-中的-RequestMapping-注解有什么作用" class="headerlink" title="Spring MVC 中的 @RequestMapping 注解有什么作用?"></a>Spring MVC 中的 @RequestMapping 注解有什么作用?</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池数量到底如何配置？</title>
      <link href="/2024/08/06/2024-08-06-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%95%B0%E9%87%8F%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%EF%BC%9F/"/>
      <url>/2024/08/06/2024-08-06-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%95%B0%E9%87%8F%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池数量到底如何配置？"><a href="#线程池数量到底如何配置？" class="headerlink" title="线程池数量到底如何配置？"></a>线程池数量到底如何配置？</h1><p>可能很多人都看到过一个线程数设置的理论:</p><ol><li>CPU 密集型的程序-核心数 +1</li><li>1&#x2F;0 密集型的程序-核心数*2</li></ol><p>不会吧，不会吧，真的有人按照这个理论规划线程数?</p><h2 id="线程数和CPU利用率的小测试"><a href="#线程数和CPU利用率的小测试" class="headerlink" title="线程数和CPU利用率的小测试"></a>线程数和CPU利用率的小测试</h2><p>抛开一些操作系统，计算机原理不谈，说一个基本的理论(不用纠结是否严谨，只为好理解)：</p><p>一个CPU核心，单位时间内只能执行一个线程的指令那么理论上，我一个线程只需要不停的执行指令，就可以跑满一个核心的利用率。</p><p>来写个死循环空跑的例子验证一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPUUtilizationTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//死循环，什么都不做</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试CPU：6核心12线程</strong></p><p>现在的CPU利用率：</p><p><img src="https://s2.loli.net/2024/08/06/sLo7DeAqTgkKSr1.png" alt="image-20240806173358143.png"></p><p>从图上可以看到，3号核心利用率已经被跑满了</p><p>基于上面的理论，多开几个线程试试呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPUUtilizationTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(newRunnable()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;).start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>此时再看CPU利用率，1&#x2F;2&#x2F;5&#x2F;7&#x2F;9&#x2F;11 几个核心的利用率已经被跑满。</p><p><img src="https://s2.loli.net/2024/08/06/9IkQRx5giadfSte.png" alt="image-20240806173823732.png"></p><p>那如果开12个线程呢，是不是会把所有核心的利用率都跑满?答案一定是会的:</p><p>如果此时我把上面例子的线程数继续增加到24个线程，会出现什么结果呢?</p><p><img src="https://s2.loli.net/2024/08/06/BJuykt4adLPg7M5.png" alt="image-20240806174134976.png"></p><p>从上图可以看到，CPU利用率和上一步一样，还是所有核心100%，不过此时负载已经从11.x增加到了22.x（load average解释参考<a href="https://scoutapm.com/blog/understanding-load-averages%EF%BC%89%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%AD%A4%E6%97%B6CPU%E6%9B%B4%E7%B9%81%E5%BF%99%EF%BC%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%97%A0%E6%B3%95%E5%8F%8A%E6%97%B6%E6%89%A7%E8%A1%8C%E3%80%82">https://scoutapm.com/blog/understanding-load-averages），说明此时CPU更繁忙，线程的任务无法及时执行。</a></p><p>现代CPU基本都是多核心的，比如我这里测试用的AMD 3600，6核心12线程（超线程），我们可以简单的认为它就是12核心CPU。那么我这个CPU就可以同时做12件事，互不打扰。</p><p>如果要执行的线程大于核心数，那么就需要通过操作系统的调度了。操作系统给每个线程分配CPU时间片资源，然后不停的切换，从而实现“并行”执行的效果。</p><p>但是这样真的更快吗？从上面的例子可以看出，<strong>一个线程</strong>就可以把<strong>一个核心</strong>的利用率跑满。如果每个线程都很“霸道”，不停的执行指令，不给CPU空闲的时间，并且同时执行的线程数大于CPU的核心数，就会导致操作系统<strong>更频繁的执行切换线程执行</strong>，以确保每个线程都可以得到执行。</p><p>不过切换是有代价的，<strong>每次切换会伴随着寄存器数据更新，内存页表更新等操作</strong>。虽然一次切换的代价和I&#x2F;O操作比起来微不足道，但如果线程过多，线程切换的过于频繁，甚至在单位时间内切换的耗时已经大于程序执行的时间，就会导致CPU资源过多的浪费在上下文切换上，而不是在执行程序，得不偿失。</p><p>上面死循环空跑的例子，有点过于极端了，正常情况下不太可能有这种程序。</p><p>大多程序在运行时都会有一些 I&#x2F;O操作，可能是读写文件，网络收发报文等，这些 I&#x2F;O 操作在进行时时需要等待反馈的。比如网络读写时，需要等待报文发送或者接收到，在这个等待过程中，线程是等待状态，CPU没有工作。此时操作系统就会调度CPU去执行其他线程的指令，这样就完美利用了CPU这段空闲期，提高了CPU的利用率。</p><p>上面的例子中，程序不停的循环什么都不做，CPU要不停的执行指令，几乎没有啥空闲的时间。如果插入一段I&#x2F;O操作呢，I&#x2F;O 操作期间 CPU是空闲状态，CPU的利用率会怎么样呢？先看看单线程下的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPUUtilizationTest</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span><span class="number">0</span>; n &lt;<span class="number">1</span>; n++)&#123;</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Thread</span>(newRunnable()&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"> <span class="comment">//每次空循环 1亿 次后，sleep 50ms，模拟 I/O等待、切换</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt;<span class="number">100_000_000l</span>; i++)&#123; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> Thread.sleep(<span class="number">50</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;).start();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/06/2w67tqmhY9yc3e8.png" alt="image-20240806174442221.png"></p><p>唯一有利用率的9号核心，利用率也才50%，和前面没有sleep的100%相比，已经低了一半了。现在把线程数调整到12个看看：</p><p><img src="https://s2.loli.net/2024/08/06/ws8vjbpZtcMQm3D.png" alt="image-20240806174542836.png"></p><p>单个核心的利用率60左右，和刚才的单线程结果差距不大，还没有把CPU利用率跑满，现在将线程数增加到18：</p><p><img src="https://s2.loli.net/2024/08/06/oKWOwCY3QHD5ImL.png" alt="image-20240806174701639.png"></p><p>此时单核心利用率，已经接近100%了。由此可见，当线程中有 I&#x2F;O 等操作不占用CPU资源时，操作系统可以调度CPU可以同时执行更多的线程。</p><p>现在将I&#x2F;O事件的频率调高看看呢，把循环次数减到一半，50_000_000，同样是18个线程：此时每个核心的利用率，大概只有70%左右了。</p><h2 id="线程数和CPU利用率的小总结"><a href="#线程数和CPU利用率的小总结" class="headerlink" title="线程数和CPU利用率的小总结"></a>线程数和CPU利用率的小总结</h2><p>上面的例子，只是辅助，为了更好的理解线程数&#x2F;程序行为&#x2F;CPU状态的关系，来简单总结一下：</p><ol><li>一个极端的线程（不停执行“计算”型操作时），就可以把单个核心的利用率跑满，多核心CPU最多只能同时执行等于核心数的“极端”线程数</li><li>如果每个线程都这么“极端”，且同时执行的线程数超过核心数，会导致不必要的切换，造成负载过高，只会让执行更慢</li><li>I&#x2F;O 等暂停类操作时，CPU处于空闲状态，操作系统调度CPU执行其他线程，可以提高CPU利用率，同时执行更多的线程</li><li>I&#x2F;O 事件的频率频率越高，或者等待&#x2F;暂停时间越长，CPU的空闲时间也就更长，利用率越低，操作系统可以调度CPU执行更多的线程</li></ol><h2 id="线程数规划的公式"><a href="#线程数规划的公式" class="headerlink" title="线程数规划的公式"></a>线程数规划的公式</h2><p>前面的铺垫，都是为了帮助理解，现在来看看书本上的定义。《Java 并发编程实战》介绍了一个线程数计算的公式：</p><p><img src="https://s2.loli.net/2024/08/06/4PQCYBlo3ifDqE7.png" alt="image-20240806174901883.png"></p><p>如果希望程序跑到CPU的目标利用率，需要的线程数公式为：</p><p><img src="https://s2.loli.net/2024/08/06/GdKOFxktpgzoAbw.png" alt="image-20240806174957005.png"></p><p>公式很清晰，现在来带入上面的例子试试看：</p><p>如果我期望目标利用率为90%（多核90），那么需要的线程数为：</p><p>核心数12 * 利用率0.9 * (1 + 50(sleep时间)&#x2F;50(循环50_000_000耗时)) ≈ 22</p><p>现在把线程数调到22，看看结果：</p><p><img src="https://s2.loli.net/2024/08/06/xCRQJ57aUgdtFoy.png" alt="image-20240806175037385.png"></p><p>现在CPU利用率大概80+，和预期比较接近了，由于线程数过多，还有些上下文切换的开销，再加上测试用例不够严谨，所以实际利用率低一些也正常。</p><p>把公式变个形，还可以通过线程数来计算CPU利用率：</p><p><img src="https://s2.loli.net/2024/08/06/OdADxL96P3E2BQv.png" alt="image-20240806175054548.png"></p><p>线程数22 &#x2F; (核心数12 * (1 + 50(sleep时间)&#x2F;50(循环50_000_000耗时))) ≈ 0.9</p><p>虽然公式很好，但在真实的程序中，<strong>一般很难获得准确的等待时间和计算时间，因为程序很复杂，不只是“计算”</strong>。一段代码中会有很多的内存读写，计算，I&#x2F;O 等复合操作，精确的获取这两个指标很难，所以光靠公式计算线程数过于理想化。</p><h2 id="真实程序中的线程数"><a href="#真实程序中的线程数" class="headerlink" title="真实程序中的线程数"></a>真实程序中的线程数</h2><p>那么在实际的程序中，或者说一些Java的业务系统中，线程数（线程池大小）规划多少合适呢？</p><p><strong>先说结论：没有固定答案，先设定预期，比如我期望的CPU利用率在多少，负载在多少，GC频率多少之类的指标后，再通过测试不断的调整到一个合理的线程数</strong></p><p>比如一个普通的，SpringBoot 为基础的业务系统，默认Tomcat容器+HikariCP连接池+G1回收器，如果此时项目中也需要一个业务场景的多线程（或者线程池）来异步&#x2F;并行执行业务流程。</p><p>此时我按照上面的公式来规划线程数的话，误差一定会很大。因为此时这台主机上，已经有很多运行中的线程了，Tomcat有自己的线程池，HikariCP也有自己的后台线程，JVM也有一些编译的线程，连G1都有自己的后台线程。这些线程也是运行在当前进程、当前主机上的，也会占用CPU的资源。</p><p><strong>所以受环境干扰下，单靠公式很难准确的规划线程数，一定要通过测试来验证。</strong></p><p><strong>流程一般是这样：</strong></p><ol><li>分析当前主机上，有没有其他进程干扰</li><li>分析当前JVM进程上，有没有其他运行中或可能运行的线程</li><li>设定目标</li><li>目标CPU利用率 - 我最高能容忍我的CPU飙到多少？</li><li>目标GC频率&#x2F;暂停时间 - 多线程执行后，GC频率会增高，最大能容忍到什么频率，每次暂停时间多少？</li><li>执行效率 - 比如批处理时，我单位时间内要开多少线程才能及时处理完毕</li><li>……</li><li>梳理链路关键点，是否有卡脖子的点，因为如果线程数过多，链路上某些节点资源有限可能会导致大量的线程在等待资源（比如三方接口限流，连接池数量有限，中间件压力过大无法支撑等）</li><li>不断的增加&#x2F;减少线程数来测试，按最高的要求去测试，最终获得一个“满足要求”的线程数**</li></ol><p><strong>而且而且而且！不同场景下的线程数理念也有所不同：</strong></p><ol><li>Tomcat中的maxThreads，在Blocking I&#x2F;O和No-Blocking I&#x2F;O下就不一样</li><li>Dubbo 默认还是单连接呢，也有I&#x2F;O线程（池）和业务线程（池）的区分，I&#x2F;O线程一般不是瓶颈，所以不必太多，但业务线程很容易称为瓶颈</li><li>Redis 6.0以后也是多线程了，不过它只是I&#x2F;O 多线程，“业务”处理还是单线程</li></ol><p><strong>所以，不要纠结设置多少线程了。没有标准答案，一定要结合场景，带着目标，通过测试去找到一个最合适的线程数。</strong></p><p>可能会有疑问：“我们系统也没啥压力，不需要那么合适的线程数，只是一个简单的异步场景，不影响系统其他功能就可以”</p><p>很正常，很多的内部业务系统，并不需要啥性能，稳定好用符合需求就可以了。那么我的推荐的线程数是：<strong>CPU核心数</strong></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Java-获取CPU核心数"><a href="#Java-获取CPU核心数" class="headerlink" title="Java 获取CPU核心数"></a>Java 获取CPU核心数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().availableProcessors()<span class="comment">//获取逻辑核心数，如6核心12线程，那么返回的是12</span></span><br></pre></td></tr></table></figure><h3 id="Linux-获取CPU核心数"><a href="#Linux-获取CPU核心数" class="headerlink" title="Linux 获取CPU核心数"></a>Linux 获取CPU核心数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">总核数 = 物理CPU个数 X 每颗物理CPU的核数</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看物理CPU个数</span></span><br><span class="line">cat /proc/cpuinfo|grep&quot;physical id&quot;|sort|uniq|wc-l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个物理CPU中core的个数(即核数)</span></span><br><span class="line">cat /proc/cpuinfo|grep&quot;cpu cores&quot;|uniq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看逻辑CPU的个数</span></span><br><span class="line">cat /proc/cpuinfo|grep&quot;processor&quot;|wc-l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医疗垂直领域大模型WiNGPT2的部署和性能对比</title>
      <link href="/2024/08/06/2024-08-06-WiNGPT2%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
      <url>/2024/08/06/2024-08-06-WiNGPT2%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h1 id="医疗垂直领域大模型WiNGPT2的部署和性能对比"><a href="#医疗垂直领域大模型WiNGPT2的部署和性能对比" class="headerlink" title="医疗垂直领域大模型WiNGPT2的部署和性能对比"></a>医疗垂直领域大模型WiNGPT2的部署和性能对比</h1><h2 id="WiNGPT2部署和运行"><a href="#WiNGPT2部署和运行" class="headerlink" title="WiNGPT2部署和运行"></a>WiNGPT2部署和运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/winninghealth/WiNGPT2.git</span><br><span class="line">cd WiNGPT2</span><br><span class="line">mkdir winninghealth</span><br><span class="line">cd winninghealth</span><br><span class="line">git clone https://hf-mirror.com/winninghealth/WiNGPT2-7B-Chat</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>若没有以下这三个库，则安装gradio、tiktoken、pip install einops flash_attn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install gradio</span><br><span class="line">pip install tiktoken</span><br><span class="line">pip install einops flash_attn</span><br></pre></td></tr></table></figure><p>选一个目录作为cache（前提是这个目录已经存在且有权限读写）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遇到报错 [Errno 13] Permission denied: <span class="string">&#x27;/data/.cache/huggingface/modules/transformers_modules/WiNGPT2-7B-Chat&#x27;</span></span></span><br><span class="line">export HF_HOME=&quot;/home/bjtc/verticalLLM/lzrj/WiNGPT2/cache&quot;</span><br></pre></td></tr></table></figure><p>安装frpc_linux_amd64</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://hf-mirror.com/lalazzz/frpc_linux_amd64_v0.2</span><br><span class="line">Rename the downloaded file to: frpc_linux_amd64_v0.2</span><br><span class="line">cp  frpc_linux_amd64_v0.2 /home/bjtc/miniconda3/lib/python3.12/site-packages/gradio</span><br><span class="line">chmod +x /home/bjtc/miniconda3/lib/python3.12/site-packages/gradio/frpc_linux_amd64_v0.2</span><br></pre></td></tr></table></figure><p>set <code>share=True</code>，并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi demo.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按照如下内容更改</span></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    demo.launch(share=True)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行</span></span><br><span class="line">python demo.py</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/06/nEsR3gvLPUS9Kd2.png" alt="image-20240806232203488.png"></p><p>在public URL: <a href="https://76d07266e8096cd673.gradio.live/">https://76d07266e8096cd673.gradio.live</a> 可访问该模型</p><p><img src="https://s2.loli.net/2024/08/06/Y7VUzEtJ3muobBH.png" alt="image-20240806232432361.png"></p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><ol><li><p>出现急性心肌梗死一般对身体带来哪些伤害</p><ul><li>WiNGPT2</li></ul><p>一、基础心血管病变：(1)冠状动脉粥样硬化斑块形成：长期的血管内皮细胞损伤和脂质代谢紊乱以及血液成分改变引起动脉壁脂肪沉积，使管壁增厚变硬，弹性减弱，平滑肌细胞及结缔组织增生，血小板在局部黏附聚集，释放一系列凝血因子而导致血栓形成，致使管腔狭窄。根据血脂升高的程度、血液黏滞度的高低和微循环障碍情况不同，以左前降支为例，仅5%～10%有临床症状，主要表现胸闷、气短、心绞痛，还有心律失常、高血压等。而大约50%左右的病人没有症状，这些患者在缺血发作时，很难准确地估计到是心肌供氧不足导致的，常常认为自己是在过度劳累。一部分患者仅仅表现为不稳定型心绞痛，或是无痛性心肌梗死，因为这类患者有微血管功能不全。还有少部分人在发生心肌梗死后还没有诊断出。(2)心肌毛细血管密度相对较低：有人曾做过测定，发现人类与灵长类动物之间的心肌毛细血管分布较恒定，其他哺乳动物如犬、猪等则为多倍，而爬行类及鸟类动物则是较少的，这说明了动物进化过程中心脏的功能有所降低，主要是由于心肌中毛细血管分布所决定的。因此，心脏对缺血耐受能力差。(3)侧支循环发育不良：患冠心病后，可促使代偿性的侧支循环建立，以增加心肌供氧。但是，在大多数情况下，心肌内的血流供应只是减少，而不是像人们想象的那样通过侧支循环得以改善。因此可以说，在心肌缺血的同时，也增加了心肌梗死的危险性。(4)微血管堵塞：各种原因引起的心肌缺血都会导致无复流现象。其中主要原因是微血管堵塞所致。如果不能很快恢复，就可能导致缺血部位坏死，从而形成陈旧性瘢痕。二、心脏以外的因素：主要与心室顺应性降低有关。急性期在舒张早期开始低容积压力负荷。部分患者还同时合并外周血管阻力明显增高，则在舒张早期就出现高容低压负荷状态。在多数慢性期患者，舒张早期则为正常的低容低压负荷状态，而在晚期往往又转为正常高容低压或高容高压负荷。三、原发性和继发性因素：原发性心肌损害包括肾上腺素能异常、儿茶酚胺性损害、体力衰竭、内分泌疾患、高龄等。而继发性心肌损害常见于急性心肌炎、高血压病、糖尿病、各种炎症引起的发热性疾病、手术创伤、人工瓣膜置换术后及药物中毒等情况。四、全身其他器官系统的相互影响：各种引起休克、感染、心力衰竭、严重贫血和电解质紊乱的情况都可能加重心肌缺血的程度。一般来说，除严重感染性休克或终末期衰竭等原因之外，当其他重要器官的功能异常得不到及时纠正时，往往导致死亡率的升高。五、危险因素的相互作用：不同病人引起心肌梗死的危险因素的组合是不同的。除了个体的不同以外，许多危险因素还可以互相作用。例如，肥胖可以通过加速胰岛素分泌水平并促进肌肉摄取葡萄糖的能力增强来抵消体力活动所增加的能量消耗，同时还可能加重其他危险因素的危害程度，如高血压等。同样，体力活动也可以减轻一些其他危险因素的影响，如轻度超重者通过增加体力活动可以有效地防止体脂过量的堆积。五、神经体液因素：无论是动脉血压升高还是降低都会使冠脉血流下降。压力感受器可以迅速通过调整自主神经张力和心率来平衡动脉血压的变化，而静脉系统则缺乏这样的反馈机制，所以会导致反射性心动过缓。七、心室重构：由于冠心病患者的特殊病理生理变化，随着病程进展，会出现心肌舒缩性能减弱，进而心脏逐渐扩大，最终发展成为收缩功能下降直至衰竭。这一过程被称为“心室重构”，这一病理变化为本症的特征之一。目前研究已证明，心肌重构不仅是心肌缺血的一种后果，而且也是多种疾病过程中的共同通路。总之，急性心肌梗死起病急骤，病情凶险，不经治疗，平均生存期仅为1.76小时。因此说抢救心肌梗死是心脏科急诊的重要内容之一，而急性心肌梗死并发心源性休克也是危重症医学领域最困难、最重要的医疗急救课题之一。</p><p><img src="https://s2.loli.net/2024/08/06/jT8b6EnBw9OuKy4.png" alt="image-20240806232937097.png"></p><ul><li><p>Kimi:</p><p>急性心肌梗死是一种严重的心脏病，通常由冠状动脉血管发生动脉粥样硬化病变而引起血管腔狭窄或阻塞，造成心肌缺血、缺氧或坏死。这种病症对身体带来的伤害主要包括：</p><ol><li><p><strong>心肌损伤</strong>：由于心肌细胞对缺氧非常敏感，一旦血液供应中断，心肌细胞会迅速受损并可能发生坏死。</p></li><li><p><strong>心脏功能下降</strong>：心肌梗死后，心脏的泵血能力可能减弱，导致心力衰竭，影响全身血液循环。</p></li><li><p><strong>心律失常</strong>：心肌梗死可能导致心脏电生理活动异常，引起各种心律失常，如室性心动过速或心室颤动，这些情况可能危及生命。</p></li><li><p><strong>心源性休克</strong>：大面积心肌梗死可能导致心脏泵血功能严重不足，引起心源性休克，这是一种生命威胁的紧急情况。</p></li><li><p><strong>心理影响</strong>：心肌梗死不仅对身体造成影响，还可能对患者的心理造成重大压力，导致焦虑和抑郁等情绪问题。</p></li><li><p><strong>生活质量下降</strong>：心肌梗死后，患者可能需要长期服用药物，改变生活方式，并且可能无法恢复到病前的活动水平，这会影响患者的生活质量。</p></li><li><p><strong>经济负担</strong>：治疗心肌梗死需要大量的医疗资源和长期管理，这可能给患者及其家庭带来经济负担。</p></li><li><p><strong>死亡风险</strong>：如果心肌梗死未得到及时和适当的治疗，可能会导致患者死亡。</p></li></ol><p>急性心肌梗死是一种需要紧急医疗干预的病症，及时识别症状并寻求专业医疗帮助至关重要。</p><p><img src="https://s2.loli.net/2024/08/06/OU68iMy9TNA2IqV.png" alt="image-20240806233018948.png"></p></li></ul></li><li><p>肝肿瘤指标高就是癌症吗</p><ul><li><p>WiNGPT2</p><p>有的肝肿瘤指标高并不一定是癌症，癌症即恶性肿瘤，它是机体在各种致瘤&#x2F;促瘤因素作用下，局部组织的某一个细胞在基因水平上失去对其生长的正常调控，导致其克隆性异常增生而形成的病变。学界一般将癌未满年龄限定，或从良性向恶性转变阶段的肿瘤统称为“瘤”，通常指肉眼可见的能够钻孔到达浆膜面的限局性病变，但亦有例外情况，例如一些良性甲状腺肿块在肉眼观察似乎并无深部侵袭性，但显微镜下却有可能浸润至邻近组织深处；又如局限性的膀胱乳头状瘤经电灼后，可在影像学上残留少量肿瘤痕迹，待其增大后肉眼可见，并能侵入深层组织。体检检查中一些项目的异常可能与癌症有关，需要进一步做相关筛查确诊。一般来说肝肿瘤标志物高的情况下不能确诊患者是不是患有肝癌，只是一种辅助诊断的参考指标。其它辅助检查比如B超、CT等需要结合在一起看。很多检查需要多次复查才有意义，需间隔一段时间，才能了解比较结果是否有较大变化。确诊是否为癌症尚需依靠病理活检免疫组化明确诊断。有些肝病是遗传性的，家族史里有这个病患者，那么下一代是有一定概率也会得的，就如乙肝大三阳、小三阳。发病早：肝病发病比较隐蔽，刚开始不易发现，但是到了后期的时候，就会变得很厉害。很容易形成肝腹水，这个时候病情已经很严重了。危害二：传染性高：乙肝、丙肝等肝病具有很强的传染性，而且易演变为慢性、难治性肝炎。危害三：恶化速度快：因为病毒复制不断刺激肝脏，时间久了会引起肝脏的炎症反应，导致肝脏纤维化，这是属于一种病理改变，纤维化的出现表示病情正在朝着肝硬化的方向转变，此时若是不能够及时控制病情，那将是肝硬化或者是肝癌，这两个疾病的出现生命将会受到威胁。</p><p><img src="https://s2.loli.net/2024/08/06/IkUxnHtwQKEWB6f.png" alt="image-20240806233149164.png"></p></li><li><p>Kimi:</p><p>肝肿瘤指标高并不一定意味着患有癌症。肿瘤指标，也称为肿瘤标志物，是用于评估肿瘤存在可能性的一类物质，它们可能由肿瘤细胞合成释放，或在机体对肿瘤细胞反应时升高。然而，肿瘤标志物的升高也可见于非肿瘤性疾病，例如炎症、感染，甚至生活习惯如熬夜、酗酒等都可能导致肿瘤标志物升高6。因此，单纯依据肿瘤标志物的升高来自我诊断肿瘤是不科学的。</p><p>在体检或身体检查中，如果发现肝脏有肿瘤，也不一定就是肝癌。肿瘤有良性和恶性之分，肝脏肿瘤可以是良性病变，如肝血管瘤、肝囊肿等，并不一定代表肝癌7。当发现肝脏有肿瘤时，及时进行明确诊断是非常重要的。</p><p>对于肝脏肿瘤的诊断，除了肿瘤标志物，还需要结合临床症状、影像学检查（如腹部彩超、CT、MRI）等其他检查结果来综合判断8。如果影像学检查发现肝脏有异常占位，并且肿瘤标志物升高，医生会根据具体情况可能建议进一步的检查，如肝脏穿刺活检等，以获得病理诊断，因为病理诊断是癌症诊断的金标准8。</p><p>此外，对于肿瘤标志物的检测，连续观察其动态变化更有意义。突然的升高值得注意，但肿瘤标志物升高时不可轻易诊断为恶性肿瘤，都需要结合其他相关检查、临床症状、体格检查等综合判断9。如果不属于高危人群，身体也没有任何不适，肿瘤标志物只是轻度升高，可以选择改善生活方式后再次复查肿瘤标志物，必要时可以完善相关检查10。</p><p>因此，如果体检发现肝肿瘤指标升高，建议及时咨询专业医生，进行进一步的检查和诊断。同时，保持良好的生活习惯，避免过度焦虑和恐慌，因为这些情绪本身也可能影响身体健康。</p><p><img src="https://s2.loli.net/2024/08/06/cYg97nA6fF84klT.png" alt="image-20240806233210994.png"></p></li></ul></li><li><p>经常摇动婴儿睡觉会有什么不良反应吗</p><ul><li><p>WiNGPT2</p><p>有些妈妈为了让宝宝能更快入睡，就喜欢摇晃着宝宝入睡，对于没经验的新手妈妈来说，看到宝宝哭闹就会下意识的去摇晃，结果就成了习惯，摇晃宝宝睡觉是有很多危害的。经常摇晃宝宝睡觉的五大危害1、容易让宝宝患上脑震荡当用力摇晃宝宝时候，宝宝的大脑会处于自由基攻击的状态，宝宝颅内的大脑每天都在不停快速震动，这种震动会让宝宝出现脑震荡甚至脑损伤的症状。同时还会让宝宝患上暂时性失聪或者耳聋等症状，严重的甚至会留下后遗症，影响孩子的一生。2、容易让宝宝患上胃出血如果家长摇晃宝宝的力度过大，会让宝宝在睡眠过程中窒息到引起惊厥。强烈震荡还会导致宝宝呕吐，一旦宝宝呕吐物误吸入呼吸道，可能会阻塞宝宝呼吸通道，宝宝呼吸不畅就会挣扎、踢腿，有可能会把自己的脸、嘴巴、眼睛等挤伤擦伤，还极有可能会使宝宝出现胃出血的症状，这些都是因为在剧烈摇晃的时候，各部位之间的碰撞引起的。3、容易让宝宝患上呼吸暂停综合征宝宝在睡眠中突然被剧烈摇晃后，大脑就会被强制性拉扯，这样就会增加大脑供血量，胸廓、肺、血液之间为了满足需求会发生短暂的不协调，就会导致宝宝在睡眠中窒息。若宝宝因某些因素存在呼吸道不通畅，就会引起明显的气流堵塞，造成宝宝呼吸暂停，因为孩子呼吸中枢兴奋性较低，抑制程度较高，稍有缺氧，就被大脑感知到，并引发呼吸暂停。即使一次呼吸停止也只有几秒，不够长的时间也不会产生任何症状，但如果持续时间较长，一分钟以上就会出现缺氧。每次睡觉均会发生呼吸暂停，长此以往，就会对宝宝的身体健康造成巨大的伤害。4、容易导致宝宝患上睡眠障碍现在许多家庭都是独生子女，父母都是十分宠爱孩子，任由孩子想怎样就怎样，其中就有不少家长就喜欢抱着宝宝睡觉，感觉宝宝睡着了再放下，殊不知正是这么做的不对行为，给宝宝养成了错误的习惯，而且在婴儿时期就得出了“抱睡”的结论。而且抱睡会严重影响宝宝自身的情绪、自身肢体的正常发育、入睡时伴随的手舞足蹈等动作都会干扰宝宝大脑的正常工作。而且摇晃睡觉也不是一个好的办法，宝宝睡觉可以用被子把宝宝包裹起来，头部稍微露出些，不但保暖还能帮助宝宝进入睡眠状态。</p><p><img src="https://s2.loli.net/2024/08/06/VrXnFIdNemwayuD.png" alt="image-20240806233306765.png"></p></li><li><p>Kimi:</p><p>经常摇动婴儿睡觉可能会对宝宝的健康和发育造成不良影响。首先，由于婴儿的大脑和颈部肌肉尚未完全发育，剧烈或过度的摇晃可能导致所谓的“摇晃婴儿综合征”，这可能会引起大脑损伤、血管撕裂和脑神经纤维受损，严重时甚至可能导致瘫痪、死亡或遗留发育迟缓、智力低下等问题。此外，过度依赖摇晃来帮助婴儿入睡，可能会影响婴儿学习自主入睡的能力，从而在没有摇晃的情况下难以入睡。</p><p>对于婴儿的睡眠环境，建议提供优质的睡眠条件，包括适宜的声音、光线、空气、温度和湿度，以帮助宝宝安稳入睡。同时，家长应避免在婴儿睡前让他们玩得过于兴奋，帮助宝宝养成规律的睡眠习惯。如果宝宝已经习惯了被摇晃才能入睡，可以尝试逐渐减少摇晃的强度和频率，或者采取其他安抚方式，比如轻轻拍拍、语言安抚或使用安抚巾等，以帮助宝宝逐渐适应不依赖摇晃的入睡方式。</p><p>总之，虽然适度的摇晃有时可以安抚婴儿，但为了避免潜在的风险和培养良好的睡眠习惯，家长应谨慎使用摇晃的方式，并考虑采取其他更安全的安抚和入睡方法。</p><p><img src="https://s2.loli.net/2024/08/06/7GK1nFXwSupmvZb.png" alt="image-20240806233329074.png"></p></li></ul></li><li><p>宝宝15个月37.3度算发烧吗？</p><ul><li><p>WiNGPT2</p><p>通常情况下，婴儿的正常体温在36.5℃-37.5℃之间。而当宝宝的体温超过38℃时，则被认为是发烧。所以根据宝宝的体温测量结果来看，37.3℃处于轻微发热状态，属于轻度的发烧。不过，要考虑到宝宝的个体差异和环境因素的影响，如果宝宝没有其他不适症状并且精神状态良好，我们可以先观察一段时间，注意保持室内通风，适当给予一些物理降温的方法，比如用温水擦拭宝宝的手心、脚心等部位来帮助散热。</p><p><img src="https://s2.loli.net/2024/08/06/lzRXZaHYrC7h8A2.png" alt="image-20240806233418357.png"></p></li><li><p>Kimi:</p><p>宝宝的正常体温范围通常是36.0°C至37.2°C，这取决于测量方法和宝宝的年龄。对于15个月大的宝宝来说，37.3°C的体温略高于正常范围的上限，但并不一定意味着宝宝发烧。体温可能会因为多种因素而波动，例如运动、哭闹、刚吃完饭或环境温度等。如果宝宝的体温达到37.3°C，并伴有其他症状，如头痛、无力、肌肉酸痛、咳嗽、流鼻涕等不适时，则可能是发烧，需要及时就医治疗。</p><p>需要注意的是，通常认为体温超过38.5°C时，可以给孩子使用退烧药，但这并不是唯一的判断标准。如果孩子体温不到38.5°C，但已经出现了精神不振、打蔫、肌肉酸痛等表现，也可以给孩子使用退烧药。</p><p>如果宝宝体温略高但没有其他不适症状，可以先观察宝宝的一般行为和反应，确保宝宝有充足的休息和水分，如果体温持续升高或出现其他症状，应及时咨询医生。</p><p><img src="https://s2.loli.net/2024/08/06/VsyUd7zwaPQIS1e.png" alt="image-20240806233509288.png"></p></li></ul></li><li><p>泛发型白癜风的症状表现</p><ul><li><p>WiNGPT2</p><p>皮损为乳白色，白斑界限清楚，色素反见毛孔缩小、皮肤萎缩等病变。而且患病的部位白斑可逐渐扩大或者相互融合，连成大片的不规则形状，严重时毳毛及毛发脱落，汗腺毛孔也随之闭塞，夏季容易受到紫外线强烈照射，产生症状会更加严重。甚至有的患者会因此而有斑秃或者全秃的现象出现。泛发型白癜风是皮肤病中常见多发的疾病之一，早期没有得到有效的治疗会有严重的危害性。严重的话会影响自身形象美观，甚至导致五官外貌、排尿感觉、神经障碍、并发症等。首先白癜风最典型的症状就是皮损可以发生在全身任何部位，会呈对称分布。一般无自觉症状，但是部分患者的发病过程会相对比较慢，会在一年左右，有的病情严重的患者甚至几年就可以发生全身的变白。通常为大小不一的局限性脱失斑，患处的毛发可正常，也可变白。此种疾病一般发生在易受摩擦及阳光照晒的暴露部位较多，特别是颜面部、颈部、腰腹部、骶尾处、前臂伸面与手指背部等处。其次是皱褶及皱襞部多发。皮损可见于很多部位，单侧的白斑也可能由神经因素所致，任何年龄均可发病，但以青少年为主。此外泛发性白癜风皮损呈纯白色圆形或不规则的脱失斑，表面光滑，边界清楚，边缘色素增多。变白的皮肤对日光较正常皮肤敏感，稍晒太阳即发红。此病一般不会引起甲亢。本病一般无自觉症状，少数病人在发病前或同时有患处局部瘙痒感。白癜风常伴其他自身免疫性疾病，如糖尿病、甲状腺疾病、肾上腺功能不全、硬皮病、异位性皮炎、斑秃等如何预防：由于白癜风初起为一小片色素减退斑，故而有时难以及时发现。一旦扩散，说明病情已较为严重。此时应配合医生，尽快分析病因，检查出自己的过敏原，并积极寻求治疗方法，定期随访观察。</p><p><img src="https://s2.loli.net/2024/08/06/4CVpq8XGdFeY2MW.png" alt="image-20240806233655111.png"></p></li><li><p>Kimi:</p><p>泛发型白癜风是白癜风的一种类型，其主要症状表现为皮肤上出现多处白斑，这些白斑的总面积通常超过体表皮肤的50%以上。这些白斑可以发生在身体的任何部位，形状可能是圆形、椭圆形或不规则形，颜色通常为乳白色或瓷白色，边界清楚。患者通常无自觉症状，但在某些情况下，发病前或发病初期可能会有炎症表现，如湿疹样或体癣样，进展期可能有短时瘙痒。泛发型白癜风的白斑分布广泛，通常以片状形式存在，不会单个存在，往往连成一片，形状不规则，皮损具有对称性。此外，泛发型白癜风患者常伴有毛发变白，因为黑色素细胞受损程度更严重。</p><p>泛发型白癜风的发病机制复杂，可能与自身免疫、精神神经、内分泌等因素有关。病程较长，多数患者的病情处于进展期，治疗可能较为困难。因此，对泛发型白癜风的治疗应综合分析其病因病势，尽量寻找并祛除可能的诱发因素。</p><p>在治疗方面，泛发型白癜风皮损较少者可以遵医嘱应用糖皮质激素、钙调磷酸酶抑制剂、维生素D3衍生物等药物治疗，也可使用308mm准分子激光治疗，均有一定的疗效。如果皮损超过体表面积的95%，可以考虑用脱色方法治疗，使色素脱失。患者在日常生活中还需注意避免太阳暴晒，以免导致病情加重。</p><p><img src="https://s2.loli.net/2024/08/06/kF4naOV3dwlsS2r.png" alt="image-20240806233723417.png"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> WiNGPT2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用ollama一键式部署SoulChat和性能对比</title>
      <link href="/2024/08/05/2024-08-05-%E5%88%A9%E7%94%A8ollama%E4%B8%80%E9%94%AE%E5%BC%8F%E9%83%A8%E7%BD%B2SoulChat%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
      <url>/2024/08/05/2024-08-05-%E5%88%A9%E7%94%A8ollama%E4%B8%80%E9%94%AE%E5%BC%8F%E9%83%A8%E7%BD%B2SoulChat%E5%92%8C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h1 id="利用ollama一键式部署SoulChat和性能对比"><a href="#利用ollama一键式部署SoulChat和性能对比" class="headerlink" title="利用ollama一键式部署SoulChat和性能对比"></a>利用ollama一键式部署SoulChat和性能对比</h1><p><a href="https://github.com/scutcyr/SoulChat">scutcyr&#x2F;SoulChat: 中文领域心理健康对话大模型SoulChat (github.com)</a></p><p><a href="https://ollama.com/liutechs/soulchatfa">liutechs&#x2F;soulchatfa (ollama.com)</a></p><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>采用ollama进行一键式部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh bjtc@162.105.16.236</span><br><span class="line">password: 000000</span><br><span class="line">curl -fsSL https://ollama.com/install.sh | sh //下载ollma</span><br><span class="line">ollama run liutechs/soulchatfa //利用ollma下载SoulChat</span><br></pre></td></tr></table></figure><h2 id="运行和对比"><a href="#运行和对比" class="headerlink" title="运行和对比"></a>运行和对比</h2><ol><li><p>失恋</p><ul><li><p>SoulChat:</p><p><img src="https://s2.loli.net/2024/08/05/QVSv965RDmeuCgE.png" alt="image-20240805212554946.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/05/nwCEM1Uhxe8msaF.png" alt="image-20240805213002471.png">2.</p></li></ul></li><li><p>宿舍关系</p><ul><li><p>SoulChat:</p><p><img src="https://s2.loli.net/2024/08/05/XGvL31IQ2iPJz5d.png" alt="image-20240805213701972.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/05/vriSUn8OMwlc2eg.png" alt="image-20240805213927208.png"></p></li></ul></li><li><p>期末考试</p><ul><li><p>SoulChat</p><p><img src="https://s2.loli.net/2024/08/05/IGpqnC3yHfb5jOs.png" alt="image-20240805214119743.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/05/F8HajPdV3GYM7wT.png" alt="image-20240805214257800.png"></p></li></ul></li><li><p>科研压力</p><ul><li><p>SoulChat</p><p><img src="https://s2.loli.net/2024/08/05/p5cPGSdTMiOgyaF.png" alt="image-20240805214426460.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/05/jJMGLoigN4OBqTX.png" alt="image-20240805214628846.png"></p></li></ul></li><li><p>实习工作</p><ul><li><p>SoulChat</p><p><img src="https://s2.loli.net/2024/08/05/GgFRuD6ezp2Ooqb.png" alt="image-20240805214753078.png"></p></li><li><p>Kimi:</p><p><img src="https://s2.loli.net/2024/08/05/4B5YLU2vWHsVaJ1.png" alt="image-20240805214848335.png"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HuatuoGPT2 </tag>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC和Http请求的区别</title>
      <link href="/2024/08/01/2024-08-01-RPC%E5%92%8CHttp%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/08/01/2024-08-01-RPC%E5%92%8CHttp%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="RPC和Http请求的区别"><a href="#RPC和Http请求的区别" class="headerlink" title="RPC和Http请求的区别"></a>RPC和Http请求的区别</h1><p>看这个：<a href="https://blog.csdn.net/u013310119/article/details/102566051?ops_request_misc=%7B%22request_id%22:%22172247792816800227491776%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172247792816800227491776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-15-102566051-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rpc%E4%B8%8E%E6%99%AE%E9%80%9Aapi%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">RPC简介及框架选择，RPC与REST的区别_rpc控制client, client返回主机测试结果和状态-CSDN博客</a></p><p><a href="https://blog.csdn.net/huojiao2006/article/details/82186389?ops_request_misc=%7B%22request_id%22:%22172247792816800207041687%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172247792816800207041687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82186389-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rpc%E4%B8%8E%E6%99%AE%E9%80%9Aapi%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">RPC、REST API深入理解_rpc与普通api接口的区别-CSDN博客</a></p><p><a href="https://blog.csdn.net/gzl0524/article/details/88226215?ops_request_misc=&request_id=&biz_id=102&utm_term=rpc%E4%B8%8E%E6%99%AE%E9%80%9Aapi%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-88226215.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">弄清楚这些接口(http,https,api,RPC,webservice,Restful api ,OpenAPI）_rpc接口和api接口-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_35813265/article/details/81945646?ops_request_misc=%7B%22request_id%22:%22172247792816800227491776%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172247792816800227491776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-81945646-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rpc%E4%B8%8E%E6%99%AE%E9%80%9Aapi%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">restful API、SOAP、RPC的区别_soap api和restful api优缺点-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垂类心理健康咨询大模型MeChat的部署和性能对比</title>
      <link href="/2024/08/01/MeChat/"/>
      <url>/2024/08/01/MeChat/</url>
      
        <content type="html"><![CDATA[<h1 id="垂类心理健康咨询大模型MeChat的部署和性能对比"><a href="#垂类心理健康咨询大模型MeChat的部署和性能对比" class="headerlink" title="垂类心理健康咨询大模型MeChat的部署和性能对比"></a>垂类心理健康咨询大模型MeChat的部署和性能对比</h1><h2 id="部署和运行"><a href="#部署和运行" class="headerlink" title="部署和运行"></a>部署和运行</h2><p><a href="https://github.com/qiuhuachuan/smile">qiuhuachuan&#x2F;smile: SMILE: Single-turn to Multi-turn Inclusive Language Expansion via ChatGPT for Mental Health Support (github.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/qiuhuachuan/smile.git //如果网络不行就git clont到本地再scp到服务器 data目录可以忽略掉</span><br><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh //rust complier 然后要重新打开终端 已有rust complier即忽略这条命令</span><br><span class="line">RUSTUP_TOOLCHAIN=1.72.0 pip install tokenizers==0.13.2 </span><br><span class="line">/*执行上面这条命令，如果不这样做会报错：报错：ERROR: Could not build wheels for tokenizers, which is required to install pyproject.toml-based projects报错： error: casting `&amp;T` to `&amp;mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`*/</span><br><span class="line">vi requirements.txt </span><br><span class="line">//修改requirements.txt中的torch版本为2.2.0，设置完后:wq!退出</span><br><span class="line">pip install -r requirements.txt .0</span><br><span class="line">export HF_HOME=&quot;~/verticalLLM/lzjr/smile/cache&quot; </span><br><span class="line">export HF_ENDPOINT=https://hf-mirror.com //临时换源</span><br><span class="line">export HF_HUB_OFFLINE=0 //设置线上的</span><br><span class="line">echo $HF_ENDPOINT</span><br><span class="line">echo $HF_HUB_OFFLINE</span><br><span class="line">/*注意这个目录是要有权限操作的，这一步的目的是如果不这样操作直接运行Mechat.py会报错：报错：PermissionError: [Errno 13] Permission denied: &#x27;/data/.cache/huggingface/modules/transformers_modules/THUDM&#x27;*/</span><br><span class="line">python MeChat.py</span><br></pre></td></tr></table></figure><p>开始下载了</p><p><img src="https://s2.loli.net/2024/08/05/wh2Zz8PKacsDitj.png" alt="image-20240801144851595.png"></p><p>加载完之后，开始运行</p><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20240801150509713.png" alt="image-20240801150509713"></p><h2 id="表现对比"><a href="#表现对比" class="headerlink" title="表现对比"></a>表现对比</h2><p>可以看到Mechat扩展真实的心理互助 QA为多轮的心理健康支持多轮对话，提高了通用语言大模型<strong>在心理健康支持领域能力的表现</strong>，更加符合在长程多轮对话的应用场景；而通用大模型并不能做到这一点。</p><ol><li><p>人到老年似乎越来越孤独，孤独终老会不会很可怜?</p><ul><li>Mechat</li></ul><p><img src="https://s2.loli.net/2024/08/05/xTKI5NJ7nAYLrkl.png" alt="image-20240801151229766.png"></p><ul><li><p>Kimi</p><p><img src="https://s2.loli.net/2024/08/05/pht1bLAgjqX9eo5.png" alt="image-20240801150931128.png"></p></li></ul></li><li><p>强迫思维严重影响到我的学习与生活该怎么办？</p><ul><li><p>Mechat</p><p><img src="https://s2.loli.net/2024/08/05/7W9UflpPNhFoHxv.png" alt="image-20240801151935573.png"></p></li><li><p>Kimi</p><p><img src="https://s2.loli.net/2024/08/05/MAPZIKYgwbr8VFJ.png" alt="image-20240801152555811.png"></p></li></ul></li><li><p>女儿10岁同学不和她玩，女儿就动手煽了同学的脸？已经是第二次动手打人家，上一次也是因为不和她玩孩子是不是有心理问题？</p><ul><li><p>Mechat</p><p><img src="https://s2.loli.net/2024/08/05/gifxI5j1BqSR87K.png" alt="image-20240801152846135.png"></p></li><li><p>Kimi</p><p><img src="https://s2.loli.net/2024/08/05/hcFbpsLSBrDAQZe.png" alt="image-20240801152902059.png"></p></li></ul></li><li><p>不论睡多久，只要开会就犯困，为什么？工作以来，对于那种不是在解决问题，或者是流水账的会议，就一定会犯困，坚持不过30分钟。新单位想转正，试用期开会三次打盹三次，但实在是太无聊。每次开会就会特别困(இдஇ; )，无语눈_눈，困死了(๑ó﹏ò๑)</p><ul><li><p>Mechat</p><p><img src="https://s2.loli.net/2024/08/05/UPua1j5f6BLteKF.png" alt="image-20240801153110626.png"></p></li><li><p>Kimi</p><p><img src="https://s2.loli.net/2024/08/05/lhbsFokZKade39q.png" alt="image-20240801153232783.png"></p></li></ul></li><li><p>还有50天考研非常没信心，觉得未来模糊对不起父母</p><ul><li><p>Mechat</p><p><img src="https://s2.loli.net/2024/08/05/D9JkYeI2UpzNiZK.png" alt="image-20240801153443487.png"></p></li><li><p>Kimi</p><p><img src="https://s2.loli.net/2024/08/05/SrA5IMCOtQZvkRm.png" alt="image-20240801153555469.png"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MeChat </tag>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Transactional和@Transaction</title>
      <link href="/2024/07/31/2024-07-31-SpringBoot-Transactional%E5%92%8C@Transaction/"/>
      <url>/2024/07/31/2024-07-31-SpringBoot-Transactional%E5%92%8C@Transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Transactional和-Transaction"><a href="#SpringBoot-Transactional和-Transaction" class="headerlink" title="SpringBoot Transactional和@Transaction"></a>SpringBoot Transactional和@Transaction</h1><p><code>TransactionTemplate</code> 和 <code>@Transactional</code> 都是Spring框架提供用于事务管理的工具，但它们在使用方式和适用场景上存在一些区别：</p><ol><li><p><strong>使用方式</strong>：</p><ul><li><code>TransactionTemplate</code> 是一个Spring模板类，它提供了一种编程式事务管理的方法。使用 <code>TransactionTemplate</code> 时，你需要显式地编写代码来控制事务的开始、提交和回滚。</li><li><code>@Transactional</code> 是一个注解，它提供了声明式事务管理的方式。通过在方法或类上添加 <code>@Transactional</code> 注解，Spring 容器会在方法执行前后自动处理事务的开始和提交。如果方法执行过程中抛出异常，默认情况下事务将回滚。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li><code>TransactionTemplate</code> 更适合于那些需要更细粒度控制事务的场景，例如，你可能需要在事务的某个阶段执行一些特定的操作，或者需要在事务中嵌套使用不同的事务管理器。</li><li><code>@Transactional</code> 更适合于大多数简单的用例，其中事务的边界清晰，并且不需要编程式的事务控制。</li></ul></li><li><p><strong>侵入性</strong>：</p><ul><li>使用 <code>TransactionTemplate</code> 时，事务管理代码与业务逻辑代码混合在一起，可能会增加业务代码的复杂性。</li><li><code>@Transactional</code> 作为注解，与业务逻辑分离，保持了代码的清晰和解耦。</li></ul></li><li><p><strong>可重用性</strong>：</p><ul><li><code>TransactionTemplate</code> 可以实例化并在多个地方重用，为不同的业务逻辑提供事务管理。</li><li><code>@Transactional</code> 一旦定义，就可以很容易地应用到多个方法或整个类上，提高了代码的复用性。</li></ul></li><li><p><strong>配置复杂性</strong>：</p><ul><li><code>TransactionTemplate</code> 需要更多的配置和编码工作来设置事务参数，如隔离级别、传播行为等。</li><li><code>@Transactional</code> 可以通过简单的属性配置实现复杂的事务设置，如 <code>propagation</code>, <code>isolation</code>, <code>timeout</code> 等。</li></ul></li><li><p><strong>错误处理</strong>：</p><ul><li>使用 <code>TransactionTemplate</code> 时，开发者需要自己管理事务的异常和错误处理。</li><li><code>@Transactional</code> 允许开发者通过注解的 <code>rollbackFor</code> 和 <code>noRollbackFor</code> 属性来指定哪些异常类型会触发事务回滚。</li></ul></li><li><p><strong>与Spring的集成</strong>：</p><ul><li><code>TransactionTemplate</code> 作为Spring框架的一部分，需要与Spring的ApplicationContext紧密集成。</li><li><code>@Transactional</code> 与Spring的AOP（面向切面编程）集成，利用代理机制来实现事务管理。</li></ul></li></ol><p>总结来说，<code>TransactionTemplate</code> 提供了更细粒度的控制和灵活性，适合复杂的事务场景，而 <code>@Transactional</code> 提供了一种更简单、更声明式的方法来管理事务，适合大多数标准用例。在实际开发中，选择哪一种取决于具体需求和偏好。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL刷题</title>
      <link href="/2024/07/30/2024-07-30-SQL%E5%88%B7%E9%A2%98/"/>
      <url>/2024/07/30/2024-07-30-SQL%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL刷题"><a href="#SQL刷题" class="headerlink" title="SQL刷题"></a>SQL刷题</h1><p><a href="https://blog.csdn.net/m0_70325779/article/details/132165862?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-132165862-blog-102724773.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=1">数据库SQL查询语句的执行顺序是怎么样的？_sql查询顺序-CSDN博客</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="where和having"><a href="#where和having" class="headerlink" title="where和having"></a>where和having</h3><p>“Where”是一个约束声明，在查询数据库的结果返回之前对数据库中的查询条件进行约束，即在结果返回之前起作用，且where后面不能使用“聚合函数”；</p><p>“Having”是一个过滤声明，所谓过滤是在查询数据库的结果返回之后进行过滤，即在结果返回之后起作用，并且having后面可以使用“聚合函数”。</p><ul><li><p>使用的角度：</p><ul><li><p>where后面之所以不能使用聚合函数是因为where的执行顺序在聚合函数之前，</p><p>如下面这个sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="built_in">sum</span>(score) <span class="keyword">from</span> student  <span class="keyword">group</span> <span class="keyword">by</span> student.sex <span class="keyword">where</span> <span class="built_in">sum</span>(student.age)<span class="operator">&gt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>having既然是对查出来的结果进行过滤，那么就不能对没有查出来的值使用having，</p><p>如下面这个sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  student.id,student.name <span class="keyword">from</span> student <span class="keyword">having</span> student.score <span class="operator">&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在查询过程中聚合语句(sum,min,max,avg,count)要比having子句优先执行，而where子句在查询过程中执行优先级别优先于聚合语句(sum,min,max,avg,count)。<br>简单说来：<br>where子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(num) <span class="keyword">as</span> rmb <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;只有先查询出id大于10的记录才能进行聚合语句</p><h3 id="升序降序"><a href="#升序降序" class="headerlink" title="升序降序"></a>升序降序</h3><p>升序：asc(ascend)</p><p>降序：desc(descend)</p><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>[sql语句中union的用法_sql union-CSDN博客](<a href="https://blog.csdn.net/weixin_42383680/article/details/119858753?ops_request_misc=%7B%22request_id%22:%22172242275016800222833310%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172242275016800222833310&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119858753-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=SQL">https://blog.csdn.net/weixin_42383680/article/details/119858753?ops_request_misc=%7B%22request%5Fid%22%3A%22172242275016800222833310%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172242275016800222833310&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119858753-null-null.142^v100^pc_search_result_base8&amp;utm_term=SQL</a> union&amp;spm&#x3D;1018.2226.3001.4187)</p><p>union联合的结果集不会有重复值，如果要有重复值，则使用union all</p><p> union会自动压缩多个结果集合中重复的结果，使结果不会有重复行，union all 会将所有的结果共全部显示出来，不管是不是重复。</p><p> union：会对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序。</p><p> union all：对两个结果集进行并集操作，包括重复行，不会对结果进行排序。</p><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>[SQL中COUNT()函数的用法_sqlcount函数的使用方法-CSDN博客](<a href="https://blog.csdn.net/fdggdg/article/details/118757777?ops_request_misc=%7B%22request_id%22:%22172242334216800211564239%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172242334216800211564239&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-118757777-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=sql">https://blog.csdn.net/fdggdg/article/details/118757777?ops_request_misc=%7B%22request%5Fid%22%3A%22172242334216800211564239%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172242334216800211564239&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-118757777-null-null.142^v100^pc_search_result_base8&amp;utm_term=sql</a> count&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="177-第N高的薪水"><a href="#177-第N高的薪水" class="headerlink" title="177. 第N高的薪水"></a>177. 第N高的薪水</h2><p>注意声明函数，变量，set的过程，limit的用法，distinct的用法。</p><p>这里变量不能直接N-1带进去，必须重新声明一个变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> M <span class="type">INT</span>; </span><br><span class="line">    <span class="keyword">SET</span> M <span class="operator">=</span> N<span class="number">-1</span>; </span><br><span class="line">  <span class="keyword">RETURN</span> (</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">      LIMIT M, <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="180-连续出现的数字"><a href="#180-连续出现的数字" class="headerlink" title="180.连续出现的数字"></a>180.连续出现的数字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> l1.num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"> <span class="keyword">from</span> Logs l1,Logs l2,Logs l3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l1.id<span class="operator">=</span>l2.id<span class="number">-1</span> </span><br><span class="line">    <span class="keyword">and</span> l1.num<span class="operator">=</span>l2.num</span><br><span class="line">    <span class="keyword">and</span> l1.id<span class="operator">=</span>l3.id<span class="number">-2</span> <span class="keyword">and</span> l1.num<span class="operator">=</span>l3.num</span><br></pre></td></tr></table></figure><h2 id="602-好友申请②：谁有最多的好友"><a href="#602-好友申请②：谁有最多的好友" class="headerlink" title="602.好友申请②：谁有最多的好友"></a>602.好友申请②：谁有最多的好友</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> id,num <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> ids <span class="keyword">as</span> id,<span class="built_in">count</span>(ids) <span class="keyword">as</span> num <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> requester_id <span class="keyword">as</span> ids  <span class="keyword">from</span> RequestAccepted </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> accepter_id <span class="keyword">as</span> ids  <span class="keyword">from</span> RequestAccepted )<span class="keyword">as</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> ids)<span class="keyword">as</span> table2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用操作</title>
      <link href="/2024/07/29/2024-07-21-Redis%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/07/29/2024-07-21-Redis%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis常用操作"><a href="#Redis常用操作" class="headerlink" title="Redis常用操作"></a>Redis常用操作</h1><table><thead><tr><th>数据类型</th><th>操作</th><th>键（key）位置</th><th>值（value）位置</th><th>示例</th></tr></thead><tbody><tr><td>String</td><td>GET</td><td>直接使用键名</td><td>键对应的字符串值</td><td><code>GET mykey</code></td></tr><tr><td></td><td>SET</td><td>直接使用键名</td><td>要设置的字符串值</td><td><code>SET mykey &quot;Hello World&quot;</code></td></tr><tr><td></td><td>DEL</td><td>直接使用键名</td><td>无（操作是删除）</td><td><code>DEL mykey</code></td></tr><tr><td></td><td>INCR</td><td>直接使用键名</td><td>键的整数值（自动增加1）</td><td><code>INCR mykey</code></td></tr><tr><td></td><td>DECR</td><td>直接使用键名</td><td>键的整数值（自动减少1）</td><td><code>DECR mykey</code></td></tr><tr><td>Hash</td><td>HGET</td><td>哈希名</td><td>哈希字段名</td><td><code>HGET myhash field1</code></td></tr><tr><td></td><td>HSET</td><td>哈希名</td><td>哈希字段名和值</td><td><code>HSET myhash field1 &quot;value1&quot;</code></td></tr><tr><td></td><td>HDEL</td><td>哈希名</td><td>哈希字段名</td><td><code>HDEL myhash field1</code></td></tr><tr><td></td><td>HGETALL</td><td>哈希名</td><td>无（返回所有字段和值）</td><td><code>HGETALL myhash</code></td></tr><tr><td>List</td><td>LPUSH</td><td>列表名</td><td>要推入的值</td><td><code>LPUSH mylist &quot;item1&quot;</code></td></tr><tr><td></td><td>RPUSH</td><td>列表名</td><td>要推入的值</td><td><code>RPUSH mylist &quot;item1&quot;</code></td></tr><tr><td></td><td>LPOP</td><td>列表名</td><td>无（操作是弹出）</td><td><code>LPOP mylist</code></td></tr><tr><td></td><td>RPOP</td><td>列表名</td><td>无（操作是弹出）</td><td><code>RPOP mylist</code></td></tr><tr><td></td><td>LRANGE</td><td>列表名</td><td>起始和结束索引</td><td><code>LRANGE mylist 0 2</code></td></tr><tr><td>Set</td><td>SADD</td><td>集合名</td><td>要添加的元素</td><td><code>SADD myset item1</code></td></tr><tr><td></td><td>SREM</td><td>集合名</td><td>要删除的元素</td><td><code>SREM myset item1</code></td></tr><tr><td></td><td>SMEMBERS</td><td>集合名</td><td>无（返回所有元素）</td><td><code>SMEMBERS myset</code></td></tr><tr><td></td><td>SISMEMBER</td><td>集合名和元素</td><td>无（检查元素是否存在）</td><td><code>SISMEMBER myset item1</code></td></tr><tr><td>Sorted Set</td><td>ZADD</td><td>有序集合名</td><td>成员和分数</td><td><code>ZADD myzset 3.0 item1</code></td></tr><tr><td></td><td>ZREM</td><td>有序集合名</td><td>要删除的成员</td><td><code>ZREM myzset item1</code></td></tr><tr><td></td><td>ZRANGE</td><td>有序集合名</td><td>起始和结束索引</td><td><code>ZRANGE myzset 0 2</code></td></tr><tr><td></td><td>ZREVRANGE</td><td>有序集合名</td><td>起始和结束索引</td><td><code>ZREVRANGE myzset 0 2</code></td></tr><tr><td></td><td>ZSCORE</td><td>有序集合名</td><td>成员名</td><td><code>ZSCORE myzset item1</code></td></tr></tbody></table><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li><strong>String</strong>：简单的字符串键值对。</li><li><strong>Hash</strong>：键值对集合，其中键是哈希名，值是字段名和字段值。</li><li><strong>List</strong>：有序集合，键是列表名，值是列表中的元素。</li><li><strong>Set</strong>：无序集合，键是集合名，值是集合中的元素。</li><li><strong>Sorted Set</strong>：有序集合，键是有序集合名，值是成员和成员的分数。</li></ul><p>这些操作和示例可以帮助你理解如何在 Redis 中使用不同的数据类型进行基本操作。</p><p>在 Redis 的上下文中，特别是在 Hash 数据类型的操作中，”field” 指的是哈希表中的字段名，它与 “value”（值）一起构成了哈希表中的一个键值对。Hash 类型在 Redis 中用于存储对象或者映射（map），其中每个对象或映射项由一个字段名和对应的值组成。</p><p>以下是一些 Hash 数据类型的操作示例，以展示 “field” 的使用：</p><ul><li><p><code>HSET myhash username &quot;JohnDoe&quot;</code>：在这个操作中，<code>myhash</code> 是哈希名（key），<code>username</code> 是字段名（field），<code>&quot;JohnDoe&quot;</code> 是与字段名相关联的值（value）。</p></li><li><p><code>HGET myhash username</code>：这里，<code>myhash</code> 是哈希名，<code>username</code> 是我们要获取的字段名。操作的目的是获取与 <code>username</code> 字段名关联的值。</p></li><li><p><code>HDEL myhash username</code>：在这个删除操作中，<code>myhash</code> 是哈希名，<code>username</code> 是要删除的字段名。</p></li><li><p><code>HGETALL myhash</code>：这个操作返回哈希 <code>myhash</code> 中所有的字段和值。返回的结果是一个列表，其中每个字段名和值交替出现。</p></li></ul><p>在 Hash 数据类型中，字段名（field）可以是字符串，而且一个哈希可以包含多个这样的字段和值对。这使得 Hash 成为存储具有多个属性的对象（如用户信息、配置设置等）的理想选择。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令_各种参数简介</title>
      <link href="/2024/07/27/Docker%E5%91%BD%E4%BB%A4_%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E7%AE%80%E4%BB%8B/"/>
      <url>/2024/07/27/Docker%E5%91%BD%E4%BB%A4_%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker命令-各种参数简介"><a href="#Docker命令-各种参数简介" class="headerlink" title="Docker命令_各种参数简介"></a>Docker命令_各种参数简介</h1><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMOND] [ARGS...]</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS 说明</span></span><br><span class="line">--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class="line">-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-P: 随机端口映射；</span><br><span class="line">-p: 指定端口映射，有以下四种格式</span><br><span class="line">      ip:hostPort:containerPort</span><br><span class="line">      ip::containerPort</span><br><span class="line">      hostPort:containerPort</span><br><span class="line">      containerPort</span><br><span class="line">    -w: 指定命令执行时，所在的路径</span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IMAGE</span></span><br><span class="line">XXX_IMAGE_NAME:XXX_IMAGE_VER</span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">COMAND</span></span><br><span class="line">例：mvn -Duser.home=xxx -B clean package -Dmaven.test.skip=true</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用OPTIONS补足：</span></span><br><span class="line">--name：容器名字</span><br><span class="line">--network：指定网络</span><br><span class="line">--rm：容器停止自动删除容器</span><br><span class="line"> </span><br><span class="line">-i：--interactive,交互式启动</span><br><span class="line">-t：--tty，分配终端</span><br><span class="line">-v：--volume,挂在数据卷</span><br><span class="line">-d：--detach，后台运行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在已运行的容器中运行命令</span></span><br><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG…]</span><br><span class="line">常用选项：</span><br><span class="line">  -d：--detach ，后台运行命令</span><br><span class="line">  -e, --env list             设置env</span><br><span class="line">  -i, --interactive         启用交互式</span><br><span class="line">  -t, --tty                     启用终端</span><br><span class="line">  -u, --user string        指定用户 (格式: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       指定工作目录</span><br></pre></td></tr></table></figure><h2 id="docker-v-挂载"><a href="#docker-v-挂载" class="headerlink" title="docker -v 挂载"></a>docker -v 挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">譬如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：</span></span><br><span class="line"> </span><br><span class="line">docker run -it -v /test:/soft centos /bin/bash</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">冒号<span class="string">&quot;:&quot;</span>前面的目录是宿主机目录，后面的目录是容器内目录。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">================================</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker服务运行状况</span></span><br><span class="line"></span><br><span class="line">ps -el | grep -i docker</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止Docker服务</span></span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker服务</span></span><br><span class="line"></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">================================</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看有哪些镜像</span></span><br><span class="line">docker search yourAppName</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取镜像</span></span><br><span class="line">docker pull imageName</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看安装了的镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器运行</span></span><br><span class="line">docker stop &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新启动容器</span></span><br><span class="line">docker resatart &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm yourContainerID </span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除镜像</span></span><br><span class="line">docker rmi yourImageName</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器开启时的<span class="built_in">log</span></span></span><br><span class="line">docker logs -f yourContainerName</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内部执行命令</span></span><br><span class="line">docker exec -it yourContainerID bash</span><br><span class="line"></span><br><span class="line">＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看Log</span></span><br><span class="line">docker logs -f &lt;image_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用ollama一键式部署HuatuoGPT2和使用</title>
      <link href="/2024/07/26/HuatuoGPT2/"/>
      <url>/2024/07/26/HuatuoGPT2/</url>
      
        <content type="html"><![CDATA[<h1 id="利用ollama一键式部署HuatuoGPT2和使用"><a href="#利用ollama一键式部署HuatuoGPT2和使用" class="headerlink" title="利用ollama一键式部署HuatuoGPT2和使用"></a>利用ollama一键式部署HuatuoGPT2和使用</h1><p><a href="https://ollama.com/killgfat/huatuogpt2">killgfat&#x2F;huatuogpt2 (ollama.com)</a></p><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>采用ollama进行一键式部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh bjtc@162.105.16.236</span><br><span class="line">password: 000000</span><br><span class="line">curl -fsSL https://ollama.com/install.sh | sh //下载ollma</span><br><span class="line">ollama run killgfat/huatuogpt2 //利用ollma下载huatuogpt2</span><br></pre></td></tr></table></figure><h2 id="运行和对比"><a href="#运行和对比" class="headerlink" title="运行和对比"></a>运行和对比</h2><p>将离线状态下成功部署的huatuogpt2与Kimi（月之暗面大模型）各自询问五个医学领域的问题，各自的回答对比结果如下。</p><ol><li><p>从20年元旦发烧好了以后，小孩每天晚上喊双膝盖好累到现在，应该是酸痛，白天基本没事，目前走路正常，无肿胀。已到人民医院检查核磁共振检查显示关节有少许积液，请问这是什么病，怎么治疗，能不能给我开药？</p><p><strong>HuatuoGPT2:</strong></p><p><img src="https://s2.loli.net/2024/08/05/PBVdU3zL7TA8w4Z.png" alt="image-20240801104516064.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">根据您的描述和医院的检查结果，这可能是孩子的膝关节出现了一些问题。具体的原因可能是多种多样的，比如过度使用、受伤或者</span><br><span class="line">是某种疾病的表现。但是，具体的诊断还需要由医生根据详细的病史和其他相关的医学信息来做出。</span><br><span class="line"></span><br><span class="line">关于关节积液的问题，这可能是由于炎症或者其他原因导致的。如果是由于炎症的话，那么可能是由于某种疾病的症状，比如说类风</span><br><span class="line">湿关节炎或者是因为其他的一些疾病引起的。如果是由于其他的原因，比如过度使用或者是受伤的话，那么治疗的方法也会有所不同</span><br><span class="line">。</span><br><span class="line"></span><br><span class="line">治疗方法可能包括物理疗法、药物治疗以及其他的治疗方法。具体的治疗方案需要由医生根据孩子的具体情况来制定。药物治疗可能</span><br><span class="line">会包括非处方药物，比如用来缓解疼痛和炎症的药物，也可能会包括处方药物，比如说如果需要控制炎症或者是为了治疗某种疾病的</span><br><span class="line">话。</span><br><span class="line"></span><br><span class="line">但是，我必须强调，以上的所有的信息都是基于您提供的信息和我所了解的医学知识，具体的诊断和治疗还需要由医生来决定。我建</span><br><span class="line">议您尽快带孩子去看医生，由专业的医生来进行详细的检查和评估，以便能够得到最准确的诊断和最适合的治疗方案。</span><br></pre></td></tr></table></figure><p><strong>Kimi:</strong></p><p><img src="https://s2.loli.net/2024/08/05/9dEsWaYHiU8c5Kf.png" alt="image-20240801104635774.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">根据您描述的情况，孩子晚上双膝盖感到酸痛，但白天走路正常且无肿胀，核磁共振检查显示关节有少许积液。这可能是由多种原因引起的，例如过度疲劳、轻微的关节损伤或是早期的关节炎症等。不过，具体的诊断需要由专业医生根据详细的病史、体检和辅助检查结果来确定。</span><br><span class="line"></span><br><span class="line">对于膝盖的酸痛，一些常见的治疗方法包括：</span><br><span class="line">1. 休息和减少活动量，尤其是减少可能加大膝关节负担的活动，如跑跳、长时间行走或爬楼梯 。</span><br><span class="line">2. 冰敷可以减轻疼痛和肿胀，建议在疼痛的第一天每小时冰敷15分钟，之后几天每天4次 。</span><br><span class="line">3. 使用护膝来保护和辅助膝关节运动 。</span><br><span class="line">4. 如果疼痛较为严重，可以在医生的指导下使用非甾体抗炎药物（如布洛芬、塞来昔布等）来缓解疼痛 。</span><br><span class="line">5. 在某些情况下，医生可能会建议进行物理治疗或康复训练，以增强膝关节周围的肌肉并改善关节功能 。</span><br><span class="line"></span><br><span class="line">重要的是，如果孩子的膝盖疼痛持续存在或有加重的趋势，应该及时带孩子去医院就诊，明确病因，并根据医生的建议进行针对性治疗。此外，如果核磁共振检查显示关节有积液，医生可能会建议进一步的检查或治疗，如关节穿刺抽液等，以排除其他潜在的疾病 。</span><br><span class="line"></span><br><span class="line">请注意，我不能为您开药，因为我不是医生，也无法进行面对面的诊断。上述建议仅供参考，具体治疗方案还需咨询专业医生。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>您好，我患有大拇指腱鞘炎已经有13年了，症状包括右手大拇指明显比左手粗大，伸不直，使劲伸直有响声，不灵活。这个病严重影响了我的工作和生活。我想知道宿州这边有没有看这个病的医院，能否推荐一个好一点的医院给我？如果需要手术，我也愿意尝试，只希望能尽快解决这个痛苦。谢谢！</p><p><strong>HuatuoGPT2:</strong></p><p><img src="https://s2.loli.net/2024/08/05/Zz3GA4PlbIJyaKQ.png" alt="image-20240801104829750.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">很抱歉听到您的病情。大拇指腱鞘炎是一种常见的疾病，主要是由于长期过度使用或者受伤导致的大拇指屈伸肌腱发炎引起的。这种</span><br><span class="line">病症可能会导致手指功能障碍，严重的话可能会影响日常生活和工作。</span><br><span class="line"></span><br><span class="line">在宿州地区，我建议您可以考虑去宿州市人民医院的骨科进行咨询和治疗。他们有专业的医生和设备可以进行相关的检查和治疗。如</span><br><span class="line">果您需要手术，他们也可以为您提供相应的服务。同时，您也可以在在线医疗平台上咨询一些医生，看看他们对您的病情有什么建议</span><br><span class="line">。</span><br><span class="line"></span><br><span class="line">在治疗方面，除了手术之外，还有一些非手术的治疗方法，比如物理疗法、药物治疗等。具体的治疗方案还需要根据您的具体病情来</span><br><span class="line">确定。希望您能早日康复！</span><br></pre></td></tr></table></figure><p><strong>Kimi:</strong></p><p><img src="https://s2.loli.net/2024/08/05/SJVdHAf7U1EikT5.png" alt="image-20240801105048130.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">您好，根据搜索结果，宿州市立医院是宿州地区治疗腱鞘炎排名靠前的医院，它是一家三级甲等综合医院，具有悠久的历史和良好的口碑 。医院有多位擅长骨科疾病的主任医师，例如程银树主任医师，他擅长脊柱常见病、多发病及疑难杂症的诊治，熟练操作人工全髋关节置换术、人工全膝关节置换术以及各类骨科创伤整复内固定手术 。此外，吴健生主任医师和刘体彬主任医师也都在骨科领域有丰富的经验，擅长脊柱、四肢、人工关节置换及小儿畸形的矫正治疗等 。</span><br><span class="line"></span><br><span class="line">如果您考虑手术治疗腱鞘炎，宿州市立医院是一个值得考虑的选择。建议您根据自己的健康需求，选择合适的医生进行进一步的咨询和治疗。您可以通过医院的预约挂号服务或图文问诊、电话咨询服务来了解更多信息和安排就诊 。祝您早日康复。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>我最近出现了一些症状，想向您咨询一下。我站姿或坐姿时脖子后侧感到涨痛，头也涨痛，但是平躺时就没事了。这种情况是怎么回事呢？</p><p><strong>HuatuoGPT2:</strong></p><p><img src="https://s2.loli.net/2024/08/05/5SsJgBOnx19HuTN.png" alt="image-20240801105112242.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，我要澄清一点，我是一个人工智能模型，虽然我可以提供医学知识和建议，但我不能进行实际的诊断和治疗。您的症状可能由</span><br><span class="line">多种原因引起，我会尽力帮助您理解可能的解释和可能的原因。</span><br><span class="line"></span><br><span class="line">根据您的描述，您在站立或坐着时感到脖子后部涨痛，头部也有类似的感觉。这种情况可能是由于颈椎肌肉紧张引起的，这在长时间</span><br><span class="line">保持不良姿势（如坐立不动或使用电脑）的情况下很常见。这可能导致颈部和上背部肌肉的紧张，从而引起疼痛和不适。此外，某些</span><br><span class="line">疾病和状况，如颈椎病、颈部劳损、肌肉痉挛或其他神经系统问题也可能导致类似的症状。</span><br><span class="line"></span><br><span class="line">我建议您：</span><br><span class="line">1. 尝试改变您的坐姿或站姿，避免长时间保持同一姿势；</span><br><span class="line">2. 定期休息和活动身体，以帮助缓解肌肉的紧张；</span><br><span class="line">3. 使用冷热敷疗法来缓解疼痛和不适；</span><br><span class="line">4. 如果症状持续或加重，或者伴有其他严重症状（如麻木、无力等），请尽快就医进行专业评估和治疗。</span><br></pre></td></tr></table></figure><p><strong>Kimi:</strong></p><p><img src="https://s2.loli.net/2024/08/05/kMEqRnFgy6Y4HrK.png" alt="image-20240801105215572.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">您描述的症状可能与多种因素有关，包括但不限于以下几种情况：</span><br><span class="line"></span><br><span class="line">1. **颈椎病**：长时间保持不良姿势，如长时间低头看手机或电脑，可能导致颈椎压力增加，引起脖子和头部的不适。</span><br><span class="line"></span><br><span class="line">2. **肌肉紧张**：颈部和肩部肌肉长时间紧张或疲劳，可能导致肌肉僵硬和疼痛。</span><br><span class="line"></span><br><span class="line">3. **姿势不良**：不正确的坐姿或站姿可能导致颈部和背部肌肉承受额外压力。</span><br><span class="line"></span><br><span class="line">4. **压力或焦虑**：心理压力和焦虑有时会导致肌肉紧张，包括颈部和肩部肌肉。</span><br><span class="line"></span><br><span class="line">5. **眼睛疲劳**：长时间注视屏幕或阅读可能导致眼睛疲劳，进而引起头痛。</span><br><span class="line"></span><br><span class="line">6. **脱水**：脱水有时也会导致头痛。</span><br><span class="line"></span><br><span class="line">7. **睡眠不足**：睡眠不足或睡眠质量差也可能导致头痛和颈部不适。</span><br><span class="line"></span><br><span class="line">8. **其他健康问题**：如高血压、贫血等也可能引起头痛。</span><br><span class="line"></span><br><span class="line">由于我无法提供诊断，建议您咨询医生或专业的医疗人员以获得准确的诊断和治疗建议。在此之前，您可以尝试以下一些缓解措施：</span><br><span class="line"></span><br><span class="line">- 保持良好的姿势，避免长时间保持同一姿势。</span><br><span class="line">- 定期休息并做一些颈部和肩部的伸展运动。</span><br><span class="line">- 确保充足的睡眠。</span><br><span class="line">- 保持适当的水分摄入。</span><br><span class="line">- 如果是眼睛疲劳，尝试每隔一段时间远离屏幕，让眼睛休息。</span><br><span class="line">- 如果症状持续或加重，请及时就医。</span><br><span class="line"></span><br><span class="line">如果您需要更多帮助，比如寻找附近的医疗机构或专家，请随时告诉我。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>我最近出现了尿中有些血的情况，已经持续三天了。我之前做过前列腺增生手术，现在不想再去医院，想在家里保守治疗。您能给我一些建议吗？</p><p><strong>HuatuoGPT2:</strong></p><p><img src="https://s2.loli.net/2024/08/05/XyQL7mSewt9dqal.png" alt="image-20240801105254020.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先，我要提醒您的是，尿液异常可能是身体内部问题的信号，特别是如果伴随其他症状如疼痛、发热等，应及时就医以获得正确的</span><br><span class="line">诊断和治疗。对于您的尿中情况，以下是一些可能的建议：</span><br><span class="line"></span><br><span class="line">1. 多喝水：保持充足的水分摄入有助于稀释尿液，减少刺激尿路的可能性。</span><br><span class="line">2. 饮食调整：避免摄入刺激性食物和饮料，如咖啡、酒精、辛辣食物等，这些可能会加重症状。同时增加摄入纤维丰富的水果和蔬</span><br><span class="line">菜，有助于预防便秘（如果存在）及降低尿路感染的风险。</span><br><span class="line">3. 尿中血尿可能是泌尿系统疾病的表现，例如膀胱炎、肾脏病或前列腺问题。虽然您已经做过前列腺手术，但仍有可能发生复发或</span><br><span class="line">其他问题。因此，我强烈建议您尽快咨询医生以获取专业意见和必要的检查。</span><br><span class="line">4. 在等待就医期间，您可以尝试一些自我护理措施来缓解症状。例如，避免长时间坐立不动，经常进行适量的运动有助于促进血液</span><br><span class="line">循环；注意个人卫生，保持外阴清洁干燥，以减少细菌感染的可能性等。然而，这些只能作为临时缓解的方法，不能替代医生的诊断</span><br><span class="line">和治疗建议。</span><br><span class="line"></span><br><span class="line">请记住，我提供的建议仅供参考，并不能替代专业医疗意见。如果您的尿中血的情况持续存在或加重，或者您有其他不适症状，请尽</span><br><span class="line">快就医寻求专业的医疗帮助。</span><br></pre></td></tr></table></figure><p><strong>Kimi:</strong></p><p><img src="https://s2.loli.net/2024/08/05/w8PkSIDdnj4Rgv6.png" alt="image-20240801105347105.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">尿液中出现血迹（医学上称为血尿）可能是由多种原因引起的，包括但不限于泌尿系统感染、结石、肾脏疾病、前列腺问题等。考虑到您之前做过前列腺增生手术，血尿可能与此有关，但也可能是其他原因引起的。</span><br><span class="line"></span><br><span class="line">**重要提示**：血尿是一个需要医生评估的症状，因为它可能是一些严重疾病的早期信号。尽管您不想去医院，但我强烈建议您至少通过电话或在线咨询的方式联系医生，以确保得到正确的诊断和治疗。</span><br><span class="line"></span><br><span class="line">在您能够联系医生之前，以下是一些建议，可能有助于缓解症状或减少潜在的风险：</span><br><span class="line"></span><br><span class="line">1. **增加水分摄入**：喝足够的水可以帮助冲洗泌尿系统，减少感染的风险，并可能帮助排出小的结石。</span><br><span class="line"></span><br><span class="line">2. **避免刺激性食物和饮料**：咖啡、酒精和辛辣食物可能会刺激泌尿道，应适量减少。</span><br><span class="line"></span><br><span class="line">3. **适当休息**：避免剧烈运动和重体力劳动，减少对泌尿系统的压力。</span><br><span class="line"></span><br><span class="line">4. **观察症状**：记录血尿的情况，包括颜色、频率和任何伴随症状，这有助于医生进行诊断。</span><br><span class="line"></span><br><span class="line">5. **使用非处方止痛药**：如果感到疼痛，可以考虑使用非处方的止痛药，如布洛芬，但请遵循药物说明，并注意不要长期过量使用。</span><br><span class="line"></span><br><span class="line">6. **保持良好的个人卫生**：这有助于减少泌尿系统感染的风险。</span><br><span class="line"></span><br><span class="line">7. **避免性行为**：如果血尿与前列腺有关，性行为可能会加重症状。</span><br><span class="line"></span><br><span class="line">然而，我必须再次强调，血尿是一个需要专业医疗评估的症状。如果血尿持续或伴有其他症状（如发热、腰痛、排尿困难等），您应该尽快就医。请不要忽视这些症状，因为及时的诊断和治疗对于预防并发症非常重要。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>医生您好。我想咨询一下关于我孩子的病情。她现在2岁3个月，几个月前我发现她的膝关节前方出现了一块硬痂，开始以为是皮纹，但是后来越来越硬，并且有凸起的感觉。她没有疼痛或者痒的感觉，也没有外伤史。我想知道这是什么病，是否会扩大，是否需要去医院。谢谢您的帮助！</p><p><strong>HuatuoGPT2:</strong></p><p><img src="https://s2.loli.net/2024/08/05/AcE6FMiuQO3blv8.png" alt="image-20240801105441331.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">您好，根据您的描述，孩子的膝盖部位出现的硬性凸起可能是由于几种情况引起的：</span><br><span class="line"></span><br><span class="line">1. 骨疣（又称为骨瘤或骨质增生）：这是一种常见的良性骨肿瘤，通常在骨骼生长的地方出现，尤其是在膝关节周围。它们通常是</span><br><span class="line">无痛的，可以移动，并且随着时间的推移可能会变大或者变硬。</span><br><span class="line"></span><br><span class="line">2. 滑膜囊肿：这是由于关节内部的液体积聚形成的囊肿。这些囊肿通常不痛，但是可能会导致肿胀和硬度。</span><br><span class="line"></span><br><span class="line">3. 肌腱鞘囊肿：这是一种在肌腱附近出现的肿块，通常是由于滑液积聚引起的。</span><br><span class="line"></span><br><span class="line">4. 骨刺或骨质增生：这可能是由于骨骼的过度使用或者磨损引起的。</span><br><span class="line"></span><br><span class="line">要确定具体的病因，最好的做法是带孩子去医院进行检查。医生可能会建议进行X光检查或者其他影像学检查来确定肿块的性质和大</span><br><span class="line">小。如果需要的话，可能还会建议进行活检以进一步确定诊断。</span><br><span class="line"></span><br><span class="line">如果肿块没有引起任何症状（如疼痛、肿胀或活动受限）并且没有继续增大，那么可能不需要立即进行治疗。但是，我建议您带孩子</span><br><span class="line">去医院进行检查，以确保没有其他潜在的问题。同时，也可以让孩子避免在肿块上施加过多的压力或者摩擦，以防止进一步的损伤或</span><br><span class="line">者炎症。</span><br></pre></td></tr></table></figure><p><strong>Kimi:</strong></p><p><img src="https://s2.loli.net/2024/08/05/MyZUbLpRJsIjr83.png" alt="image-20240801111946130.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">您好，根据您描述的情况，孩子膝关节前方出现的硬痂可能有多种原因，包括但不限于以下几种可能性：</span><br><span class="line"></span><br><span class="line">1. **骨软骨瘤**：这是一种良性骨肿瘤，通常表现为骨表面出现的硬性突起，可能随着时间慢慢增大。</span><br><span class="line"></span><br><span class="line">2. **骨质增生**：在某些情况下，骨质可能异常增生，形成硬结。</span><br><span class="line"></span><br><span class="line">3. **皮肤病变**：某些皮肤病也可能在关节附近形成硬痂或结节。</span><br><span class="line"></span><br><span class="line">4. **囊肿**：如腱鞘囊肿，可能在关节附近形成肿块。</span><br><span class="line"></span><br><span class="line">5. **其他原因**：包括某些感染或炎症性疾病。</span><br><span class="line"></span><br><span class="line">由于硬痂没有疼痛或瘙痒，孩子可能不会表现出不适，但这并不意味着不需要关注。随着时间的推移，如果硬痂继续增大或出现其他症状，可能需要进一步的评估。</span><br><span class="line"></span><br><span class="line">**建议**：</span><br><span class="line"></span><br><span class="line">- **观察**：注意硬痂是否有变化，如大小、形状、颜色或是否出现疼痛、红肿等症状。</span><br><span class="line">- **记录**：记录硬痂的变化情况，包括任何新出现的症状。</span><br><span class="line">- **咨询医生**：尽管您可能不想立即去医院，但考虑到硬痂的性质和可能的增长，建议您至少通过电话或在线咨询的方式联系儿科医生或骨科医生，以获得专业意见。</span><br><span class="line">- **必要时就医**：如果硬痂有任何变化或您感到担忧，应该带孩子去医院进行进一步的检查，可能包括X光、超声或其他影像学检查，以确定硬痂的性质。</span><br><span class="line"></span><br><span class="line">请记住，我提供的信息不能代替专业医疗建议。孩子的健康非常重要，因此及时的评估和适当的医疗干预是非常关键的。希望孩子能够尽快得到正确的诊断和治疗。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HuatuoGPT2 </tag>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端微服务-programmer-club项目的设计与实现心得</title>
      <link href="/2024/07/21/2024-07-21-%E5%90%8E%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1-programmer-club%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%BF%83%E5%BE%97/"/>
      <url>/2024/07/21/2024-07-21-%E5%90%8E%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1-programmer-club%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="后端微服务-programmer-club项目的设计与实现心得"><a href="#后端微服务-programmer-club项目的设计与实现心得" class="headerlink" title="后端微服务-programmer-club项目的设计与实现心得"></a>后端微服务-programmer-club项目的设计与实现心得</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>后端：IDEA</p><p>前端：VSCode</p><p>项目管理：git</p><p>包依赖管理：Maven3.6.0</p><p>数据库：Mysql5.7</p><p>数据库连接池和监控库：Druid</p><p>框架：Springboot 2.4.2</p><p>数据库图形化：Navicat</p><p>接口管理工具：APIPost7</p><p>Redis桌面工具：RedisDesktop</p><p>表建模：PDManager</p><p>原型设计：axure8</p><p>原型组件库: antdesign</p><p>代码生成器：easycode（idea的plugin市场）</p><p>一些插件：mybatis（类-&gt;dao-&gt;数据库），easycode（由数据库表生成相应代码）, preconditions（参数校验）</p><p>node.js</p><p>阿里云脚手架用于组件&#x2F;版本的选择兼容，非常方便: <a href="">start.aliyun.com</a></p><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="传统项目"><a href="#传统项目" class="headerlink" title="传统项目"></a>传统项目</h3><p>[SpringMVC框架（详解）-CSDN博客](<a href="https://blog.csdn.net/H20031011/article/details/131511482?ops_request_misc=%7B%22request_id%22:%22172145077916800222810035%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172145077916800222810035&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131511482-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring">https://blog.csdn.net/H20031011/article/details/131511482?ops_request_misc=%7B%22request%5Fid%22%3A%22172145077916800222810035%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172145077916800222810035&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131511482-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring</a> mvc架构&amp;spm&#x3D;1018.2226.3001.4187)</p><p>一般的mvc：model，view，controller</p><p>SpringMVC：controller(view+controller)，service（业务逻辑），dao（数据库）</p><p><img src="https://s2.loli.net/2024/07/10/IkmcCyEaiVK8jvT.png" alt="image-20240710175347652.png"></p><p><img src="https://s2.loli.net/2024/07/20/4xSwLQAW6PBKqYI.png" alt="image-20240720125604514.png"></p><h3 id="现有的架构"><a href="#现有的架构" class="headerlink" title="现有的架构"></a>现有的架构</h3><p><a href="https://blog.csdn.net/qq_49619863/article/details/127836283?ops_request_misc=%7B%22request_id%22:%22172060612716800222827668%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172060612716800222827668&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127836283-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ddd%E6%9E%B6%E6%9E%84&spm=1018.2226.3001.4187">DDD架构-CSDN博客</a></p><p>[浅谈架构设计：MVC架构与DDD架构【开发实践】_ddd架构和mvc架构区别-CSDN博客](<a href="https://blog.csdn.net/qq_40656637/article/details/137344153?ops_request_misc=%7B%22request_id%22:%22172145093416800184184571%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172145093416800184184571&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-137344153-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring">https://blog.csdn.net/qq_40656637/article/details/137344153?ops_request_misc=%7B%22request%5Fid%22%3A%22172145093416800184184571%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172145093416800184184571&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-137344153-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring</a> mvc架构和ddd架构&amp;spm&#x3D;1018.2226.3001.4187)</p><p>ddd 架构</p><p><img src="https://s2.loli.net/2024/07/10/6L8j9VMkRHxWOga.png" alt="cbc3530efc1e41d6b6a94455d804d3d3[1].png"></p><ul><li>用户接口层（User Interface ）：负责向用户显示信息和解释用户指令（是DDD架构中的表现层）（表现层是视图层的超集，概念有所区别，知道最上层就是表现层即可）</li><li>应用层（Application）：很“薄”的一层，理论上不应该有业务规则或逻辑，主要面向用例和流程相关的操作。在应用层协调多个服务和领域对象完成服务的组合和编排，协作完成业务操作。此外，应用层也是微服务之间交互的通道，它可以调用其它微服务的应用服务，完成微服务之间服务的组合和编排</li><li>领域层（Domain）：是实现企业核心业务逻辑，通过各种校验手段保证业务的正确性。领域层主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。领域层包含聚合根、实体、值对象、领域服务等领域模型中的领域对象</li><li>基础层（Infrastructure）：贯穿所有层，为其它层提供通用的技术和基础服务，包括第三方工具、驱动、消息中间件、网关、文件、缓存以及数据库等</li><li>个人理解：将service层拆分为了应用层和领域层。其中应用层关注于用例和流程，不涉及业务规则或逻辑，通过组合和编排下层的领域层来完成业务操作。而领域层用于封装具体的业务规则或逻辑，拆分出来的领域层不再和具体流程关联，实现了高内聚和低耦合，还提高了领域层的可复用性。用户接口层和基础层则为原来的视图层和dao层的扩展，新增了部分职责功能。</li></ul><p><img src="https://s2.loli.net/2024/07/10/eTX5pdGHV3OrFIB.png" alt="image-20240710175452746.png"></p><ol><li><p><strong>API（对外接口层）</strong>：这一层负责定义对外提供的服务接口，通常用于与客户端或其他服务进行交互。</p></li><li><p><strong>Controller</strong>：在传统的MVC架构中，控制器用于处理用户的请求。在这里，它用于接收API层的请求，并将请求转换为应用层可以理解的格式。</p></li><li><p><strong>DTO（Data Transfer Object）</strong>：</p><p>代表数据传输对象的意思</p><p>是一种设计模式之间传输数据的软件应用系统，数据传输目标往往是数据访问对象从数据库中检索数据</p><p>数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具任何行为除了存储和检索的数据（访问和存取器）</p><p>简而言之，就是<strong>接口之间传递的数据封装</strong></p><p>表里面有十几个字段：id，name，gender（M&#x2F;F)，age……</p><p>页面需要展示三个字段：name，gender(男&#x2F;女)，age</p><p>DTO由此产生，一是能提高数据传输的速度(减少了传输字段)，二能隐藏后端表结构。</p></li><li><p><strong>BO（Business Object）</strong>：</p><p>代表业务对象的意思，Bo就是把业务逻辑封装为一个对象（注意是逻辑，业务逻辑），这个对象可以包括一个或多个其它的对象。通过调用Dao方法，结合Po或Vo进行业务操作。</p><p>形象描述为一个对象的形为和动作，当然也有涉及到基它对象的一些形为和动作。比如处理一个人的业务逻辑，该人会睡觉，吃饭，工作，上班等等行为，还有可能和别人发关系的行为，处理这样的业务逻辑时，我们就可以针对BO去处理。</p><p>再比如投保人是一个PO，被保险人是一个PO，险种信息也是一个PO等等，他们组合起来就是一张保单的BO。</p></li><li><p><strong>PO&#x2F;DO: Persistent Object &#x2F; Data Object，持久对象 &#x2F; 数据对象。</strong></p><p>它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p></li><li><p><strong>VO: View Object, 视图模型，展示层对象</strong>:</p><p>对应页面显示（web页面&#x2F;移动端H5&#x2F;Native视图）的数据对象。</p></li><li><p><strong>Application层（应用层）</strong>：这一层包含应用服务，它们协调领域对象来完成业务逻辑。它还包含一些业务逻辑的转换逻辑，如DTO到BO的转换。</p></li><li><p><strong>Interceptor</strong>：拦截器，用于在请求处理过程中进行一些前置或后置处理，例如日志记录、权限验证等。</p></li><li><p><strong>Application-MQ（消费者）&#x2F; Application-Job</strong>：这指的是应用层中处理消息队列消息的组件，或者定时任务的处理。</p></li><li><p><strong>Domain层（领域层）</strong>：这是DDD中的核心层，包含业务逻辑和领域模型。领域层专注于业务规则和业务实体。</p></li><li><p><strong>Service</strong>：领域服务，执行领域逻辑但不自然属于任何实体或值对象的操作。</p></li><li><p><strong>Entity&#x2F;PO（Persistent Object）</strong>：持久化对象，通常与数据库存储相关，代表数据库中的记录。</p></li><li><p><strong>Mapper</strong>：数据访问对象，用于将领域对象映射到数据库表。</p></li><li><p><strong>Infra层（基础设施层）</strong>：提供技术实现，如数据库访问、消息传递、外部服务调用等。</p></li><li><p><strong>RPC</strong>：远程过程调用，用于服务之间的通信。</p></li><li><p><strong>MG（生产者）</strong>：指的是消息生成者，负责生成并发送消息到消息队列。</p></li><li><p><strong>Starter（启动层）</strong>：指的是服务启动时需要自动执行的代码或配置。</p></li><li><p><strong>Aggressive（聚合层）</strong>：聚合层，将多个领域对象聚合成一个更大的业务实体。</p></li><li><p><strong>Config</strong>：配置层，用于存储和访问配置信息。</p></li><li><p><strong>Dict（字典）</strong>：指的是数据字典，用于存储一些固定的数据或映射关系。</p></li><li><p><strong>Common（公共层）</strong>：包含整个应用中多个地方会用到的通用代码或工具。</p></li><li><p><strong>Enums</strong>：枚举，用于定义一组命名的常量。</p></li><li><p><strong>Utils</strong>：工具类，提供一些通用的辅助功能。</p></li></ol><p>req-&gt;dto-&gt;do-&gt;bo-&gt;entity-&gt;po</p><p><img src="https://s2.loli.net/2024/07/10/vcwy8WMZKz7pNSe.jpg" alt="UBWaSonlxTkZyGs[1].jpg"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://s2.loli.net/2024/07/17/YwcR1HeWvrqD72s.png" alt="image-20240717163452115.png"></p><h4 id="后端项目目录（backend）"><a href="#后端项目目录（backend）" class="headerlink" title="后端项目目录（backend）"></a>后端项目目录（backend）</h4><ul><li><p><strong>asyncTool</strong>: 包含异步处理工具或库，用于处理异步任务。</p></li><li><p><strong>doc</strong>: 存放项目文档，如API文档、技术规范等。</p></li><li><p><strong>jc-club-auth</strong>: 认证服务，负责用户认证和授权。</p></li><li><p><strong>jc-club-circle</strong>: 可能与社区圈子或用户组相关功能。</p></li><li><p><strong>jc-club-common-starter</strong>: 通用启动器或工具类，提供项目通用功能。</p></li><li><p><strong>jc-club-gateway</strong>: 网关服务，负责请求路由、负载均衡等。</p></li><li><p><strong>jc-club-gen</strong>: 代码生成工具，可能用于快速生成项目代码。</p></li><li><p><strong>jc-club-interview</strong>: 面试相关功能，可能包含面试题库或模拟面试。</p></li><li><p><strong>jc-club-oss</strong>: 对象存储服务，用于管理文件存储。</p><ul><li><a href="https://blog.csdn.net/Java_Mr_Jin/article/details/125643455?ops_request_misc=%7B%22request_id%22:%22172205057816800211579712%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172205057816800211579712&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125643455-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=minio&spm=1018.2226.3001.4187">minio安装部署及使用-CSDN博客</a></li></ul></li><li><p><strong>jc-club-practice</strong>: 实践项目或示例代码。</p></li><li><p><strong>jc-club-subject</strong>: 主题或课程相关功能，可能用于教育或培训。</p></li><li><p><strong>jc-club-wx</strong>: 微信相关功能，可能包含微信公众号接口或小程序支持。</p></li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>[Spring和Spring Boot之间的区别（小结）_spring和springboot的区别-CSDN博客](<a href="https://blog.csdn.net/mengxin_chen/article/details/116240326?ops_request_misc=%7B%22request_id%22:%22172145220016800227442776%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172145220016800227442776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116240326-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring%E5%92%8Cspring">https://blog.csdn.net/mengxin_chen/article/details/116240326?ops_request_misc=%7B%22request%5Fid%22%3A%22172145220016800227442776%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172145220016800227442776&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116240326-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring和spring</a> boot区别&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="https://s2.loli.net/2024/07/10/SRyfeJV49ksGvNl.png" alt="image-20240710163626898.png"></p><h2 id="SpringBoot相关"><a href="#SpringBoot相关" class="headerlink" title="SpringBoot相关"></a>SpringBoot相关</h2><h3 id="SpringBoot注解"><a href="#SpringBoot注解" class="headerlink" title="SpringBoot注解"></a>SpringBoot注解</h3><p><a href="https://blog.csdn.net/weixin_45797022/article/details/120896184?ops_request_misc=%7B%22request_id%22:%22172161940916800222815761%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172161940916800222815761&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120896184-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=autowired&spm=1018.2226.3001.4187">@Autowired用法详解-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_28289405/article/details/82185676?ops_request_misc=%7B%22request_id%22:%22172161976516800227461344%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172161976516800227461344&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82185676-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=RestController%E6%B3%A8%E8%A7%A3&spm=1018.2226.3001.4187">@RestController 注解_@restcontroller注解-CSDN博客</a></p><p>Mybatis:<a href="https://blog.csdn.net/weixin_46369022/article/details/122755858?ops_request_misc=%7B%22request_id%22:%22172162002416800178517757%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172162002416800178517757&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-122755858-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@Mapper%E6%B3%A8%E8%A7%A3&spm=1018.2226.3001.4187">@Mapper注解-CSDN博客</a> 给Dao用的</p><p>mapstruct：[MAPSTRUCT(@Mapper用法)_org.mapstruct.mapper maven-CSDN博客](<a href="https://blog.csdn.net/qq_43459184/article/details/103372740?ops_request_misc=%7B%22request_id%22:%22172259704016800180642299%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172259704016800180642299&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-103372740-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mapstruct">https://blog.csdn.net/qq_43459184/article/details/103372740?ops_request_misc=%7B%22request%5Fid%22%3A%22172259704016800180642299%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172259704016800180642299&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-103372740-null-null.142^v100^pc_search_result_base8&amp;utm_term=mapstruct</a> @mapper&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/weixin_47872288/article/details/138509834?ops_request_misc=%7B%22request_id%22:%22172162036516800226577013%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172162036516800226577013&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-138509834-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@Service%E6%B3%A8%E8%A7%A3&spm=1018.2226.3001.4187">详细分析Java中的@Service注解-CSDN博客</a></p><p>[介绍@Component，@Bean，@service，@Autowire 和 @Resource等_@service @bean-CSDN博客](<a href="https://blog.csdn.net/weixin_38002126/article/details/122977500?ops_request_misc=%7B%22request_id%22:%22172162091816800186516004%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172162091816800186516004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122977500-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@service%E5%92%8C@component">https://blog.csdn.net/weixin_38002126/article/details/122977500?ops_request_misc=%7B%22request%5Fid%22%3A%22172162091816800186516004%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172162091816800186516004&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122977500-null-null.142^v100^pc_search_result_base8&amp;utm_term=@service和@component</a> @bean @a&amp;spm&#x3D;1018.2226.3001.4187)</p><h3 id="SpringBoot-ioc-aop"><a href="#SpringBoot-ioc-aop" class="headerlink" title="SpringBoot ioc aop"></a>SpringBoot ioc aop</h3><p>[深入理解Spring两大特性：IoC和AOP-CSDN博客](<a href="https://blog.csdn.net/dkbnull/article/details/87219562?ops_request_misc=%7B%22request_id%22:%22172243396116800182129949%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172243396116800182129949&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-87219562-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=SPRING">https://blog.csdn.net/dkbnull/article/details/87219562?ops_request_misc=%7B%22request%5Fid%22%3A%22172243396116800182129949%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172243396116800182129949&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-87219562-null-null.142^v100^pc_search_result_base8&amp;utm_term=SPRING</a> BOOT AOP ioc&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/u013190145/article/details/109171013?ops_request_misc=%7B%22request_id%22:%22172243433616800213010408%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172243433616800213010408&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109171013-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E8%BF%9E%E6%8E%A5%E7%82%B9%E5%92%8C%E5%88%87%E5%85%A5%E7%82%B9%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">AOP的连接点与切点区别，连接点，切点，切面的基础概念_aop连接点-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_42649617/article/details/109997718?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%BF%9E%E6%8E%A5%E7%82%B9%E5%92%8C%E5%88%87%E5%85%A5%E7%82%B9%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109997718.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">Spring AOP术语：连接点和切点的区别。_切入点 连接点 区别-CSDN博客</a></p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p><a href="https://blog.csdn.net/Bb15070047748/article/details/107188167/?ops_request_misc=&request_id=&biz_id=102&utm_term=&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase&spm=1018.2226.3001.4187#{}&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase">彻底搞懂MyBaits中#{}和${}的区别_mybatis #{}-CSDN博客</a></p><p>[mybatis中resultMap的理解_result map-CSDN博客](<a href="https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request_id%22:%22172259150816800178584486%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172259150816800178584486&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatic">https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request%5Fid%22%3A%22172259150816800178584486%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172259150816800178584486&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatic</a> resultmap&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/libusi001/article/details/134155913?ops_request_misc=&request_id=&biz_id=102&utm_term=mybatis%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-134155913.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">【Mybatis】xml常用总结（持续更新）_mybatis xml-CSDN博客</a></p><p>[SpringBoot+MyBatis项目Dao层最简单写法_springboot dao层怎么写-CSDN博客](<a href="https://blog.csdn.net/iiiliuyang/article/details/104162463?ops_request_misc=&request_id=&biz_id=102&utm_term=springboot">https://blog.csdn.net/iiiliuyang/article/details/104162463?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=springboot</a> dao.xml写法&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-2-104162463.142^v100^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[Spring Boot专栏六：在Dao.xml文件中写Mybatis语句_springboot dao xml-CSDN博客](<a href="https://blog.csdn.net/DTDanteDong/article/details/112606910?ops_request_misc=%7B%22request_id%22:%22172243518216800222895850%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172243518216800222895850&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-112606910-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=springboot">https://blog.csdn.net/DTDanteDong/article/details/112606910?ops_request_misc=%7B%22request%5Fid%22%3A%22172243518216800222895850%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172243518216800222895850&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-112606910-null-null.142^v100^pc_search_result_base8&amp;utm_term=springboot</a> dao.xml写法&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[Mybatis中动态Sql的if、for和foreach使用_mybatis foreach if open-CSDN博客](<a href="https://blog.csdn.net/wflsyf/article/details/112984282?ops_request_misc=%7B%22request_id%22:%22172259182216800226531598%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172259182216800226531598&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-112984282-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatis">https://blog.csdn.net/wflsyf/article/details/112984282?ops_request_misc=%7B%22request%5Fid%22%3A%22172259182216800226531598%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172259182216800226531598&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-112984282-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatis</a> if test foreach&amp;spm&#x3D;1018.2226.3001.4187)</p><p>dao的接口放在mapper包下，在启动类前要加@MapperScan(“com.**.mapper”)，便于发现：<a href="https://blog.csdn.net/zzxcvbnm19/article/details/103275920?ops_request_misc=%7B%22request_id%22:%22172259218016800226519050%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172259218016800226519050&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-103275920-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mapperscan%E5%92%8Cdao&spm=1018.2226.3001.4187">blog.csdn.net&#x2F;zzxcvbnm19&#x2F;article&#x2F;details&#x2F;103275920?ops_request_misc&#x3D;%257B%2522request%255Fid%2522%253A%2522172259218016800226519050%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id&#x3D;172259218016800226519050&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>first_rank_ecpm_v1~rank_v31_ecpm-1-103275920-null-null.142^v100^pc_search_result_base8&amp;utm_term&#x3D;mapperscan和dao&amp;spm&#x3D;1018.2226.3001.4187</a></p><p>[spring和Mybatis中的拦截器_mybatis handlerinterceptor-CSDN博客](<a href="https://blog.csdn.net/qq_59612674/article/details/121027506?ops_request_misc=%7B%22request_id%22:%22172388427716800178552460%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172388427716800178552460&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-121027506-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatis">https://blog.csdn.net/qq_59612674/article/details/121027506?ops_request_misc=%7B%22request%5Fid%22%3A%22172388427716800178552460%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172388427716800178552460&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-121027506-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatis</a> innovation&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="Java相关"><a href="#Java相关" class="headerlink" title="Java相关"></a>Java相关</h2><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>[讲透JAVA Stream的collect用法与原理，远比你想象的更强大_stream.collection-CSDN博客](<a href="https://blog.csdn.net/veezean/article/details/125857074?ops_request_misc=%7B%22request_id%22:%22172258578116800227423214%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258578116800227423214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125857074-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Java">https://blog.csdn.net/veezean/article/details/125857074?ops_request_misc=%7B%22request%5Fid%22%3A%22172258578116800227423214%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172258578116800227423214&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125857074-null-null.142^v100^pc_search_result_base8&amp;utm_term=Java</a> stream collect&amp;spm&#x3D;1018.2226.3001.4187)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建缓存key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">buildKey</span><span class="params">(String... strObjs)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(strObjs).collect(Collectors.joining(CACHE_KEY_SEPARATOR));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Java–Stream流详解_java stream-CSDN博客](<a href="https://blog.csdn.net/MinggeQingchun/article/details/123184273?ops_request_misc=%7B%22request_id%22:%22172258592916800182196501%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258592916800182196501&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123184273-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Java">https://blog.csdn.net/MinggeQingchun/article/details/123184273?ops_request_misc=%7B%22request%5Fid%22%3A%22172258592916800182196501%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172258592916800182196501&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123184273-null-null.142^v100^pc_search_result_base8&amp;utm_term=Java</a> stream流&amp;spm&#x3D;1018.2226.3001.4187)</p><p>stream的创建：</p><ol><li>Stream.of(1,2,3,4)    （这里面的1,2,3,4其实是Array的类型）</li><li>list.stream()</li></ol><p>操作符</p><ol><li>中间操作符<ol><li>filter：用于过滤 <ul><li>list.stream().filter(number-&gt;number&gt;&#x3D;2).collect(Collectors.toList());</li></ul></li><li>map：用于映射 <ul><li>list.stream().(str-&gt;str+”-IT”).collect(Collectors.toList());</li></ul></li><li>dinstinct:  用于去重 <ul><li>numbers.stream().filter(i -&gt; i % 2 &#x3D;&#x3D; 0).distinct().forEach(System.out::println);<a href="https://blog.csdn.net/qq_36929361/article/details/84926277?ops_request_misc=%7B%22request_id%22:%22172258713216800188592335%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258713216800188592335&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-84926277-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=System.out::println&spm=1018.2226.3001.4187&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT1TeXN0ZW0ub3V0JTNBJTNBcHJpbnRsbiZ0PSZ1PSZ1cnc9">教你看懂System.out::println-CSDN博客</a></li></ul></li><li>sorted: 用于排序  <ul><li>strings1.stream().sorted().collect(Collectors.toList());</li></ul></li></ol></li><li>终端操作符<ol><li>collect: 收集器，将流转换为其他形式 <ul><li>strings.stream().collect(Collectors.toSet()); </li><li>strings.stream().collect(Collectors.toList());</li></ul></li><li>forEach:遍历流<ul><li>strings.stream().forEach(s -&gt; out.println(s));</li></ul></li></ol></li></ol><h3 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h3><p><a href="https://blog.csdn.net/m0_64102491/article/details/127272988?ops_request_misc=%7B%22request_id%22:%22172258673416800213030674%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258673416800213030674&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127272988-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDEuMjEwMS4zMDAxLjQ0OTgmcT1sYW1kYSVFOCVBMSVBOCVFOCVCRSVCRSVFNSVCQyU4RiZ0PSZ1PQ==">Lambda表达式详解_lamda表达式-CSDN博客</a></p><p>形如以下：</p><blockquote><p>(o1,o2) -&gt; Integer.compare(o1,o2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左边-&gt;右边</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>-&gt;</code> 被称为lambda操作符或箭头操作符</li><li><code>左边</code>：lambda形参列表（其实就是接口中的抽象方法的形参列表）</li><li><code>右边</code>：lambda体 （其实就是重写的抽象方法的方法体）</li></ul><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>[java线程池（简单易懂）-CSDN博客](<a href="https://blog.csdn.net/qq_64680177/article/details/131445798?ops_request_misc=%7B%22request_id%22:%22172277205216800186576272%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172277205216800186576272&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-131445798-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=java%E7%BA%BF%E7%A8%8B%E6%B1%A0">https://blog.csdn.net/qq_64680177/article/details/131445798?ops_request_misc=%7B%22request%5Fid%22%3A%22172277205216800186576272%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172277205216800186576272&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-131445798-null-null.142^v100^pc_search_result_base8&amp;utm_term=java线程池</a> 简单易懂&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/zhaofuqiangmycomm/article/details/83029165?ops_request_misc=%7B%22request_id%22:%22172277227416800182718329%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172277227416800182718329&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-83029165-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=newCachedThreadPool&spm=1018.2226.3001.4187">Java四种线程池newCachedThreadPool,newFixedThreadPool,newScheduledThreadPool,newSingle-CSDN博客</a></p><p><a href="https://blog.csdn.net/leilei1366615/article/details/131330243?ops_request_misc=%7B%22request_id%22:%22172277262116800222879851%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172277262116800222879851&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-131330243-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BA%BF%E7%A8%8B%E6%B1%A0submit%E5%92%8Cexcute&spm=1018.2226.3001.4187">JAVA线程池submit详解 ，execute和submit提交任务的区别_executor.submit-CSDN博客</a></p><p>继承的ExecutorService接口</p><ul><li><p><strong>newCachedThreadPool</strong>（没有上限的线程池），如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><ul><li><pre><code class="java">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();cachedThreadPool.execute(new Runnable()&#123;    @Override    public void run() &#123;        System.out.println(&quot;执行线程任务&quot;);&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **newFixdedThreadPool**（有上限的线程池），创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);</span><br><span class="line">    fixedThreadPool.execute(new Runnable()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(&quot;执行线程任务&quot;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>newScheduledThreadPool</strong>，创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p><ul><li><pre><code class="java">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);scheduledThreadPool.schedule(new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(&quot;delay 3 seconds&quot;);    &#125;&#125;, 3, TimeUnit.SECONDS);//延迟三秒执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **newSingleThreadExecutor**，创建一个**单线程化**的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</span><br><span class="line"></span><br><span class="line">- **ThreadPoolExecutor**（自定义创建线程池）</span><br><span class="line"></span><br><span class="line">  - 它最长的构造方法有七个参数。</span><br><span class="line"></span><br><span class="line">    1. 核心线程数量——在线程池当中无论空闲多久都不会被删除的线程</span><br><span class="line">    2. 线程池当中最大的线程数量——线程池当中最大能创建的线程数量</span><br><span class="line">    3. 空闲时间（数值）——临时线程（线程池中出核心线程之外的线程）空闲了多久就会被淘汰的时间。</span><br><span class="line">    4. 空闲时间（单位）——临时线程空闲了多久就会被淘汰的时间单位，要用枚举类TimeUnit类作为参数</span><br><span class="line">    5. 阻塞队列——就是创建一个阻塞队列作为参数传入，就是当线程池当中线程数量已经达到了最大线程数量，允许多少个任务排队获取线程，其余的用参数七那个方案来处理。</span><br><span class="line">    6. 创建线程的方式——不是new一个线程，而是传入一个线程工厂（例如：Executors工具类中的defaultThreadFactory方法返回的就是一个线程工厂）</span><br><span class="line">    7. 要执行的任务过多时的解决方案——当等待队列中也排满时要怎么处理这些任务(任务拒绝策略)</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    </span><br><span class="line">    //代码实现</span><br><span class="line">       /**</span><br><span class="line">         * 之前用工具类进行创建，有好多参数不能自己设置</span><br><span class="line">         * 咱直接自己手动创建一个线程池，自己设置参数</span><br><span class="line">         * 参数一：核心线程数量                           不能小于0</span><br><span class="line">         * 参数二：最大线程数                             不能小于0，数值大于等于核心线程数量</span><br><span class="line">         * 参数三：空闲临时线程最大存活时间（数值）           不能小于0</span><br><span class="line">         * 参数四：空闲临时线程最大存活时间（单位）            用TimeUnit这个枚举类表示</span><br><span class="line">         * 参数五：任务队列，也就是一个堵塞队列               不能为null</span><br><span class="line">         * 参数六:创建线程的工厂                            不能为null</span><br><span class="line">         * 参数七：任务的拒绝策略                             不能为null</span><br><span class="line">         */</span><br><span class="line">     ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(</span><br><span class="line">            3,  // 核心线程数量</span><br><span class="line">            6,              //最大线程数</span><br><span class="line">            60,             //空闲临时线程最大存活时间（数值）</span><br><span class="line">            TimeUnit.SECONDS,//空闲临时线程最大存活时间（单位）</span><br><span class="line">            new ArrayBlockingQueue&lt;&gt;(3),//任务队列，也就是一个堵塞队列，也可以使用LinkedBlockingQueue这个阻塞队列</span><br><span class="line">            Executors.defaultThreadFactory(),//用线程池工具类Executors创建线程的工厂</span><br><span class="line">            new ThreadPoolExecutor.AbortPolicy()//任务的拒绝策略中其中一个，丢弃任务并抛出RejectedExecutionException</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>![image-20240804205131842.png](https://s2.loli.net/2024/08/04/fTsqWtGjBRbrVxS.png)</code></pre></li></ul></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><a href="https://blog.csdn.net/qq_31129841/article/details/134800508?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E9%94%81&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-134800508.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">Java中涉及到的锁_java的锁-CSDN博客</a></p><p><a href="https://blog.csdn.net/w8y56f/article/details/89554060?ops_request_misc=%7B%22request_id%22:%226AC14F77-B54A-40E2-BC9B-B5E43E80DDE1%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=6AC14F77-B54A-40E2-BC9B-B5E43E80DDE1&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89554060-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81&spm=1018.2226.3001.4187">可重入锁详解（什么是可重入）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_15002323/article/details/78299615?ops_request_misc=%7B%22request_id%22:%22189C86F7-3A36-4590-84CA-80D0EE05EA8B%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=189C86F7-3A36-4590-84CA-80D0EE05EA8B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-78299615-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=synchronized%E5%92%8Cwait&spm=1018.2226.3001.4187">浅谈synchronized、wait、notify和notifyAll_synchronized,wait,notify-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45795744/article/details/123493673?ops_request_misc=%7B%22request_id%22:%22757F3D0D-BE29-47FB-B090-2CC888215371%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=757F3D0D-BE29-47FB-B090-2CC888215371&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123493673-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=java%E9%94%81%E5%8D%87%E7%BA%A7&spm=1018.2226.3001.4187">Java中的锁升级_java 锁升级-CSDN博客</a></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><a href="https://blog.csdn.net/promsing/article/details/112793260?ops_request_misc=%7B%22request_id%22:%22172278251216800227438114%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172278251216800227438114&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112793260-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E5%8F%B2%E4%B8%8A%E8%B6%85%E5%BC%BA%E6%9C%80%E5%B8%B8%E7%94%A8sql&spm=1018.2226.3001.4187">史上超强最常用SQL语句大全-CSDN博客</a></p><p><a href="https://www.cnblogs.com/blogtech/p/18006730">mysql数据库–行级锁，间隙锁和临键锁详解 - 菜鸟的奋斗之路 - 博客园 (cnblogs.com)</a></p><h2 id="开发启示："><a href="#开发启示：" class="headerlink" title="开发启示："></a>开发启示：</h2><p>日志是log4j+slf4j：<a href="https://blog.csdn.net/madness1010/article/details/128332275?ops_request_misc=%7B%22request_id%22:%22172161994516800178531628%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172161994516800178531628&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-128332275-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=slf4j%E5%92%8Clog4j%E5%92%8Clogback%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">最通俗易懂的 JAVA slf4j,log4j,log4j2,logback 关系与区别以及完整集成案例_slf4j log4j2-CSDN博客</a></p><p>druid用于控制数据库连接池等配置，可以生成公钥来对数据库密码加密</p><p>navicat连MySQL</p><p>eazycode是在利用idea与数据库连接后点击具体的表生成的相关的代码，<code>template</code>选择<code>mapper.xml.vm, dao.java.vm, entity.java.vm, service.java.vm, serviceImpl.java.vm</code></p><p>Controller层是访问的入口，其需要<code>@RestController</code>注解，可以将返回结果以正确的形式呈现；然后在每个接口(add,delete等)，使用<code>@RestMapping</code>注解，将正确的路由映射。</p><p>DTO-&gt;BO的BO-&gt;实际类的转换的converter是接口+mapstruct的<code>@Mapper</code>实现的，要进行convert时记得在converter前加@Mapper ：[Mapstruct @Mapper @Mapping 使用介绍以及总结-CSDN博客](<a href="https://blog.csdn.net/weixin_44131922/article/details/126232977?ops_request_misc=%7B%22request_id%22:%22172163217516800227461233%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172163217516800227461233&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-11-126232977-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@mapper">https://blog.csdn.net/weixin_44131922/article/details/126232977?ops_request_misc=%7B%22request%5Fid%22%3A%22172163217516800227461233%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172163217516800227461233&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-11-126232977-null-null.142^v100^pc_search_result_base8&amp;utm_term=@mapper</a> convert&amp;spm&#x3D;1018.2226.3001.4187)</p><ul><li>用于各个对象实体间的相互转换，例如数据库底层实体 转为页面对象，Model 转为 DTO（data transfer object 数据转换实体）, DTO 转为其他中间对象， VO 等等，相关转换代码为编译时自动产生的新文件和代码。</li><li>MapStruct会根据源对象和目标对象的属性名称进行自动映射。如果需要自定义映射逻辑，可以在接口中定义映射方法或使用配置文件。</li><li>两个对象之间相同属性名的会被自动转换，指定特殊情况时需要通过注解在抽象方法上说明不同属性之间的转换。</li></ul><p><code>domain</code>层的接口和实现是具体的业务，会添加<code>Service</code>注解 ，会用到infra层的接口和实现，也会添加<code>Service</code>注解 </p><p>到infra层的对数据库的实际访问是由dao+dao.xml实现的，在dao.xml中有具体的SQL语句</p><p>controller-&gt;domain serviceImpl-&gt;infra serviceImpl</p><p>在serviceImpl中，变量会使用<code>@Resource</code>注解</p><p>微服务之间的调用：<a href="https://blog.csdn.net/weixin_45863010/article/details/136506796?spm=1001.2014.3001.5502">SpringCloud Feign实现微服务间的远程调用（黑马头条Day04）_feign 远程过程调用-CSDN博客</a></p><p><a href="https://blog.csdn.net/lw_jack/article/details/140419716?ops_request_misc=&request_id=&biz_id=102&utm_term=@EnableFeignClients&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-140419716.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">EnableFeignClients详解-CSDN博客</a></p><h3 id="刷题模块"><a href="#刷题模块" class="headerlink" title="刷题模块"></a>刷题模块</h3><p>对于题目模块（四种题目），共性的可以提出来，不同的就设置handler通过标志位进行判断题目类型（<strong>工厂+策略模式</strong>），进行处理，然后返回结果</p><p>查询题目，分页查询：<a href="https://blog.csdn.net/qq_47900752/article/details/134583693?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-134583693.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">mysql基础 | 10.分页查询、联合查询_mysql分页语句-CSDN博客</a></p><p><strong>SQL拦截器自动翻译（mybatis提供的）</strong>，用于打印展示infra层与数据库的交互，便于发现错误</p><ul><li><p>SqlStatementInterceptor 主要作用是监控MyBatis的SQL执行时间，并根据不同的执行时间记录不同级别的日志</p><p>MybatisPlusAllSqlLog这个类实现了<code>InnerInterceptor</code>接口，它是MyBatis-Plus框架提供的一个内部拦截器接口，用于拦截SQL的执行。这个类有两个主要的重写方法：</p><ul><li><code>beforeQuery</code>: 在查询执行前调用，记录SQL信息。</li><li><code>beforeUpdate</code>: 在更新执行前调用，记录SQL信息。</li></ul></li></ul><p><a href="https://blog.csdn.net/Bb15070047748/article/details/107188167/?ops_request_misc=&request_id=&biz_id=102&utm_term=&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase&spm=1018.2226.3001.4187#{}&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase">彻底搞懂MyBaits中#{}和${}的区别_mybatis #{}-CSDN博客</a></p><p>[mybatis中resultMap的理解_result map-CSDN博客](<a href="https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request_id%22:%22172259150816800178584486%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172259150816800178584486&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatic">https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request%5Fid%22%3A%22172259150816800178584486%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172259150816800178584486&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatic</a> resultmap&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/libusi001/article/details/134155913?ops_request_misc=&request_id=&biz_id=102&utm_term=mybatis%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-134155913.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">【Mybatis】xml常用总结（持续更新）_mybatis xml-CSDN博客</a></p><p>minio模块：controller-&gt;service-&gt;adaper（阿里&#x2F;minio，<strong>适配器模式</strong>，不用工厂＋策略的是因为工厂+策略的传入的参数之类的差不多，所以用适配器）-&gt;具体操作。<strong>nacos 作为配置中心</strong>，可以实现动态配置，适用于比如动态数据源切换，动态切换 oss。<strong>这里要配合<code>RefreshScope</code>注解去使用</strong>，实现动态刷新（minio-&gt;ali）。</p><p>参数校验Preconditions:checkNotNull&#x2F;checkArgument</p><p><a href="https://blog.csdn.net/m0_71777195/article/details/126319418?ops_request_misc=%7B%22request_id%22:%22172205984816800185890242%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172205984816800185890242&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-126319418-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=RefreshScope&spm=1018.2226.3001.4187">一文带你理解@RefreshScope注解实现动态刷新原理-CSDN博客</a></p><p>nacos: 可通过**@Configuration**注解的<code>Storage.java</code>中的<code>@Bean、@RefreshScope</code>注解的storageService方法，在<code>@Value</code>注解拿到配置文件中的值时，会切换适配器的对应的StorageAdapter，拿到minio&#x2F;阿里云的oss服务。</p><p>阿里云脚手架用于组件&#x2F;版本的选择兼容，非常方便: <a href="">start.aliyun.com</a></p><p>分类标签性能优化：<a href="https://blog.csdn.net/qq_45721579/article/details/131384231?ops_request_misc=&request_id=&biz_id=102&utm_term=CompletableFuture.supplyAsync&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-131384231.nonecase&spm=1018.2226.3001.4187">【Java 8 新特性】Java CompletableFuture supplyAsync()详解_completablefuture.supplyasync-CSDN博客</a></p><h3 id="登录鉴权模块"><a href="#登录鉴权模块" class="headerlink" title="登录鉴权模块"></a>登录鉴权模块</h3><p>扫码微信-&gt;微信发送消息到服务器，校验签名确保来自微信（get）-&gt;服务器再把消息进行包装， 通过前缀+验证码（一个随机数）作为redis key，fromUserName(openId)作为value存到redis，并把包含验证码的消息发送到微信-&gt;用户验证码（微信）,从redis拿到openId（即用户名）-&gt;用satoken用openId进行登录，然后利用satoken返回一个token，后续登录就会带上这个token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SaTokenInfo <span class="title function_">doLogin</span><span class="params">(String validCode)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, validCode);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> redisUtil.get(loginKey);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    authUserBO.setUserName(openId);</span><br><span class="line">    <span class="built_in">this</span>.register(authUserBO); <span class="comment">//校验是否存在，存在直接返回，不存在就注册</span></span><br><span class="line">    StpUtil.login(openId);</span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">    <span class="keyword">return</span> tokenInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://sa-token.cc/doc.html#/?id=sa-token-%E5%8A%9F%E8%83%BD%E4%B8%80%E8%A7%88">Sa-Token 功能一览</a></p><p><strong>全局异常拦截</strong>：继承<code>ErrorWebExceptionHandler</code>重写<code>handle</code>方法返回<code>Mono</code>类型（异步的），返回结果<code>Result</code>也封装和枚举了。</p><p><a href="https://blog.csdn.net/aofengdaxia/article/details/129265983?ops_request_misc=%7B%22request_id%22:%22172223483416800182161820%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172223483416800182161820&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129265983-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ErrorWebExceptionHandler&spm=1018.2226.3001.4187">深入学习ErrorWebExceptionHandler-CSDN博客</a></p><p><a href="https://blog.csdn.net/crazymakercircle/article/details/124120506?ops_request_misc=%7B%22request_id%22:%22172223509816800186538079%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172223509816800186538079&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124120506-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mono&spm=1018.2226.3001.4187">Flux、Mono、Reactor 实战（史上最全）_reactor mono-CSDN博客</a></p><p>gateway实现redis数据拉取：RedisTemplate-&gt;RedisConfig(重写序列化，@Bean创建RedisTemplate bean)-&gt;RedisUtil(封装对redis的操作，具体是用redistemplate来操作的)</p><p><a href="https://blog.csdn.net/m0_69519887/article/details/140610469?ops_request_misc=%7B%22request_id%22:%2207845892-42D0-4649-93B6-193BB633E1BA%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=07845892-42D0-4649-93B6-193BB633E1BA&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-140610469-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=RedisTemplate&spm=1018.2226.3001.4187">【Redis系列】RedisTemplate的使用与注意事项-CSDN博客</a></p><p>为什么重写redistemplate?</p><ul><li>这里不重新他的一个序列化会造成一个乱码的问题，重写了RedisTemplate:<ul><li>objectMapper-&gt;Jackson2jsonRedisSerializer-&gt;redisTemplate，注意@Bean注解返回重写RedisTemplate的方法</li></ul></li></ul><p>[RedisTemplate 概述 与 操作 Redis 5 种数据类型、事务-CSDN博客](<a href="https://blog.csdn.net/wangmx1993328/article/details/103253479?ops_request_misc=%7B%22request_id%22:%22172225212216800178583631%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172225212216800178583631&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-103253479-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=redis">https://blog.csdn.net/wangmx1993328/article/details/103253479?ops_request_misc=%7B%22request%5Fid%22%3A%22172225212216800178583631%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172225212216800178583631&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-103253479-null-null.142^v100^pc_search_result_base8&amp;utm_term=redis</a> template&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_42623400/article/details/115791984?ops_request_misc=%7B%22request_id%22:%22172225253916800225574987%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172225253916800225574987&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115791984-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=redistemplate%E5%92%8Cjackson&spm=1018.2226.3001.4187">Spring date-redis中RedisTemplate的Jackson序列化设置_redistemplate序列化时date带有类型信息-CSDN博客</a></p><p>[Redis 基本命令—— 超详细操作演示！！！_redis 操作-CSDN博客](<a href="https://blog.csdn.net/weixin_43412762/article/details/133934585?ops_request_misc=%7B%22request_id%22:%22172225344516800227425617%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172225344516800227425617&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-133934585-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=redis">https://blog.csdn.net/weixin_43412762/article/details/133934585?ops_request_misc=%7B%22request%5Fid%22%3A%22172225344516800227425617%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172225344516800227425617&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-133934585-null-null.142^v100^pc_search_result_base8&amp;utm_term=redis</a> 操作&amp;spm&#x3D;1018.2226.3001.4187)</p><h3 id="用户-角色-用户角色关联"><a href="#用户-角色-用户角色关联" class="headerlink" title="用户&#x2F;角色&#x2F;用户角色关联"></a>用户&#x2F;角色&#x2F;用户角色关联</h3><p>用户注册时密码的加密：satoken实现的md5+salt，Hash散列</p><p>进行用户角色关联用到redis和数据库时，使用了@Transactional注解：<a href="https://blog.csdn.net/minghao0508/article/details/124374637?ops_request_misc=%7B%22request_id%22:%22172243354616800175766334%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172243354616800175766334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124374637-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@Transactional&spm=1018.2226.3001.4187">Spring——事务注解@Transactional【建议收藏】-CSDN博客</a></p><h3 id="权限开发与角色权限关联模块"><a href="#权限开发与角色权限关联模块" class="headerlink" title="权限开发与角色权限关联模块"></a>权限开发与角色权限关联模块</h3><p><code>AuthPermissionDao.xml</code></p><ul><li><code>type</code>, <code>show</code>：这些列名使用了反引号，因为 <code>type</code> 和 <code>show</code> 是 MySQL 的保留字。在 SQL 中，保留字是具有特定意义的关键字，如果用作列名或表名，需要用反引号括起来，以避免语法错误。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增所有列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    insert into auth_permission(name, parent_id, `type`, menu_url, status, `show`, icon, permission_key, created_by, created_time, update_by, update_time, is_deleted)</span><br><span class="line">    values (#&#123;name&#125;, #&#123;parentId&#125;, #&#123;type&#125;, #&#123;menuUrl&#125;, #&#123;status&#125;, #&#123;show&#125;, #&#123;icon&#125;, #&#123;permissionKey&#125;, #&#123;createdBy&#125;, #&#123;createdTime&#125;, #&#123;updateBy&#125;, #&#123;updateTime&#125;, #&#123;isDeleted&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据与缓存一致性问题"><a href="#数据与缓存一致性问题" class="headerlink" title="数据与缓存一致性问题"></a>数据与缓存一致性问题</h3><p>辩证两个情况</p><p>1、直接和缓存做交互，完全信任缓存</p><p>2、和缓存做交互，如果缓存没有，则去和数据库查</p><p><img src="https://s2.loli.net/2024/08/02/vgMZ7Fy3fRPnJj6.jpg" alt="1699108963209-2ec4047e-03ee-4f39-99ed-9210e4efc363[1].jpeg"></p><p>根据以上的流程没有问题，但是当数据变更的时候，如何把缓存变到最新，使我们下面要讨论的问题。</p><ol><li><p>更新了数据库，再更新缓存</p><p>假设数据库更新成功，缓存更新失败，在缓存失效和过期的时候，读取到的都是老数据缓存。</p></li><li><p>更新缓存，更新数据库</p><p>缓存更新成功了，数据库更新失败，是不是读取的缓存的都是错误的。</p></li></ol><p>以上两种，全都不推荐。</p><ol start="3"><li><p>先删除缓存，再更新数据库</p><p>有一定的使用量。即使数据库更新失败。缓存也可以会刷。</p><p>存在的问题是什么？</p><p>高并发情况下！！</p><p>比如说有两个线程，一个是 A 线程，一个是 B 线程。</p><p>A 线程把数据删了，正在更新数据库，这个时候 B 线程来了，发现缓存没了，又查数据，又放入缓存。缓存里面存的就一直是老数据了。</p></li></ol><p><strong>延迟双删：</strong>:star:</p><ul><li>**延时是确保 **修改数据库 -&gt; 清空缓存前，其他事务的更改缓存操作已经执行完。<a href="https://blog.csdn.net/qq_35890572/article/details/108538712?ops_request_misc=%7B%22request_id%22:%22172258242116800222864858%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258242116800222864858&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108538712-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BC%93%E5%AD%98%E5%8F%8C%E5%88%A0&spm=1018.2226.3001.4187&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=">redis缓存为什么要延时双删-CSDN博客</a></li></ul><p><strong>扩展思路</strong></p><ol><li><p>消息队列补偿</p><p>删除失败的缓存，作为消息打入 mq，mq 消费者进行监听，再次进行重试刷缓存。</p></li><li><p>canal</p><p>监听数据库的变化，做一个公共服务，专门来对接缓存刷新。优点业务解耦，避免业务太多冗余代码复杂度。</p></li></ol><h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h3><p>内网穿透：natapp</p><p>全流程：扫码微信-&gt;微信发送消息到服务器，校验签名确保来自微信（get）-&gt;服务器再把消息进行包装， 通过前缀+验证码（一个随机数）作为redis key，fromUserName(openId)作为value存到redis，并把包含验证码的消息发送到微信-&gt;用户验证码（微信）,从redis拿到openId（即用户名）-&gt;用satoken用openId进行登录，然后利用satoken返回一个token，后续登录就会带上这个token</p><h3 id="用户上下文打通"><a href="#用户上下文打通" class="headerlink" title="用户上下文打通"></a>用户上下文打通</h3><p>全局拦截器：实现<code>GlobalFilter</code>接口<a href="https://blog.csdn.net/feiying0canglang/article/details/124476416?ops_request_misc=%7B%22request_id%22:%22172344317916800185844782%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172344317916800185844782&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124476416-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=GlobalFilter&spm=1018.2226.3001.4187">Spring Cloud Gateway–全局过滤器(GlobalFilter)–作用&#x2F;使用_gateway globalfilter-CSDN博客</a></p><p><code>Loginfilter</code>(实现<code>Globalfilter接口</code>，通过filter拿到token，解析出<strong>loginId</strong>，然后传到后面的过滤链中)</p><p>-&gt;<code>LoginInterceptor</code>(实现<code>HandlerInterceptor</code>，检验<strong>loginId</strong>是否存在且非空，如果存在，将其保存到自定义的线程局部变量上下文LoginContextHolder中，通过<code>InheritableThreadLocal</code>来实现)</p><p>[ThreadLocal、InheritableThreadLocal、TransmittableThreadLocal-CSDN博客](<a href="https://blog.csdn.net/weixin_37862824/article/details/121177025?ops_request_misc=%7B%22request_id%22:%22172344566516800186560849%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172344566516800186560849&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121177025-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ThreadLocal">https://blog.csdn.net/weixin_37862824/article/details/121177025?ops_request_misc=%7B%22request%5Fid%22%3A%22172344566516800186560849%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172344566516800186560849&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121177025-null-null.142^v100^pc_search_result_base8&amp;utm_term=ThreadLocal</a> inheritablethreadlocal&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[史上最全ThreadLocal 详解（一）-CSDN博客](<a href="https://blog.csdn.net/u010445301/article/details/111322569?ops_request_misc=%7B%22request_id%22:%22172344571016800184113290%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172344571016800184113290&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-111322569-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ThreadLocal">https://blog.csdn.net/u010445301/article/details/111322569?ops_request_misc=%7B%22request%5Fid%22%3A%22172344571016800184113290%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172344571016800184113290&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-111322569-null-null.142^v100^pc_search_result_base8&amp;utm_term=ThreadLocal</a> &amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/yexiguafu/article/details/103900568?ops_request_misc=%7B%22request_id%22:%22172344903416800207094300%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172344903416800207094300&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103900568-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=inheritablethreadlocal&spm=1018.2226.3001.4187">InheritableThreadLocal详解-CSDN博客</a></p><h3 id="跨微服务调用"><a href="#跨微服务调用" class="headerlink" title="跨微服务调用"></a>跨微服务调用</h3><p><a href="https://blog.csdn.net/w55935/article/details/124567299?ops_request_misc=%7B%22request_id%22:%22172346209516800225560323%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172346209516800225560323&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124567299-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E9%A1%BA%E5%BA%8F&spm=1018.2226.3001.4187">springMVC中拦截器执行时机和执行顺序分析_拦截器在什么时候执行-CSDN博客</a></p><p>[SpringBoot常用拦截器（HandlerInterceptor，ClientHttpRequestInterceptor，RequestInterceptor）_springboot handlerinterceptor-CSDN博客](<a href="https://blog.csdn.net/weixin_41979002/article/details/124778961?ops_request_misc=%7B%22request_id%22:%22172346204716800226593841%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172346204716800226593841&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124778961-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=HandlerInterceptor">https://blog.csdn.net/weixin_41979002/article/details/124778961?ops_request_misc=%7B%22request%5Fid%22%3A%22172346204716800226593841%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172346204716800226593841&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124778961-null-null.142^v100^pc_search_result_base8&amp;utm_term=HandlerInterceptor</a> RequestInterceptor&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_50652600/article/details/127250413?ops_request_misc=%7B%22request_id%22:%22172346200216800207096802%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172346200216800207096802&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-127250413-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=HandlerInterceptor&spm=1018.2226.3001.4187">拦截器（HandlerInterceptor）-CSDN博客</a></p><h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>caffiene &amp;&amp; guava</p><p><a href="https://blog.csdn.net/zhangyunfeihhhh/article/details/108105928?ops_request_misc=%7B%22request_id%22:%22172346273516800182136994%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172346273516800182136994&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-108105928-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=guava%E5%92%8Ccaffiene&spm=1018.2226.3001.4187">Caffeine与Guava对比_caffeine guava 对比-CSDN博客</a></p><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p><strong>ES:</strong></p><p>全称 elasticsearch。</p><p>隶属于 elsastic stack。<a href="https://www.elastic.co/cn/">官网地址：https://www.elastic.co/cn/</a></p><p>其中包含我们的 elasticsearch（存储、计算、搜索数据），kibana(数据可视化)，beats（数据抓取），logstash（数据抓取）。（ELK）。</p><p>es 主要是对数据进行搜索，分析，倒排。他是一个开源的高扩展的分布式全文搜索引擎。近实时的搜索。扩展性高。处理 PB 级别的数据。</p><p>为什么不用 mysql 做呢？</p><p>es 的特点：</p><p>1、搜索的数据对象大量的非结构化的文本</p><p>2、倒排索引</p><p>3、每个字段都可以被索引和搜索</p><p>4、近实时分析，还可以做聚合，支持各种查询</p><p><a href="https://blog.csdn.net/qq_47387991/article/details/129349790?ops_request_misc=%7B%22request_id%22:%22172354172816800222897865%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172354172816800222897865&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129349790-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=elasticsearch&spm=1018.2226.3001.4187">ELasticsearch基本使用——基础篇_elasticsearch使用-CSDN博客</a></p><p><a href="https://blog.csdn.net/JENREY/article/details/81290535?ops_request_misc=%7B%22request_id%22:%22172354172816800222897865%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172354172816800222897865&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81290535-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=elasticsearch&spm=1018.2226.3001.4187">ElasticSearch从入门到精通，史上最全（持续更新，未完待续，每天一点点）_elasticsearch从入门到精通,史上最全-CSDN博客</a></p><p>es与常规结构化数据数据库概念对照：</p><p>index-&gt;database</p><p>type-&gt;table</p><p>document-&gt;row</p><p>Field-&gt;column</p><p>[通过HTTP的方式操作ES-CSDN博客](<a href="https://blog.csdn.net/sss294438204/article/details/122884953?ops_request_misc=%7B%22request_id%22:%22172355571716800211536069%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172355571716800211536069&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122884953-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=es">https://blog.csdn.net/sss294438204/article/details/122884953?ops_request_misc=%7B%22request%5Fid%22%3A%22172355571716800211536069%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172355571716800211536069&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122884953-null-null.142^v100^pc_search_result_base8&amp;utm_term=es</a> http&amp;spm&#x3D;1018.2226.3001.4187)</p><p>ES集群客户端：hashmap+RestHighLevelClient，key为集群名，value为RestHighLevelClient，配置项-&gt;解析成HttpHost的list-&gt;通过HttpHost去创建RestHighLevelClient。根据RestHighLevelClient底层的API去使用。</p><p><a href="https://blog.csdn.net/weixin_40482816/article/details/126955661?ops_request_misc=%7B%22request_id%22:%22172361783716800222854039%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172361783716800222854039&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-126955661-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=RestHighLevelClient&spm=1018.2226.3001.4187">elasticsearch学习（七）：es客户端RestHighLevelClient-CSDN博客</a></p><p>执行Elasticsearch搜索，支持复杂的查询条件、字段选择:<a href="https://blog.csdn.net/mingyonghu/article/details/109758236?ops_request_misc=%7B%22request_id%22:%22172362055016800182140452%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172362055016800182140452&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109758236-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=BoolQueryBuilder&spm=1018.2226.3001.4187">ES构建queryBuilder条件查询_es querybuilder-CSDN博客</a></p><p><a href="https://blog.csdn.net/u011507134/article/details/128470306?ops_request_misc=%7B%22request_id%22:%22172362055016800182140452%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172362055016800182140452&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-128470306-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=BoolQueryBuilder&spm=1018.2226.3001.4187">Java中使用es条件构造器BoolQueryBuilder-CSDN博客</a> java中： 1. 构造请求的Builder（SearchSourceBuilder和BoolQueryBuilder）2. 给BoolQueryBuilder设置查询条件（MatchQueryBuilder，must&#x2F;should，minimumShouldMatch） 3. 将BoolQueryBuilder对象设置到SearchSourceBuilder对象中 4. 封装到SearchRequest中：searchRequest.source(searchSourceBuilder);5.  RestHighLevelClient利用SearchRequest进行查询</p><p><a href="https://blog.csdn.net/qq_44165076/article/details/88189188">Java学习笔记____ElasticSearch进阶(一)_searchhits-CSDN博客</a></p><p>这个可以：<a href="https://www.cnblogs.com/shangyunlin/p/12541416.html">ElasticSearch知识汇总 - 赟麟 - 博客园 (cnblogs.com)</a></p><h3 id="Mybatis全文拦截器（createTime字段等）"><a href="#Mybatis全文拦截器（createTime字段等）" class="headerlink" title="Mybatis全文拦截器（createTime字段等）"></a>Mybatis全文拦截器（createTime字段等）</h3><p>注意<code>Field</code>类</p><p>[getsuperclass_Java类类getSuperClass（）方法及示例-CSDN博客](<a href="https://blog.csdn.net/cumt30111/article/details/107766525?ops_request_misc=%7B%22request_id%22:%22172388481816800186530090%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172388481816800186530090&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107766525-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Java">https://blog.csdn.net/cumt30111/article/details/107766525?ops_request_misc=%7B%22request%5Fid%22%3A%22172388481816800186530090%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172388481816800186530090&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107766525-null-null.142^v100^pc_search_result_base8&amp;utm_term=Java</a> 类 getSuperclass&amp;spm&#x3D;1018.2226.3001.4187)</p><p>通过class获取到类，然后获取类的所有Fields：while循环调用getSuperClass去把所有的类的超类以及超类的超类给拿到fields。</p><p>根据字段名称，进行对应的设置和sql操作</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><h4 id="常规mysql实现"><a href="#常规mysql实现" class="headerlink" title="常规mysql实现"></a>常规mysql实现</h4><p>直接select语句实现就行</p><h4 id="通过redis的zset进行排列"><a href="#通过redis的zset进行排列" class="headerlink" title="通过redis的zset进行排列"></a>通过redis的zset进行排列</h4><p><a href="https://blog.csdn.net/fuzhijieabc/article/details/123805608?ops_request_misc=%7B%22request_id%22:%22172447209416800188585058%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172447209416800188585058&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123805608-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=reverseRangeWithScores&spm=1018.2226.3001.4187">redis——Zset有序集合之reverseRangeWithScore函数使用_reverserangewithscores-CSDN博客</a></p><h4 id="xxljob"><a href="#xxljob" class="headerlink" title="xxljob"></a>xxljob</h4><p><a href="https://blog.csdn.net/qq_53847859/article/details/140483614?ops_request_misc=&request_id=&biz_id=102&utm_term=xxljob&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-140483614.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">XXL-JOB：定时任务框架的实战应用与调度方式详解-CSDN博客</a></p><p><a href="https://roger-lv.github.io/2024/08/25/2024-08-25-xxl-job%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">xxl-job学习笔记 | Roger-Lv’s space</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows11下安装WSL</title>
      <link href="/2024/07/19/Windows11%E4%B8%8B%E5%AE%89%E8%A3%85WSL/"/>
      <url>/2024/07/19/Windows11%E4%B8%8B%E5%AE%89%E8%A3%85WSL/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows11下安装WSL"><a href="#Windows11下安装WSL" class="headerlink" title="Windows11下安装WSL"></a>Windows11下安装WSL</h1><h2 id="一、WSL是什么？"><a href="#一、WSL是什么？" class="headerlink" title="一、WSL是什么？"></a>一、WSL是什么？</h2><p>开发人员可以在 Windows 计算机上同时访问 Windows 和 Linux 的强大功能。 通过适用于 Linux 的 Windows 子系统 (WSL)，开发人员可以安装 Linux 发行版（例如 Ubuntu、OpenSUSE、Kali、Debian、Arch Linux 等），并直接在 Windows 上使用 Linux 应用程序、实用程序和 Bash 命令行工具，不用进行任何修改，也无需承担传统虚拟机或双启动设置的费用。</p><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><ol><li><p>确保电脑虚拟化开启</p><ol><li><p>控制面板-&gt;程序-&gt;启用或关闭 windows 功能，开启 Windows 虚拟化和 Linux 子系统（WSL2)以及Hyper-V。由于在Windows11中并没有Hyper-V，需要进行手动配置</p><p><img src="https://s2.loli.net/2024/07/19/A3LuWHaFGxiN1Xp.png" alt="image-20240719174041320.png"></p></li><li><p>配置Hyper-V</p><p>家庭版windows11没有Hyper-V，需要配置Hyper-V。打开vs code创建Hyper-7.cmd，复制以下内容并保存后执行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pushd</span> &quot;%~dp0&quot;</span><br><span class="line"><span class="built_in">dir</span> /b <span class="variable">%SystemRoot%</span>\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">findstr</span> /i . hyper-v.txt <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> dism /online /norestart /add-package:&quot;<span class="variable">%SystemRoot%</span>\servicing\Packages\<span class="variable">%%i</span>&quot;</span><br><span class="line"><span class="built_in">del</span> hyper-v.txt</span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure></li></ol></li><li><p>系统安装<br>win11 使用 WSL2 安装 linux 子系统 ubuntu 出现错误：无法解析服务器的名称或地址。原本显示报错：ConnectionError: Couldn’t reach <a href="https://raw.githubusercontent.com/huggingfac">https://raw.githubusercontent.com/huggingfac</a><br>无法访问。</p><p>解决方法：</p><ol><li><p>修改 本地 host 文件。<br>记事本打开 C:\Windows\System32\drivers\etc\hosts 文件，添加如下解析地址（4个中有一个好用就添加它）</p><p>在<a href="https://www.ipaddress.com这个网站中的查询框中输入：raw.githubusercontent.com">https://www.ipaddress.com这个网站中的查询框中输入：raw.githubusercontent.com</a><br>在里面找到相应的的ipv4地址，这四个地址随便选一个即可（好用的）：</p><blockquote><p>185.199.108.133 raw.githubusercontent.com<br>185.199.109.133 raw.githubusercontent.com<br>185.199.110.133 raw.githubusercontent.com<br>185.199.111.133 raw.githubusercontent.com</p></blockquote></li></ol></li><li><p>在CMD中刷新 DNS 解析缓存<br>ipconfig &#x2F;flushdns</p></li><li><p>再次运行查看或安装命令<br>查看可安装的 WSL</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -o</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/L9XK5m1WUuCFagJ.png" alt="image-20240719174714709.png"></p></li><li><p>列出已安装版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/EMauckZm7XIsgbH.png" alt="image-20240719174508599.png"></p></li><li><p>wsl –install -d(安装):</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu-<span class="number">22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure></li><li><p>wsl -d (运行)：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -d Ubuntu-<span class="number">22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/Qc8HYLlKUgT4Noy.png" alt="image-20240719174849821.png"></p></li><li><p>修改到D盘</p><p>由于默认是到C盘，现修改到C盘。</p><ol><li><p>关闭子系统</p><p>关闭界面&#x2F;输入如下命令关闭子系统。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-<span class="number">22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure></li><li><p>导出子系统</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-<span class="number">22</span>.<span class="number">04</span> D:/WSL/Ubuntu22.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/sxLkiu6fzeMSnt8.png" alt="image-20240719175252993.png"></p></li><li><p>注销原子系统</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-<span class="number">22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/VeGrK5x89pNmEUC.png" alt="image-20240719175312011.png"></p><p><img src="https://s2.loli.net/2024/07/19/ay8BjvmsLEM6zbO.png" alt="image-20240719175322005.png"></p></li><li><p>从D盘导入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-<span class="number">22</span>.<span class="number">04</span> D:/WSL/Ubuntu-<span class="number">22</span>.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/19/vVk7RUDGqZlPOC5.png" alt="image-20240719175344296.png"></p><p><img src="https://s2.loli.net/2024/07/19/Nylr6I5Esx3kUch.png" alt="image-20240719175359321.png"></p></li><li><p>再次运行导入好的系统</p><p><img src="https://s2.loli.net/2024/07/19/Tx1PuMZdCLiYVEf.png" alt="image-20240719175427475.png"></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统中卸载anaconda</title>
      <link href="/2024/07/19/2024-07-19-Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8D%B8%E8%BD%BDanaconda/"/>
      <url>/2024/07/19/2024-07-19-Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8D%B8%E8%BD%BDanaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统中卸载anaconda"><a href="#Linux系统中卸载anaconda" class="headerlink" title="Linux系统中卸载anaconda"></a>Linux系统中卸载anaconda</h1><p>要在Linux系统中卸载Anaconda，你需要执行一系列的命令。这里是一个通用的步骤指南：</p><ol><li><p>找到Anaconda安装脚本：<br>在安装Anaconda时，它会在你的主目录中创建一个名为anaconda3的文件夹（默认情况下，如果你在安装时选择了不同的名称或位置，请确保使用正确的路径）。</p></li><li><p>运行Anaconda卸载程序：<br>Anaconda提供了一个卸载程序anaconda-clean，可以帮助你删除Anaconda的配置文件。在终端中运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install anaconda-clean</span><br><span class="line">anaconda-clean --yes</span><br></pre></td></tr></table></figure><p>这个命令将删除Anaconda的配置文件，并且可以选择创建一个备份。使用–yes选项可以避免在删除每个项目时都要求确认。</p></li><li><p>删除Anaconda安装目录：<br>接下来，你需要手动删除Anaconda的安装目录。如果你的安装目录是默认的~&#x2F;anaconda3，你可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/anaconda3</span><br></pre></td></tr></table></figure><p>如果你的安装目录不是默认的，请确保使用正确的路径。</p></li><li><p>编辑.bashrc或其他启动脚本：<br>Anaconda安装过程中会在~&#x2F;.bashrc文件中添加初始化代码。你需要手动编辑这个文件并删除与Anaconda相关的行。你可以使用nano、vim或你喜欢的任何文本编辑器来做这件事。例如，如果你使用nano：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后找到并删除以下行（或类似内容）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">added by Anaconda3 installer</span></span><br><span class="line">export PATH=&quot;/home/username/anaconda3/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><p>保存并关闭文件。为了让这些更改生效，你需要重新加载.bashrc文件或重启你的终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>或者，如果你在图形界面中，你可以简单地关闭并重新打开你的终端窗口。</p></li><li><p>检查并删除任何剩余的Anaconda文件：<br>为了确保所有与Anaconda相关的文件都被删除，你可以使用find命令来搜索它们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type d -name &#x27;*anaconda*&#x27; -or -name &#x27;*conda*&#x27; -or -name &#x27;*miniconda*&#x27;</span><br></pre></td></tr></table></figure><p>然后你可以手动删除找到的任何相关目录。</p></li><li><p>检查并更新环境变量：<br>如果你在其他地方（如.profile或.bash_profile）添加了Anaconda到你的PATH环境变量，你需要更新这些文件并删除相关的行。</p></li></ol><p>按照这些步骤操作后，Anaconda应该已经从你的Linux系统中完全卸载。请记得在执行删除操作时要小心，确保不要错误地删除非Anaconda相关的文件或目录。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状压DP算法</title>
      <link href="/2024/07/18/2024-06-24-%E7%8A%B6%E5%8E%8BDP%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/18/2024-06-24-%E7%8A%B6%E5%8E%8BDP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h1><h2 id="使用状压DP的原因"><a href="#使用状压DP的原因" class="headerlink" title="使用状压DP的原因"></a>使用状压DP的原因</h2><p>我们知道状态压缩，顾名思义，就是需要考虑的状态非常多，我们如果用平常的思想去表示状态，那是非常不现实的，在时间和空间上都不允许，我们使用某种方法，以最小的代价表示某种状态。 那么，这通常是用进制来表示状态的，而选择几进制则根据要求使用的对象的点的状态有几种。一般来说，只有0和1，我们则是用二进制来表示，当然也有其他进制的题，在例题中会列举，需要我们灵活变通，主要谈二进制。</p><p>那么如何用二进制表示状态呢？我们发现，二进制上是按位分的，那么我们每一位可以看成一个点，而点上的取值则为该点的状态或者选择。例如00001001这个状态则表示第一个点和第四个点状态为1，其余的点状态为0。所以按照这种思想，能抽象的表示出一个很复杂的状态，实现了时间和空间的优化。</p><h2 id="状压DP的适用条件"><a href="#状压DP的适用条件" class="headerlink" title="状压DP的适用条件"></a>状压DP的适用条件</h2><p><strong>状态压缩其实是有适用环境的：</strong></p><ol><li>状态需要有一定的状态单元。 即一个状态应该是保存一个集合，其中的元素值对应着0或1，例如我们常见的棋盘，我们可以用0或1来表示棋子的放置状态。而整个集合即是一个01串，即二进制数，我们通常用十进制表示。那么我们再进行状态转移或者判断的时候，需要先将十进制转化为二进制，再将二进制转化为十进制。</li><li>题目中限制的集合大小不会超过20。 这是最显著的特征，为什么呢？我们知道如果用二进制表示状态，那么集合大小为20的二进制状态有2^{20} - 1已经达到1e7的数量级了。</li><li>具有动态规划的特性。 对于动态规划，一般都是要求最优化某个值，具有最优子结构的性质。同时也需要满足状态转移的特性，而不是前一个状态毫无关系的。</li></ol><p>适用环境总结：</p><ol><li>二进制</li><li>集合&#x2F;状态大小受限（比如不会大于int类型能表示的最大数）</li><li>满足动态规划特性</li></ol><h2 id="状压DP的板子"><a href="#状压DP的板子" class="headerlink" title="状压DP的板子"></a>状压DP的板子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> maxn = <span class="number">1</span> &lt;&lt; n;<span class="comment">//总状态数。</span></span><br><span class="line"><span class="comment">//枚举已有的集合数。按照状态转移的顺序，一般从小编号到大编号。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)&#123;</span><br><span class="line">    <span class="comment">//枚举当前集合中的状态。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxn; ++ j)&#123;</span><br><span class="line">        <span class="comment">//判断当前集合是否处于合法状态，通常我们需用一个数组提前处理好。如g数组;</span></span><br><span class="line">        <span class="keyword">if</span>(当前状态是否合格)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; maxn; ++ k)&#123;</span><br><span class="line">                <span class="comment">//枚举上一个集合的状态。</span></span><br><span class="line">                <span class="keyword">if</span>(上一个集合的状态是否合格 + 上一个集合的状态和当前状态的集合是否产生了冲突)&#123;</span><br><span class="line">                    列写状态转移方程。</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="USACO06NOV-Corn-Fields-G"><a href="#USACO06NOV-Corn-Fields-G" class="headerlink" title=" USACO06NOV Corn Fields G"></a><a href="https://www.luogu.com.cn/problem/P1879"> USACO06NOV Corn Fields G</a></h3><p>农场主John新买了一块长方形的新牧场，这块牧场被划分成M行N列(1 ≤ M ≤ 12; 1 ≤ N ≤ 12)，每一格都是一块正方形的土地。John打算在牧场上的某几格里种上美味的草，供他的奶牛们享用。</p><p>遗憾的是，有些土地相当贫瘠，不能用来种草。并且，奶牛们喜欢独占一块草地的感觉，于是John不会选择两块相邻的土地，也就是说，没有哪两块草地有公共边。</p><p>John想知道，如果不考虑草地的总块数，那么，一共有多少种种植方案可供他选择？（当然，把新牧场完全荒废也是一种方案）</p><p>输入格式</p><p>第一行：两个整数M和N，用空格隔开。</p><p>第2到第M+1行：每行包含N个用空格隔开的整数，描述了每块土地的状态。第i+1行描述了第i行的土地，所有整数均为0或1，是1的话，表示这块土地足够肥沃，0则表示这块土地不适合种草。</p><p>输出格式</p><p>一个整数，即牧场分配总方案数除以100,000,000的余数。</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1 1 1</span><br><span class="line">0 1 0</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><p>思路：</p><p>我们先作出规定，定义n代表的是行，m代表的是列。那么牧场大小就是n × m。我们看到数据范围,n , m都特别小，同时所求为方案数，这很符合状压DP的适用条件。那么对于每一行，我们就可以看成一个未知集合，而集合的大小自然就是列m。对于每一个单元，其取值范围为0 , 1，而1代表放置奶牛，0代表不放置奶牛，所以我们自然可以用二进制表示，那么状态总数就是( 1 &lt; &lt; m ) − 1。 </p><ol><li>对于每一个状态，我们需要判断是否合格，而其中明确不能选择两块相邻的土地，在集合内，即相邻位不能全为1，所以我们可以预处理<strong>g数组</strong>，处理方式即为:g[i] &#x3D; !(i &amp; (i &lt;&lt; 1))（这里的i的取值从0到所有的状态）；</li><li>同样，我们还应该知晓土地的状况，因为毕竟只有土地肥沃才可以放置奶牛，则我们可以通过一个st数组判断，集合与集合之间，我们也需要考虑相邻位不能全为1，所以在枚举上一个集合的状态也需要严格判断。</li><li>对于状态定义，我们可以用f [ i ] [ j ]表示第i行且状态为j的方案数。</li><li>对于状态转移，假设上一行状态为k，则状态转移方程为：f [ i ] [ j ] + &#x3D; f [ i − 1 ] [ k ]</li></ol><p>答案：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">5</span>,M = <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">//n行m列的土地。</span></span><br><span class="line"><span class="type">int</span> a[N][M],st[N];<span class="comment">//a代表土地，st代表每一行的土地状况。</span></span><br><span class="line"><span class="type">bool</span> g[<span class="number">1</span> &lt;&lt; N];<span class="comment">//g得到所有状态中的合法状态。</span></span><br><span class="line"><span class="type">int</span> f[N][<span class="number">1</span> &lt;&lt; N];<span class="comment">//f[i][j]表示的则是第i行且状态为j的方案数，是由上一行转移过来的，所以我们定义上一行的状态为k。</span></span><br><span class="line"><span class="comment">//则状态转移方程为f[i][j] += f[i - 1][k];//其中j和k必须满足条件。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到每一行的土地状况。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)&#123;</span><br><span class="line">            st[i] = (st[i] &lt;&lt; <span class="number">1</span>) + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到所有状态中的合法状态。</span></span><br><span class="line">    <span class="type">int</span> maxn = <span class="number">1</span> &lt;&lt; m;<span class="comment">//总状态。</span></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化，这种也算一种。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; ++ i)&#123;</span><br><span class="line">        g[i] = !( i &amp; (i &lt;&lt; <span class="number">1</span>));<span class="comment">//由于不能相邻，所以我们左移判断是否符合条件。 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="comment">//枚举每一行。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxn; ++ j)&#123;</span><br><span class="line">            <span class="comment">//枚举每一行的状态，判断此状态是否符合条件。1.不能相邻。2.是全部状态的子集。</span></span><br><span class="line">            <span class="keyword">if</span>(g[j] &amp;&amp; (j &amp; st[i]) == j)&#123;</span><br><span class="line">                <span class="comment">//如果符合条件。则我们去判断上一行是否符合。</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; maxn; ++ k)&#123;</span><br><span class="line">                    <span class="comment">//枚举上一行状态。注意，这里我们无需判断上一行状态是否存在，因为不存在即为0.</span></span><br><span class="line">                    <span class="comment">//只需要判断j和k是否存在相邻草地。</span></span><br><span class="line">                    <span class="keyword">if</span>(!(j &amp; k))&#123;</span><br><span class="line">                        f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][k]) % P;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxn; ++ j)&#123;</span><br><span class="line">        ans = (ans + f[n][j]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a>糖果</h3><p>【问题描述】<br>糖果店的老板一共有 M 种口味的糖果出售。为了方便描述，我们将M种口味编号1~M。<br>小明希望能品尝到所有口味的糖果。遗憾的是老板并不单独出售糖果，而是K颗一包整包出售。<br>幸好糖果包装上注明了其中K颗糖果的口味，所以小明可以在买之前就知道每包内的糖果口味。<br>给定N包糖果，请你计算小明最少买几包，就可以品尝到所有口味的糖果<br>【输入格式】<br>第一行包含三个整数 N、M 和 K。<br>接下来 N 行每行 K个整数 T1,T2,….Tκ，代表一包糖果的口味。<br>【输出格式】<br>一个整数表示答案。如果小明无法品尝所有口味，输出-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> n=sc.nextInt();</span><br><span class="line">    <span class="type">int</span> m=sc.nextInt();</span><br><span class="line">    <span class="type">int</span> k=sc.nextInt();</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[n][k];</span><br><span class="line">    <span class="type">int</span>[] sta = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>&lt;&lt;k];</span><br><span class="line">    Arrays.fill(dp, -<span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">// 动规数组只有dp[0]为0，其余全部初始化-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=k; j++)&#123;</span><br><span class="line">            a[i][j] = sc.nextInt(); <span class="comment">// 读取数据</span></span><br><span class="line">            <span class="comment">/* 此处用sta[i]做了k次或赋值，解释如下。 */</span></span><br><span class="line">            <span class="comment">/* 对于数据a[i][j]，意味第i个包裹中的第j块糖果的种类 */</span></span><br><span class="line">            <span class="comment">/* 比如a[i][j]是第4类糖果，那么1&lt;&lt;(a[i][j]-1)的值为二进制的1000，也就是第四类糖果被选中。 */</span></span><br><span class="line">            <span class="comment">/* 当sta[i]做了k次或赋值后，sta[i]的二进制上会有若干个1，表示第i个包裹中有哪些类别的糖果。 */</span></span><br><span class="line">            sta[i] |= <span class="number">1</span> &lt;&lt; (a[i][j] - <span class="number">1</span>);           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 这里说明一下dp数组的含义 */</span></span><br><span class="line">        <span class="comment">/* dp[l] = k，表示要想获得l的二进制表示的所有糖果种类，至少要选取k个包裹。 */</span></span><br><span class="line">        <span class="comment">/* 由于我们刚刚初始化sta数组，那么这里表示的含义就是对于每一个包裹，要想获得这个包裹里的所有糖果种类，需要1个包裹。 */</span></span><br><span class="line">        dp[sta[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 接下来就是动规得出答案了 */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; <span class="comment">// 依次考虑每一个包裹，获取包裹后会对dp有什么影响</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;(<span class="number">1</span>&lt;&lt;m); j++) &#123; <span class="comment">// 在考虑包裹i时，对所有已经存在的状态j都做分析，看包裹i是否对状态j有所影响</span></span><br><span class="line">            <span class="keyword">if</span> (dp[j] == -<span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 状态j不存在，考虑下一个</span></span><br><span class="line">            <span class="comment">/* 分两种情况 */</span></span><br><span class="line">            <span class="comment">/* 状态j存在，但拿到包裹i后，状态j|sta[i]不存在，更新之 */</span></span><br><span class="line">            <span class="comment">/* 状态j存在，拿到包裹i后的状态也存在，但在状态j下拿到包裹i，比之前的代价更小，更新之 */</span></span><br><span class="line">            <span class="keyword">if</span> (dp[j | sta[i]] == -<span class="number">1</span> || dp[j] + <span class="number">1</span> &lt; dp[j|sta[i]]) &#123;</span><br><span class="line">                dp[j | sta[i]] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>]); <span class="comment">// 最后输出的是要拿到所有糖果种类需要的最少包裹数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust中的错误处理</title>
      <link href="/2024/07/18/2024-07-18-Rust%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2024/07/18/2024-07-18-Rust%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust中的错误处理"><a href="#Rust中的错误处理" class="headerlink" title="Rust中的错误处理"></a>Rust中的错误处理</h1><p>如果你使用过其他编程语言，那么就会知道Rust中的错误处理是完全不同的方法。像Java,JS,Python等你常常会使用<code>throw</code>处理异常，以及<code>return</code>成功的值。但在Rust中，你会返回给调用者一个<code>Result</code></p><p><code>Result&lt;T, E&gt;</code>是一个拥有两个值的枚举类型，其中<code>Ok(T)</code>用来返回成功值，<code>Err(E)</code>用来返回错误值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回错误而不是抛出错误,这是一种编程习惯的转变。所以如果你是Rust的初学者，可能刚开始学习起来觉得很麻烦，因为这需要你用去思考在不同的场景，应该使用什么样的方法去处理错误。</p><p>在这篇博客中会有错误处理的一些范式，以及它们在Rust中是如何体现的：</p><ul><li>忽略错误</li><li>直接结束程序</li><li>使用默认值处理</li><li>传递错误</li><li>传递多个错误</li><li>模式匹配Boxed错误</li><li>使用库 or 应用</li><li>创建自定义错误</li><li>传递自定义错误</li><li>模式匹配自定义错误</li></ul><h2 id="忽略错误-unwrap"><a href="#忽略错误-unwrap" class="headerlink" title="忽略错误(unwrap())"></a><strong>忽略错误</strong>(unwrap())</h2><p>（如果出现错误会触发panic，让该线程退出）</p><p>最简单的处理方法就是直接忽略这个错误，这听起来是不太好的想法，但是可以在以下情况使用：</p><ul><li>刚刚开始编写代码，不想浪费太多时间在错误处理上。</li><li>坚定确信当前的情况下，错误一定不会发生。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">content</span> = fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;./Cargo.toml&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使知道文件会存在，但是编译器也无法知道。因此，使用<code>unwrap()</code>关键字让编译器信任，并返回其中的值。如果<code>read_to_string()</code>函数返回一个<code>Ok()</code>，unwrap将获取<code>Ok()</code>的内容并将其分配给content变量。如果它返回一个错误，那么程序会陷入<code>panic</code>这回让当前程序线程退出。</p><blockquote><p>需要注意的是在许多Rust示例代码中使用<code>unwrap</code>来跳过错误处理，但是这样做主要是为了方便，不应该在实际开发中使用。</p></blockquote><h2 id="结束程序-expect"><a href="#结束程序-expect" class="headerlink" title="结束程序(expect())"></a><strong>结束程序</strong>(expect())</h2><p>有些错误无法处理或从中恢复。在这些情况下，最好直接终止程序。 让使用与上面相同的例子——正在读取一个文件，肯定会看到它。想象一下，对于这个程序来说，这个文件绝对重要，没有它就无法正常工作。如果由于某种原因，该文件不存在，那么最好应该直接终止该程序。</p><p>可以像之前一样使用<code>unwrap</code>或者使用<code>expect</code>，它和<code>unwrap</code>差不多，唯一不同的是添加了额外的错误信息。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">content</span> = fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;./Cargo.toml&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Can&#x27;t read Cargo.toml&quot;</span>);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解关于：<code>panic!</code></p><h2 id="使用默认值-unwrap-or"><a href="#使用默认值-unwrap-or" class="headerlink" title="使用默认值(unwrap_or())"></a><strong>使用默认值</strong>(unwrap_or())</h2><p>在某些情况下，可以通过返回默认值来处理错误。</p><p>例如正在编写一个服务器，它监听的端口可以使用环境变量进行配置。如果没有设置环境变量，则访问该值将导致错误。但可以通过返回默认值来轻松处理这个问题。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">port</span> = env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;PORT&quot;</span>).<span class="title function_ invoke__">unwrap_or</span>(<span class="string">&quot;3000&quot;</span>.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，使用在这里，使用了一种称为<code>unwrap_or</code>的<code>unwrap</code>变体，它允许提供默认值。</p><p>了解关于： <code>unwrap_or_else</code>, <code>unwrap_or_default</code></p><h2 id="传递错误给调用者"><a href="#传递错误给调用者" class="headerlink" title="传递错误给调用者"></a><strong>传递错误给调用者</strong></h2><p>当没有足够的context来处理错误时，可以将错误冒泡（向上传播）到调用者函数。下面是一个精心设计的示例，它使用Web服务获取当前年份：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :( \n  &#123;&#125;&quot;</span>, e),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, reqwest::Error&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">result</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">response</span> = <span class="keyword">match</span> result &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(res) =&gt; res,</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(err) =&gt; <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(err),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">body</span> = response.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">json</span> = <span class="keyword">match</span> body &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(json) =&gt; json,</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(err) =&gt; <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(err),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">date</span> = json[<span class="string">&quot;years&quot;</span>].<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块在<code>get_current_date</code>中有两个函数调用(get和json)会返回Result值。因为get_current_date并没有返回错误时要做什么的上下文，所以使用模式匹配将错误传回main.</p><p>有时候在使用模式匹配去处理，多个嵌套的错误处理可能会让代码看起来非常混乱，所以可以引入<code>?</code>来重写上述代码.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :( \n  &#123;&#125;&quot;</span>, e),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, reqwest::Error&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">date</span> = res[<span class="string">&quot;years&quot;</span>].<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来简洁明了。其中<code>?</code>操作符类似于<code>unwrap</code>但是在遇到Error时并不会产生<code>panic</code>，而是会将错误返回给调用者函数。需要记住的一件事情是只有在函数返回<code>Option</code>和<code>Result</code>类型时才能使用<code>?</code>操作符。</p><p><a href="https://blog.csdn.net/qq_45983373/article/details/133816439">Rust语言中Option和Result两种类型的使用_rust option result-CSDN博客</a></p><p><strong>注意Option和Result：</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中Option更多用于一个返回值不确定是否存在的情况下（可以理解为其他语言中的NULL）。</p><p>而Result更多用于会出现错误进行捕捉的场景。</p><p>所以会看到很多函数后面的返回值(可以return，也可以直接None&#x2F;Some&#x2F;Ok&#x2F;Err)是这样的，给出各自的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Option处理可能存在或不存在的值</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">find_element_index</span>(arr: &amp;[<span class="type">i32</span>], target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, &amp;value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> value == target &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Some</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Result处理可能的错误情况</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">divide</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>, &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Cannot divide by zero&quot;</span>) <span class="comment">//这里会返回Result中的Err，内容是这个字符串字面量</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(a / b) <span class="comment">//这里会返回Result中的Ok，内容就是实际除法得到的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里 &amp;&#x27;static str 表示错误信息是一个指向程序生命周期为整个程序的字符串字面量的引用。使用 &amp;&#x27;static str 而不是 String 可以避免在堆上分配内存，从而提高效率。</span></span><br><span class="line"><span class="comment">&amp;&#x27;static str 表示一个指向字符串字面量的引用，其生命周期是 &#x27;static。这意味着这个字符串字面量在程序的整个生命周期内都是有效的。</span></span><br><span class="line"><span class="comment">为什么使用 &#x27;static 生命周期？</span></span><br><span class="line"><span class="comment">避免动态内存分配：字符串字面量存储在程序的只读数据段中，使用 &#x27;static 生命周期可以避免在堆上为错误消息分配额外的内存。这在处理大量错误时尤其重要，因为它可以减少内存消耗。</span></span><br><span class="line"><span class="comment">简化错误处理：使用静态字符串可以简化错误处理逻辑，因为编译器可以保证这些字符串在整个程序生命周期内都是有效的，无需担心生命周期问题。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Option</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">index</span> = <span class="title function_ invoke__">find_element_index</span>(&amp;numbers, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">match</span> index &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(i) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Element found at index: &#123;&#125;&quot;</span>, i),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Element not found&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Result</span></span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">divide</span>(<span class="number">10</span>, <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(result) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Result of division: &#123;&#125;&quot;</span>, result),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error: &#123;&#125;&quot;</span>, error),</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_ invoke__">divide</span>(<span class="number">10</span>,<span class="number">2</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="title function_ invoke__">divide</span>(<span class="number">10</span>,<span class="number">2</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;defined by yourself&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传递多个错误给调用者"><a href="#传递多个错误给调用者" class="headerlink" title="传递多个错误给调用者"></a><strong>传递多个错误给调用者</strong></h2><p>在之前的例子中，<code>get</code>和<code>json</code>函数返回了一个<code>reqwest::Error</code>错误。但是如果已经有了一个在调用其他的函数时返回的错误类型，那么应该怎么处理呢？</p><p>让通过返回格式化的日期而不是年份来扩展上一个示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">      <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">      <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :( \n  &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, reqwest::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line">-   <span class="keyword">let</span> <span class="variable">date</span> = res[<span class="string">&quot;years&quot;</span>].<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上述的代码是不能编译的，由于parse_from_str返回了一个<code>chrono::format::ParseError</code>错误而不是<code>reqwest::Error</code></p><p>可以使用<code>Box</code>关键字来解决这个问题</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">      <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">      <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :( \n  &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, reqwest::Error&gt; &#123;</span><br><span class="line">+ <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当想要发返回多个不同的错误时，返回一个特征对象 <code>Box&lt;dyn std::error::Error&gt;</code>是一种便利的处理方法。</p><p>了解更多关于： <code>anyhow</code>, <code>eyre</code></p><h2 id="模式匹配Boxed错误"><a href="#模式匹配Boxed错误" class="headerlink" title="模式匹配Boxed错误"></a><strong>模式匹配Boxed错误</strong></h2><p>目前为止，只在main中打印错误，而不是真正地去处理它们。如果想处理和恢复Box错误，需要“downcast”它们：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">      <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">-     <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :( \n  &#123;&#125;&quot;</span>, e),</span><br><span class="line">+     <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">+       <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :(&quot;</span>);</span><br><span class="line">+       <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(err) = e.downcast_ref::&lt;reqwest::Error&gt;() &#123;</span><br><span class="line">+         <span class="built_in">eprintln!</span>(<span class="string">&quot;Request Error: &#123;&#125;&quot;</span>, err)</span><br><span class="line">+       &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(err) = e.downcast_ref::&lt;chrono::format::ParseError&gt;() &#123;</span><br><span class="line">+         <span class="built_in">eprintln!</span>(<span class="string">&quot;Parse Error: &#123;&#125;&quot;</span>, err)</span><br><span class="line">+       &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，必须知道get_current_date的实现细节（其中包含的不同错误），才能够在main中对其进行downcast。</p><p>了解更多关于: <code>downcast</code>, <code>downcast_mut</code></p><h2 id="库-vs-应用"><a href="#库-vs-应用" class="headerlink" title="库 vs 应用"></a><strong>库 vs 应用</strong></h2><p>如前面所述，使用Box带来的问题是：如果想要处理底层错误，必须了解函数的实现细节。当以<code>Box&lt; dyn std::error::Error&gt;</code>形式返回某个内容时，具体的类型信息将会丢失。为了以不同方式处理不同的错误，需要将它们向下转换为某个具体类型，这种转换可能会在运行时失败。</p><p>然而，脱离上下文，谈论好坏并不是很有用。一个很好的经验法则是思考当前正在编写的代码是一个“Application”还是“Library”：</p><h3 id="Application应用"><a href="#Application应用" class="headerlink" title="Application应用"></a><strong>Application应用</strong></h3><ul><li>您正在编写的代码将由最终用户使用。</li><li>大多数由应用程序代码生成的错误不会被处理，而是记录或报告给用户。</li><li>可以使用box错误。</li></ul><h3 id="Library库"><a href="#Library库" class="headerlink" title="Library库"></a><strong>Library库</strong></h3><ul><li>您正在编写的代码将被其他代码使用。一个“库”可以是开源crate，内部library等。</li><li>错误是库的API的一部分，因此库的使用者知道应该期望并从中恢复哪些错误。</li><li>库中的错误通常由用户处理，因此它们需要结构化且易于执行<a href="%5Bhttps://doc.rust-lang.org/1.30.0/book/2018-edition/ch06-02-match.html#matches-are-exhaustive%5D(https://link.zhihu.com/?target=https://doc.rust-lang.org/1.30.0/book/2018-edition/ch06-02-match.html#matches-are-exhaustive)">exhaustive match</a></li><li>如果您返回Box错误，那么库的使用者需要知道由代码、依赖项等创建的错误类型！</li><li>可以返回自定义错误，而不是Box错误。</li></ul><h2 id="创建自定义错误"><a href="#创建自定义错误" class="headerlink" title="创建自定义错误"></a><strong>创建自定义错误</strong></h2><p>对于library代码，可以将所有错误转换为自定义的错误类型，并返回它，而不是使用特征对象<code>box</code>。在的例子中，目前由两个错误<code>reqwest::Error</code>和<code>chrono::format::ParseError</code>。可以将它们分别转换为<code>MyCustomError::HttpError</code>和<code>MyCustomError::ParseError</code></p><p>首先要创建一个enum来装的两个错误变量</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error.rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">  HttpError,</span><br><span class="line">  ParseError,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Error</code>trait规定实现必须<code>Debug</code>和<code>Display</code> traits:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error.rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">  HttpError,</span><br><span class="line">  ParseError,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">std</span>::error::Error <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      MyCustomError::HttpError =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;HTTP Error&quot;</span>),</span><br><span class="line">      MyCustomError::ParseError =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;Parse Error&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样创建的自定义错误类型，这是一个非常简单的例子，但是没有包含太多关于错误的信息。但这应该足以作为创建更复杂、更现实的自定义错误的起点。下面是一些常见开发中的自定义错误处理的例子:<a href="https://link.zhihu.com/?target=https://github.com/BurntSushi/ripgrep/blob/12.1.1/crates/regex/src/error.rs">ripgrep</a>, <a href="https://link.zhihu.com/?target=https://github.com/seanmonstar/reqwest/blob/v0.10.7/src/error.rs">reqwest</a>, <a href="https://link.zhihu.com/?target=https://github.com/BurntSushi/rust-csv/blob/master/src/error.rs">csv</a> and <a href="https://link.zhihu.com/?target=https://github.com/serde-rs/json/blob/master/src/error.rs">serde_json</a></p><p>还有: <code>thiserror</code>, <code>snafu</code></p><h2 id="传递自定义错误"><a href="#传递自定义错误" class="headerlink" title="传递自定义错误"></a><strong>传递自定义错误</strong></h2><p>看看使用自定义错误类型后对于之前程序的修改</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// main.rs</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">mod</span> error;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">+ <span class="keyword">use</span> error::MyCustomError;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// skipped, will get back later</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">+ <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, MyCustomError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">-   <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)</span><br><span class="line">+     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::HttpError)?</span><br><span class="line">+     .json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()</span><br><span class="line">+     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::HttpError)?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">-   <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">+     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::ParseError)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意到使用了<code>map_err</code>将一个错误类型转换为另外的错误类型.</p><p>但是可以看到太多的verbose作为结果，的函数充斥着太多<code>map_err</code>调用。可以实现<code>From</code> trait，这样就会完成自动错误类型转换。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// error.rs</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#[derive(Debug)]</span></span><br><span class="line">  <span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">    HttpError,</span><br><span class="line">    ParseError,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">impl</span> <span class="title class_">std</span>::error::Error <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">      <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        MyCustomError::HttpError =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;HTTP Error&quot;</span>),</span><br><span class="line">        MyCustomError::ParseError =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;Parse Error&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">impl</span> <span class="title class_">From</span>&lt;reqwest::Error&gt; <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">+   <span class="keyword">fn</span> <span class="title function_">from</span>(_: reqwest::Error) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">+     MyCustomError::HttpError</span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">impl</span> <span class="title class_">From</span>&lt;chrono::format::ParseError&gt; <span class="keyword">for</span> <span class="title class_">MyCustomError</span> &#123;</span><br><span class="line">+   <span class="keyword">fn</span> <span class="title function_">from</span>(_: chrono::format::ParseError) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">+     MyCustomError::ParseError</span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;</span><br><span class="line"> <span class="comment">// main.rs</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">mod</span> error;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">  <span class="keyword">use</span> error::MyCustomError;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// skipped, will get back later</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, MyCustomError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">-   <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)</span><br><span class="line">-     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::HttpError)?</span><br><span class="line">-     .json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()</span><br><span class="line">-     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::HttpError)?;</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">-   <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">-     .<span class="title function_ invoke__">map_err</span>(|_| MyCustomError::ParseError)?;</span><br><span class="line">+   <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在移除<code>map_err</code>后代码变得更加整洁了。</p><p>然而,<code>From</code>trait并不是一种能减少使用<code>map_err</code>的魔法。在上面的例子中，将类型转换从<code>get_current_data</code>函数内部移动到<code>From&lt;X&gt; for MyCustomError</code>实现.那么如果一个错误没有在<code>MyCustomError</code>出现过，就不能使用From trait，从而只能使用<code>map_err</code></p><h2 id="模式匹配自定义错误"><a href="#模式匹配自定义错误" class="headerlink" title="模式匹配自定义错误"></a><strong>模式匹配自定义错误</strong></h2><p>一直忽略了main的变动，现在要看看如何去处理自定义错误类型的模式匹配问题。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// main.rs</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">mod</span> error;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> chrono::NaiveDate;</span><br><span class="line">  <span class="keyword">use</span> error::MyCustomError;</span><br><span class="line">  <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">get_current_date</span>() &#123;</span><br><span class="line">      <span class="title function_ invoke__">Ok</span>(date) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;We&#x27;ve time travelled to &#123;&#125;!!&quot;</span>, date),</span><br><span class="line">      <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Oh noes, we don&#x27;t know which era we&#x27;re in! :(&quot;</span>);</span><br><span class="line">-       <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(err) = e.downcast_ref::&lt;reqwest::Error&gt;() &#123;</span><br><span class="line">-         <span class="built_in">eprintln!</span>(<span class="string">&quot;Request Error: &#123;&#125;&quot;</span>, err)</span><br><span class="line">-       &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(err) = e.downcast_ref::&lt;chrono::format::ParseError&gt;() &#123;</span><br><span class="line">-         <span class="built_in">eprintln!</span>(<span class="string">&quot;Parse Error: &#123;&#125;&quot;</span>, err)</span><br><span class="line">-       &#125;</span><br><span class="line">+       <span class="keyword">match</span> e &#123;</span><br><span class="line">+         MyCustomError::HttpError =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Request Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">+         MyCustomError::ParseError =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;Parse Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">+       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">get_current_date</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, MyCustomError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="string">&quot;https://postman-echo.com/time/object&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(url)?.json::&lt;HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt;&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">formatted_date</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, res[<span class="string">&quot;years&quot;</span>], res[<span class="string">&quot;months&quot;</span>] + <span class="number">1</span>, res[<span class="string">&quot;date&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">parsed_date</span> = NaiveDate::<span class="title function_ invoke__">parse_from_str</span>(formatted_date.<span class="title function_ invoke__">as_str</span>(), <span class="string">&quot;%Y-%m-%d&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">date</span> = parsed_date.format(<span class="string">&quot;%Y %B %d&quot;</span>).<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(date)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>请注意，与Boxed错误不同，实际上可以直接匹配MyCustomError enum中的变量。<a href="https://zhuanlan.zhihu.com/p/492292655"></a></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust构建自己的第一个项目</title>
      <link href="/2024/07/17/2024-07-17-Rust%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/07/17/2024-07-17-Rust%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust构建自己的第一个项目"><a href="#Rust构建自己的第一个项目" class="headerlink" title="Rust构建自己的第一个项目"></a>Rust构建自己的第一个项目</h1><p>几个核心命令：</p><p>cargo new xxx：用于新建项目</p><p>cargo build：用于在Cargo.toml中添加dependencies进行依赖的下载和编译</p><p>cargo run：用于运行</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>在目录下输入下列指令，例如要构建一个叫做hello-rust的项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello-rust</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/17/EBDu3SwHjL1neC7.png" alt="image-20240717224533358.png"></p><p><code>Cargo</code> 已经帮我们创建好默认项目了，还创建了个git的本地仓库，还有一些配置文件， <code>src/main.rs</code> 为编写应用代码的地方。</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>使用cargo run命令运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/17/mNL3feJjDEgQwSM.png" alt="image-20240717224940931.png"></p><p>可以看到会经历一个编译的过程后，打印出Hello,world！信息</p><h2 id="编写Hello-Rust"><a href="#编写Hello-Rust" class="headerlink" title="编写Hello-Rust"></a>编写Hello-Rust</h2><p>Cargo.toml文件是一个管理项目配置的文件，包括项目依赖等相关配置</p><p>添加配置在dependencies中：</p><p><img src="https://s2.loli.net/2024/07/17/f3v2g9nkEeCP1Bw.png" alt="image-20240717225346375.png"></p><p>在命令行中运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/17/q5HyoCIZ3QMJfiS.png" alt="image-20240717225528135.png"></p><p>可以看到除了我们自定义添加的ferris-say版本的依赖，还会自动添加好依赖的依赖</p><p>接下来就在 <code>src/main.rs</code> 中写入以下内容:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> ferris_says::say; <span class="comment">// from the previous step</span></span><br><span class="line"><span class="keyword">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">stdout</span> = <span class="title function_ invoke__">stdout</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">message</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello fellow Rustaceans!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">width</span> = message.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">count</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">writer</span> = BufWriter::<span class="title function_ invoke__">new</span>(stdout.<span class="title function_ invoke__">lock</span>());</span><br><span class="line">    <span class="title function_ invoke__">say</span>(message.<span class="title function_ invoke__">as_bytes</span>(), width, &amp;<span class="keyword">mut</span> writer).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/17/t3oD9w8rgWaKBeu.png" alt="image-20240717230124205.png"></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股</title>
      <link href="/2024/07/10/2024-06-24-Java%E5%85%AB%E8%82%A1/"/>
      <url>/2024/07/10/2024-06-24-Java%E5%85%AB%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java八股"><a href="#Java八股" class="headerlink" title="Java八股"></a>Java八股</h1><p><a href="https://blog.csdn.net/leader_song/article/details/132094080?ops_request_misc=%7B%22request_id%22:%22171151104816800211548110%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171151104816800211548110&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-132094080-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=java%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%872023&spm=1018.2226.3001.4187">2024年 Java 面试八股文（20w字）_java八股文2023-CSDN博客</a></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><a href="https://blog.csdn.net/qq_62124267/article/details/135418799?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-135418799-blog-124295453.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=1">面试被问了几百遍的 IOC 和 AOP ，一篇文章带你搞清楚！！！_ioc和aop的原理面试-CSDN博客</a></p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p><a href="https://blog.csdn.net/crazymakercircle/article/details/125059491?ops_request_misc=%7B%22request_id%22:%22171164453116800225568300%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171164453116800225568300&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125059491-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=sentinel&spm=1018.2226.3001.4187">sentinel （史上最全）-CSDN博客</a></p><h2 id="Gradle-Maven"><a href="#Gradle-Maven" class="headerlink" title="Gradle&amp;Maven"></a>Gradle&amp;Maven</h2><p><a href="https://flydean.blog.csdn.net/article/details/113803536?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-113803536-blog-133955312.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-113803536-blog-133955312.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2">gradle中的build script详解_gradle buildscript-CSDN博客</a></p><p>[Gradle和Maven的区别-CSDN博客](<a href="https://blog.csdn.net/weixin_45626288/article/details/131973787?ops_request_misc=%7B%22request_id%22:%22172024305816800185819613%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024305816800185819613&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131973787-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=gradle">https://blog.csdn.net/weixin_45626288/article/details/131973787?ops_request_misc=%7B%22request%5Fid%22%3A%22172024305816800185819613%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172024305816800185819613&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131973787-null-null.142^v100^pc_search_result_base8&amp;utm_term=gradle</a> maven&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="线程池和锁"><a href="#线程池和锁" class="headerlink" title="线程池和锁"></a>线程池和锁</h2><p><a href="https://blog.csdn.net/qq_54070103/article/details/124108541?ops_request_misc=%7B%22request_id%22:%22172024328716800184129598%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024328716800184129598&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124108541-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E9%94%81&spm=1018.2226.3001.4187">面试+基础—–详细解读多线程（线程池、锁、死锁…）_多线程井发、死锁问题、线程池原理等-CSDN博客</a></p><p><a href="https://blog.csdn.net/u013541140/article/details/95225769?ops_request_misc=%7B%22request_id%22:%22172024532116800211519152%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024532116800211519152&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-95225769-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BA%BF%E7%A8%8B%E6%B1%A0&spm=1018.2226.3001.4187">Java 多线程：彻底搞懂线程池_java线程池-CSDN博客</a></p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p><a href="https://blog.csdn.net/qq_35190492/article/details/113174359?ops_request_misc=%7B%22request_id%22:%22172024555916800184190893%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024555916800184190893&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113174359-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=netty&spm=1018.2226.3001.4187">【硬核】肝了一月的Netty知识点-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_33384191/article/details/129187707?ops_request_misc=%7B%22request_id%22:%22172024555916800184190893%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024555916800184190893&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129187707-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=netty&spm=1018.2226.3001.4187">超详细Netty入门，看这篇就够了！_netty框架-CSDN博客</a></p><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p><a href="https://blog.csdn.net/qq_41317495/article/details/108553894?ops_request_misc=%7B%22request_id%22:%22172024618916800185817050%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024618916800185817050&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108553894-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=JUnit&spm=1018.2226.3001.4187">JUnit详解-CSDN博客</a></p><h2 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a>Pytest</h2><p><a href="https://blog.csdn.net/lovedingd/article/details/98952868?ops_request_misc=%7B%22request_id%22:%22172024619416800226527972%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024619416800226527972&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-98952868-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=pytest&spm=1018.2226.3001.4187">Python测试框架之pytest详解_pytest框架详解-CSDN博客</a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><a href="https://blog.csdn.net/m0_61503020/article/details/125456520?ops_request_misc=%7B%22request_id%22:%22172024335816800225519741%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024335816800225519741&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125456520-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=docker&spm=1018.2226.3001.4187">docker入门，这一篇就够了。-CSDN博客</a></p><blockquote><p>docker run [可选参数] image 命令 #启动容器（无镜像会先下载镜像）<br>#参数说明<br>–name &#x3D; “Name”   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷</p></blockquote><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>[JAVA内存分配原理解析–栈、堆、常量池_堆,栈,常量池详解-CSDN博客](<a href="https://blog.csdn.net/gb702250823/article/details/92801716?ops_request_misc=%7B%22request_id%22:%22171151029816800225558425%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171151029816800225558425&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-92801716-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=java">https://blog.csdn.net/gb702250823/article/details/92801716?ops_request_misc=%7B%22request%5Fid%22%3A%22171151029816800225558425%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171151029816800225558425&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-92801716-null-null.142^v100^pc_search_result_base2&amp;utm_term=java</a> 常量池 栈 堆&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/LJWfbj666/article/details/139120947?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-139120947.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">java的垃圾回收(GC)详解_java gc-CSDN博客</a></p><p><a href="https://blog.csdn.net/ZHHX666/article/details/124484199?ops_request_misc=%7B%22request_id%22:%22172025262616800182710898%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172025262616800182710898&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124484199-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8&spm=1018.2226.3001.4187">Java - 类加载器_java类加载器-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端微服务-programmer-club项目的设计与实现</title>
      <link href="/2024/07/10/2024-07-10-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/07/10/2024-07-10-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员社区项目"><a href="#程序员社区项目" class="headerlink" title="程序员社区项目"></a>程序员社区项目</h1><p><img src="https://s2.loli.net/2024/07/10/zbYgoZyvmxdwP3n.png" alt="image-20240710162449654.png"></p><h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><p>前后端分离，后端负责所有的设计、接口的定义，后端先行，前端协同，通过接口文档，采用apifox的文档进行对接。</p><p>敏捷开发，版本上线迭代，需求分析-&gt;功能设计-&gt;详细设计-&gt;编码实现。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>后端：IDEA</p><p>前端：VSCode</p><p>项目管理：giteazycode</p><p>包依赖管理：Maven3.6.0</p><p>数据库：Mysql5.7</p><p>数据库连接池和监控库：Druid</p><p>框架：Springboot 2.4.2</p><p>数据库图形化：Navicat</p><p>接口管理工具：APIPost7</p><p>Redis桌面工具：RedisDesktop</p><p>表建模：PDManager</p><p>原型设计：axure8</p><p>原型组件库: antdesign</p><p>代码生成器：easycode（idea的plugin市场）</p><p>一些插件：mybatis（类-&gt;dao-&gt;数据库），easycode（由数据库表生成相应代码）, preconditions（参数校验）</p><p>node.js</p><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="传统项目"><a href="#传统项目" class="headerlink" title="传统项目"></a>传统项目</h3><p>[SpringMVC框架（详解）-CSDN博客](<a href="https://blog.csdn.net/H20031011/article/details/131511482?ops_request_misc=%7B%22request_id%22:%22172145077916800222810035%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172145077916800222810035&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131511482-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring">https://blog.csdn.net/H20031011/article/details/131511482?ops_request_misc=%7B%22request%5Fid%22%3A%22172145077916800222810035%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172145077916800222810035&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131511482-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring</a> mvc架构&amp;spm&#x3D;1018.2226.3001.4187)</p><p>一般的mvc：model，view，controller</p><p>SpringMVC：controller(view+controller)，service（业务逻辑），dao（数据库）</p><p><img src="https://s2.loli.net/2024/07/10/IkmcCyEaiVK8jvT.png" alt="image-20240710175347652.png"></p><p><img src="https://s2.loli.net/2024/07/20/4xSwLQAW6PBKqYI.png" alt="image-20240720125604514.png"></p><h3 id="现有的架构"><a href="#现有的架构" class="headerlink" title="现有的架构"></a>现有的架构</h3><p><a href="https://blog.csdn.net/qq_49619863/article/details/127836283?ops_request_misc=%7B%22request_id%22:%22172060612716800222827668%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172060612716800222827668&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127836283-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ddd%E6%9E%B6%E6%9E%84&spm=1018.2226.3001.4187">DDD架构-CSDN博客</a></p><p>[浅谈架构设计：MVC架构与DDD架构【开发实践】_ddd架构和mvc架构区别-CSDN博客](<a href="https://blog.csdn.net/qq_40656637/article/details/137344153?ops_request_misc=%7B%22request_id%22:%22172145093416800184184571%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172145093416800184184571&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-137344153-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring">https://blog.csdn.net/qq_40656637/article/details/137344153?ops_request_misc=%7B%22request%5Fid%22%3A%22172145093416800184184571%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172145093416800184184571&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-137344153-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring</a> mvc架构和ddd架构&amp;spm&#x3D;1018.2226.3001.4187)</p><p>ddd 架构</p><p><img src="https://s2.loli.net/2024/07/10/6L8j9VMkRHxWOga.png" alt="cbc3530efc1e41d6b6a94455d804d3d3[1].png"></p><ul><li><p>用户接口层（User Interface ）：负责向用户显示信息和解释用户指令（是DDD架构中的表现层）（表现层是视图层的超集，概念有所区别，知道最上层就是表现层即可）</p></li><li><p>应用层（Application）：很“薄”的一层，理论上不应该有业务规则或逻辑，主要面向用例和流程相关的操作。在应用层协调多个服务和领域对象完成服务的组合和编排，协作完成业务操作。此外，应用层也是微服务之间交互的通道，它可以调用其它微服务的应用服务，完成微服务之间服务的组合和编排</p></li><li><p>领域层（Domain）：是实现企业核心业务逻辑，通过各种校验手段保证业务的正确性。领域层主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。领域层包含聚合根、实体、值对象、领域服务等领域模型中的领域对象</p></li><li><p>基础层（Infrastructure）：贯穿所有层，为其它层提供通用的技术和基础服务，包括第三方工具、驱动、消息中间件、网关、文件、缓存以及数据库等</p></li><li><p>个人理解：将service层拆分为了应用层和领域层。其中应用层关注于用例和流程，不涉及业务规则或逻辑，通过组合和编排下层的领域层来完成业务操作。而领域层用于封装具体的业务规则或逻辑，拆分出来的领域层不再和具体流程关联，实现了高内聚和低耦合，还提高了领域层的可复用性。用户接口层和基础层则为原来的视图层和dao层的扩展，新增了部分职责功能。</p></li></ul><p>例子：</p><ol><li><strong>电子商务领域</strong>：<ul><li>实体：用户、产品、订单、支付记录。</li><li>聚合：购物车、订单详情。</li><li>领域服务：订单处理、库存管理、用户认证。</li></ul></li><li><strong>交通物流领域</strong>：<ul><li>实体：司机、车辆、货物、运输任务。</li><li>聚合：运输订单、车队管理。</li><li>领域服务：路径规划、货物追踪、调度优化。</li></ul></li></ol><p><img src="https://s2.loli.net/2024/07/10/eTX5pdGHV3OrFIB.png" alt="image-20240710175452746.png"></p><ol><li><p><strong>API（对外接口层）</strong>：这一层负责定义对外提供的服务接口，通常用于与客户端或其他服务进行交互。</p></li><li><p><strong>Controller</strong>：在传统的MVC架构中，控制器用于处理用户的请求。在这里，它用于接收API层的请求，并将请求转换为应用层可以理解的格式。</p></li><li><p><strong>DTO（Data Transfer Object）</strong>：</p><p>代表数据传输对象的意思</p><p>是一种设计模式之间传输数据的软件应用系统，数据传输目标往往是数据访问对象从数据库中检索数据</p><p>数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具任何行为除了存储和检索的数据（访问和存取器）</p><p>简而言之，就是<strong>接口之间传递的数据封装</strong></p><p>表里面有十几个字段：id，name，gender（M&#x2F;F)，age……</p><p>页面需要展示三个字段：name，gender(男&#x2F;女)，age</p><p>DTO由此产生，一是能提高数据传输的速度(减少了传输字段)，二能隐藏后端表结构。</p></li><li><p><strong>BO（Business Object）</strong>：</p><p>代表业务对象的意思，Bo就是把业务逻辑封装为一个对象（注意是逻辑，业务逻辑），这个对象可以包括一个或多个其它的对象。通过调用Dao方法，结合Po或Vo进行业务操作。</p><p>形象描述为一个对象的形为和动作，当然也有涉及到基它对象的一些形为和动作。比如处理一个人的业务逻辑，该人会睡觉，吃饭，工作，上班等等行为，还有可能和别人发关系的行为，处理这样的业务逻辑时，我们就可以针对BO去处理。</p><p>再比如投保人是一个PO，被保险人是一个PO，险种信息也是一个PO等等，他们组合起来就是一张保单的BO。</p></li><li><p><strong>PO&#x2F;DO: Persistent Object &#x2F; Data Object，持久对象 &#x2F; 数据对象。</strong></p><p>它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p></li><li><p><strong>VO: View Object, 视图模型，展示层对象</strong>:</p><p>对应页面显示（web页面&#x2F;移动端H5&#x2F;Native视图）的数据对象。</p></li><li><p><strong>Application层（应用层）</strong>：这一层包含应用服务，它们协调领域对象来完成业务逻辑。它还包含一些业务逻辑的转换逻辑，如DTO到BO的转换。</p></li><li><p><strong>Interceptor</strong>：拦截器，用于在请求处理过程中进行一些前置或后置处理，例如日志记录、权限验证等。</p></li><li><p><strong>Application-MQ（消费者）&#x2F; Application-Job</strong>：这指的是应用层中处理消息队列消息的组件，或者定时任务的处理。</p></li><li><p><strong>Domain层（领域层）</strong>：这是DDD中的核心层，包含业务逻辑和领域模型。领域层专注于业务规则和业务实体。</p></li><li><p><strong>Service</strong>：领域服务，执行领域逻辑但不自然属于任何实体或值对象的操作。</p></li><li><p><strong>Entity&#x2F;PO（Persistent Object）</strong>：持久化对象，通常与数据库存储相关，代表数据库中的记录。</p></li><li><p><strong>Mapper</strong>：数据访问对象，用于将领域对象映射到数据库表。</p></li><li><p><strong>Infra层（基础设施层）</strong>：提供技术实现，如数据库访问、消息传递、外部服务调用等。</p></li><li><p><strong>RPC</strong>：远程过程调用，用于服务之间的通信。</p></li><li><p><strong>MG（生产者）</strong>：指的是消息生成者，负责生成并发送消息到消息队列。</p></li><li><p><strong>Starter（启动层）</strong>：指的是服务启动时需要自动执行的代码或配置。</p></li><li><p><strong>Aggressive（聚合层）</strong>：聚合层，将多个领域对象聚合成一个更大的业务实体。</p></li><li><p><strong>Config</strong>：配置层，用于存储和访问配置信息。</p></li><li><p><strong>Dict（字典）</strong>：指的是数据字典，用于存储一些固定的数据或映射关系。</p></li><li><p><strong>Common（公共层）</strong>：包含整个应用中多个地方会用到的通用代码或工具。</p></li><li><p><strong>Enums</strong>：枚举，用于定义一组命名的常量。</p></li><li><p><strong>Utils</strong>：工具类，提供一些通用的辅助功能。</p></li></ol><p>req-&gt;dto-&gt;do-&gt;bo-&gt;entity-&gt;po</p><p><img src="https://s2.loli.net/2024/07/10/vcwy8WMZKz7pNSe.jpg" alt="UBWaSonlxTkZyGs[1].jpg"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://s2.loli.net/2024/07/17/YwcR1HeWvrqD72s.png" alt="image-20240717163452115.png"></p><h4 id="后端项目目录（backend）"><a href="#后端项目目录（backend）" class="headerlink" title="后端项目目录（backend）"></a>后端项目目录（backend）</h4><ul><li><strong>asyncTool</strong>: 包含异步处理工具或库，用于处理异步任务。</li><li><strong>doc</strong>: 存放项目文档，如API文档、技术规范等。</li><li><strong>jc-club-auth</strong>: 认证服务，负责用户认证和授权。</li><li><strong>jc-club-circle</strong>: 可能与社区圈子或用户组相关功能。</li><li><strong>jc-club-common-starter</strong>: 通用启动器或工具类，提供项目通用功能。</li><li><strong>jc-club-gateway</strong>: 网关服务，负责请求路由、负载均衡等。</li><li><strong>jc-club-gen</strong>: 代码生成工具，可能用于快速生成项目代码。</li><li><strong>jc-club-interview</strong>: 面试相关功能，可能包含面试题库或模拟面试。</li><li><strong>jc-club-oss</strong>: 对象存储服务，用于管理文件存储。</li><li><strong>jc-club-practice</strong>: 实践项目或示例代码。</li><li><strong>jc-club-subject</strong>: 主题或课程相关功能，可能用于教育或培训。</li><li><strong>jc-club-wx</strong>: 微信相关功能，可能包含微信公众号接口或小程序支持。</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>[Spring和Spring Boot之间的区别（小结）_spring和springboot的区别-CSDN博客](<a href="https://blog.csdn.net/mengxin_chen/article/details/116240326?ops_request_misc=%7B%22request_id%22:%22172145220016800227442776%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172145220016800227442776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116240326-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=spring%E5%92%8Cspring">https://blog.csdn.net/mengxin_chen/article/details/116240326?ops_request_misc=%7B%22request%5Fid%22%3A%22172145220016800227442776%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172145220016800227442776&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116240326-null-null.142^v100^pc_search_result_base8&amp;utm_term=spring和spring</a> boot区别&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="https://s2.loli.net/2024/07/10/SRyfeJV49ksGvNl.png" alt="image-20240710163626898.png"></p><h2 id="服务器中间件"><a href="#服务器中间件" class="headerlink" title="服务器中间件"></a>服务器中间件</h2><p>服务器采用的京东云 centos</p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io -y </span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">docker version </span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="Docker安装mysql"><a href="#Docker安装mysql" class="headerlink" title="Docker安装mysql"></a>Docker安装mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7 </span><br><span class="line">docker images </span><br><span class="line">mkdir -p /home/service/mysql/data </span><br><span class="line">mkdir -p /home/service/mysql/conf</span><br><span class="line">cd /home/service/mysql/conf</span><br><span class="line">touch my.cnf</span><br></pre></td></tr></table></figure><p>将以下内容粘入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">default-time_zone = &#x27;+8:00&#x27;</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /home/service/mysql/logs:/logs -v /home/service/mysql/data:/mysql_data -e MYSQL_ROOT_PASSWORD=Wing1Q2W#E -d mysql:5.7</span><br><span class="line">docker exec -it mysql bash </span><br><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;admin&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;Wing1Q2W#E&#x27;;</span><br><span class="line">GRANT ALL ON *.* TO &#x27;admin&#x27;@&#x27;%&#x27;; </span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure><p>docker ps 查看启动状态。</p><p>navicat直接连接即可，云服务器需要开启防火墙。</p><h3 id="Maven配置国内源"><a href="#Maven配置国内源" class="headerlink" title="Maven配置国内源"></a>Maven配置国内源</h3><p>maven一定要放到Jenkins的数据挂载目录内，这样容器才能读到。参考开发工具选型里面的maaven包。</p><p>在maven的conf的setting的mirrors里面进行配置，配置后，Jenkins下载包会非常的快。</p><mirror>    <id>alimaven</id>    <name>aliyun maven</name>    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>    <mirrorOf>central</mirrorOf></mirror><h3 id="Docker安装Jenkins"><a href="#Docker安装Jenkins" class="headerlink" title="Docker安装Jenkins"></a>Docker安装Jenkins</h3><p>机器上要有 jdk，服务器可以执行如下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><p>jenkins开始</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins</span><br><span class="line">docker pull jenkins/jenkins:2.414.2</span><br><span class="line">docker run -d -u root -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins jenkins/jenkins:2.414.2</span><br><span class="line">docker start jenkins</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/10/M5EsQGFc1BZRXKO.png" alt="image-20240710183915242.png"></p><p>这样就是启动成功了。然后通过8080端口进行访问。访问的过程会很慢等待一下。服务器内存最好大点，内存小的容易启动不起来。</p><p>通过log来看一下密码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 67166b666c76</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/06/ikvAUXqgBdT3Yem.png" alt="image-20240710184049696.png"></p><p>访问之后，输入上面的密码。</p><p>点击继续后，选择 按照推荐安装插件。然后继续等待。</p><p><img src="https://s2.loli.net/2024/07/10/c47Sz8MmHEie1q9.png" alt="image-20240710184132391.png"></p><p>界面如下：</p><p><img src="https://s2.loli.net/2024/07/10/Xth1ImGUkQxvTeN.png" alt="image-20240710184237761.png"></p><p><strong>新建任务</strong></p><p>上面输入任务名称，下面选择构建自由风格</p><p><img src="https://s2.loli.net/2024/07/10/3I4O7YSW8Xm9Cag.png" alt="image-20240710184414482.png"></p><p>选择源码管理，配置maven，注意：maven一定要放到Jenkins的数据挂载目录内，这样容器才能读到。</p><p><img src="https://s2.loli.net/2024/07/10/pXRAlrL3iSWkdMQ.png" alt="image-20240710184525082.png"></p><p><strong>配置ssh服务器</strong></p><p><img src="https://s2.loli.net/2024/07/10/Af3ZOncUWhbgRmy.png" alt="image-20240710184610325.png"></p><p><img src="https://s2.loli.net/2024/07/10/AdwqUtZPVxmolQb.png" alt="image-20240710184703520.png"></p><p>设置密码即可。</p><p><strong>配置ssh分发</strong></p><p><img src="https://s2.loli.net/2024/07/10/9vxsIKnEQPHNF7k.png" alt="image-20240710184752937.png"></p><p><strong>配置shell脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cp /var/jenkins_home/workspace/programmer-club-subject/programmer-club-subject/programmer-club-starter/target/programmer-club-starter.jar /var/jenkins_home/jar/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">APP_NAME=programmer-club-starter.jar</span><br><span class="line">LOG_NAME=programmer-club-starter.log</span><br><span class="line"></span><br><span class="line">pid=`ps -ef | grep $APP_NAME | grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">function is_exist()&#123;</span><br><span class="line">pid=`ps -ef | grep $APP_NAME | grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ -z $&#123;pid&#125; ]; then</span><br><span class="line">String=&quot;notExist&quot;</span><br><span class="line">echo $String</span><br><span class="line">else</span><br><span class="line">String=&quot;exist&quot;</span><br><span class="line">echo $String</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str=$(is_exist)</span><br><span class="line">if [ $&#123;str&#125; = &quot;exist&quot; ]; then</span><br><span class="line">echo &quot; 检测到已经启动的程序，pid 是 $&#123;pid&#125; &quot;</span><br><span class="line">kill -9 $pid</span><br><span class="line">else</span><br><span class="line">echo &quot; 程序没有启动了 &quot;</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str=$(is_exist)</span><br><span class="line">if [ $&#123;str&#125; = &quot;exist&quot; ]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; 已经启动了. pid=$&#123;pid&#125; .&quot;</span><br><span class="line">else</span><br><span class="line">source /etc/profile</span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line">nohup java -Xms300m -Xmx300m -jar /var/jenkins_home/jar/$APP_NAME   &gt;$LOG_NAME 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;程序已重新启动...&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="yum安装JDK"><a href="#yum安装JDK" class="headerlink" title="yum安装JDK"></a>yum安装JDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><h3 id="Docker安装minio，搭建自己的oss服务器"><a href="#Docker安装minio，搭建自己的oss服务器" class="headerlink" title="Docker安装minio，搭建自己的oss服务器"></a>Docker安装minio，搭建自己的oss服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search minio</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/10/iAn9flaIqCROozt.png" alt="image-20240710185255132.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line">docker run -p 9000:9000 -p 9090:9090 \</span><br><span class="line"> --name minio \</span><br><span class="line"> -d --restart=always \</span><br><span class="line"> -e &quot;MINIO_ACCESS_KEY=minioadmin&quot; \</span><br><span class="line"> -e &quot;MINIO_SECRET_KEY=minioadmin&quot; \</span><br><span class="line"> -v /mydata/minio/data:/data \</span><br><span class="line"> minio/minio server \</span><br><span class="line"> /data --console-address &quot;:9090&quot; -address &quot;:9000&quot;</span><br></pre></td></tr></table></figure><p>启动后，访问机器ip+9090，进入minio的界面，输入用户名或密码后可以访问。</p><p><img src="https://s2.loli.net/2024/07/10/g5FPeCrX4x1AbWd.png" alt="image-20240710185416658.png"></p><h4 id="Docker安装miniomc突破7天限制"><a href="#Docker安装miniomc突破7天限制" class="headerlink" title="Docker安装miniomc突破7天限制"></a>Docker安装miniomc突破7天限制</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/mc</span><br><span class="line"></span><br><span class="line">docker run -it --entrypoint=/bin/sh minio/mc</span><br><span class="line"></span><br><span class="line">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br><span class="line"></span><br><span class="line">mc config host add minio http://xxx.xx.xx.xxx:9000 GrVCPXySKgGoJiGgXmtv 0xlqSI9GXvnBOtp0GwUj5OshKNBk9JgwoexotbVV</span><br><span class="line"></span><br><span class="line">mc ls minio</span><br><span class="line"></span><br><span class="line">mc anonymous</span><br><span class="line"></span><br><span class="line">mc anonymous set download minio/jichi</span><br></pre></td></tr></table></figure><h3 id="Docker查看运行容器启动命令"><a href="#Docker查看运行容器启动命令" class="headerlink" title="Docker查看运行容器启动命令"></a>Docker查看运行容器启动命令</h3><p>安装一个小工具 get_command_4_run_container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull cucker/get_command_4_run_container</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以nacos为例子</span></span><br><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock cucker/get_command_4_run_container nacos</span><br></pre></td></tr></table></figure><p>看到如下的启动命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \ </span><br><span class="line">--name nacos \ </span><br><span class="line">--privileged \ </span><br><span class="line">--cgroupns host \ </span><br><span class="line">--env JVM_XMX=256m \ </span><br><span class="line">--env MODE=standalone \ </span><br><span class="line">--env JVM_XMS=256m \ </span><br><span class="line">-p 8848:8848/tcp \ </span><br><span class="line">-p 9848:9848/tcp \ </span><br><span class="line">--restart=always \ </span><br><span class="line">-w /home/nacos \ </span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><h3 id="Docker安装nacos"><a href="#Docker安装nacos" class="headerlink" title="Docker安装nacos"></a>Docker安装nacos</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search nacos</span><br><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><p>镜像拉完之后，启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nacos \</span><br><span class="line">  --privileged  \</span><br><span class="line">  --cgroupns host \</span><br><span class="line">  --env JVM_XMX=256m \</span><br><span class="line"> --env MODE=standalone \</span><br><span class="line">  --env JVM_XMS=256m \</span><br><span class="line">  -p 8848:8848/tcp \</span><br><span class="line">  -p 9848:9848/tcp \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -w /home/nacos \</span><br><span class="line">  nacos/nacos-server</span><br></pre></td></tr></table></figure><p>云服务器不要忘记打开防火墙端口。</p><p>访问 ip 地址+8848 &#x2F;nacos 即可进入控制台</p><p><img src="https://s2.loli.net/2024/07/17/omQFLlRk7htf5bB.png" alt="image-20240717151037534.png"></p><p>nacos 的文档：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><p>nacos 的架构原理：<a href="https://developer.aliyun.com/ebook/36?spm=a2c6h.20345107.ebook-index.18.152c2984fsi5ST">https://developer.aliyun.com/ebook/36?spm=a2c6h.20345107.ebook-index.18.152c2984fsi5ST</a></p><h3 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>拉下镜像之后，点击下面地址选择自己需要的 redis 版本的配置文件</p><p><a href="https://redis.io/docs/management/config/">https://redis.io/docs/management/config/</a></p><p><img src="https://s2.loli.net/2024/07/17/QifoExYAU6VzSnt.png" alt="image-20240717151249025.png"></p><p>提前在服务器建立 &#x2F;data&#x2F;redis 文件夹，touch 文件redis.conf，也可以上面的直接复制</p><p><code>redis.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo no</span><br><span class="line">set-proc-title yes</span><br><span class="line">proc-title-template &quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span><br><span class="line">locale-collate &quot;&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动命令</span><br><span class="line">docker run -p 6379:6379 --name redis -v /data/redis/redis.conf:/etc/redis/redis.conf  -v /data/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>-p 6379:6379:把容器内的6379端口映射到宿主机6379端口 </p><p>-v &#x2F;data&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf：把宿主机配置好的redis.conf放到容器内的这个位置中 </p><p>-v &#x2F;data&#x2F;redis&#x2F;data:&#x2F;data：把redis持久化的数据在宿主机内显示，做数据备份</p><p>redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf：这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动 </p><p>–appendonly yes：redis启动后数据持久化</p><p>工具：Redis Desktop Manager</p><p><strong>IDEA连接redis可以直接下载 plugin 的 redis 插件</strong></p><h3 id="Docker安装es"><a href="#Docker安装es" class="headerlink" title="Docker安装es"></a>Docker安装es</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">docker search elasticsearch</span><br><span class="line"></span><br><span class="line">docker pull elasticsearch:7.3.1</span><br><span class="line"></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot;  -e ES_JAVA_OPTS=&quot;-Xms1024m -Xmx1024m&quot; 3d3aa92f641f</span><br></pre></td></tr></table></figure><p>启动成功之后，访问<a href="http://xxx.xx.xx.xxx:9200/">http://xxx.xx.xx.xxx:9200/</a></p><p><img src="https://s2.loli.net/2024/07/17/g9zDn8wIMPYakiS.png" alt="image-20240717151757675.png"></p><p>看到这个就证明成功了！</p><p>插件：es-head</p><h3 id="docker安装xxl-job"><a href="#docker安装xxl-job" class="headerlink" title="docker安装xxl-job"></a>docker安装xxl-job</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker search xxl-job</span><br><span class="line">docker pull xuxueli/xxl-job-admin:2.4.0</span><br><span class="line"></span><br><span class="line">docker run  -d \</span><br><span class="line">        -p 8088:8088\</span><br><span class="line">        -v /tool/xxl-job/logs:/data/applogs \</span><br><span class="line">        -v /tool/xxl-job/application.properties:/xxl-job/xxl-job-admin/src/main/resources/application.properties \</span><br><span class="line">        -e PARAMS=&quot;--server.port=8088\</span><br><span class="line">        --spring.datasource.url=jdbc:mysql://xxx.xx.xx.xxx:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai \</span><br><span class="line">        --spring.datasource.username=root \</span><br><span class="line">        --spring.datasource.password=Wing1Q2W#E&quot; \</span><br><span class="line">        --name xxl-job-admin  \</span><br><span class="line">xuxueli/xxl-job-admin:2.4.0</span><br></pre></td></tr></table></figure><h3 id="rocketmq安装"><a href="#rocketmq安装" class="headerlink" title="rocketmq安装"></a>rocketmq安装</h3><p>官网地址：<a href="https://rocketmq.apache.org/">https://rocketmq.apache.org/</a></p><p>安装包上传到 linux 的&#x2F;soft 文件夹，没有此文件夹，先创建，不过在 es 的时候已经创建过了。</p><p><img src="https://s2.loli.net/2024/07/17/eEKGOkDYhwJUHxT.png" alt="image-20240717152141331.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip  可以解压zip包的依赖</span><br><span class="line">unzip rocketmq-all-4.8.0-bin-release.zip</span><br><span class="line">cd rocketmq-all-4.8.0-bin-release</span><br><span class="line">cd bin</span><br><span class="line">vim runserver.sh</span><br><span class="line">将其中的xmx，xms等进行修改256m，弄小一点，让服务器用</span><br><span class="line">vim runbroker.sh</span><br><span class="line">同理修改其中的xmx，xms等进行修改256m，弄小一点，让服务器用</span><br><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><p>启动broker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">nohup sh mqbroker -n localhost:9876 &amp;</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><p>发送消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><p>如果发送消息报错，建立文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/store</span><br><span class="line">mkdir commitlog </span><br><span class="line">cd commitlog</span><br><span class="line">mkdir consumequeue</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh bin/mqshutdown broker</span><br><span class="line">sh bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure><p><strong>安装控制台</strong></p><p><img src="https://s2.loli.net/2024/07/17/QmgKi1q86yeVaR3.png" alt="image-20240717152526211.png"></p><p>更改端口和配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -Xms300m -Xmx300m -jar rocketmq-console.jar &gt; console.log &amp;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/17/QvTwp6AJcBnLKjV.png" alt="image-20240717152632964.png"></p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><h4 id="数据库表建模JSON"><a href="#数据库表建模JSON" class="headerlink" title="数据库表建模JSON"></a>数据库表建模JSON</h4><p><strong>刷题模块</strong></p><p><img src="https://s2.loli.net/2024/07/17/AE9ZyjdKSlap1tb.png" alt="image-20240717154028356.png"></p><p><strong>SQL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_radio`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_radio`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`     <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `option_type`    tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;a,b,c,d&#x27;</span>,</span><br><span class="line">    `option_content` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;选项内容&#x27;</span>,</span><br><span class="line">    `is_correct`     tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否正确&#x27;</span>,</span><br><span class="line">    `created_by`     <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`   datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`      <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `is_deleted`     <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;单选题信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_multiple`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_multiple`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`     <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `option_type`    <span class="type">bigint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;选项类型&#x27;</span>,</span><br><span class="line">    `option_content` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;选项内容&#x27;</span>,</span><br><span class="line">    `is_correct`     tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否正确&#x27;</span>,</span><br><span class="line">    `created_by`     <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`   datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`      <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`     <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;多选题信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_mapping`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_mapping`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`   <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `category_id`  <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类id&#x27;</span>,</span><br><span class="line">    `label_id`     <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;标签id&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">536</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;题目分类关系表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_liked`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_liked`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`   <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `like_user_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞人id&#x27;</span>,</span><br><span class="line">    `status`       <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞状态 1点赞 0不点赞&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime                        <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime                        <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `uniq_like` (`subject_id`,`like_user_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;点赞唯一索引&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_bin COMMENT<span class="operator">=</span><span class="string">&#x27;题目点赞表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_label`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_label`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `label_name`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;标签分类&#x27;</span>,</span><br><span class="line">    `sort_num`     <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;排序&#x27;</span>,</span><br><span class="line">    `category_id`  <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">64</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;题目标签表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_judge`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_judge`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`   <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `is_correct`   tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否正确&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;判断题&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_info`</span><br><span class="line">(</span><br><span class="line">    `id`                <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_name`      <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目名称&#x27;</span>,</span><br><span class="line">    `subject_difficult` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目难度&#x27;</span>,</span><br><span class="line">    `settle_name`       <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出题人名&#x27;</span>,</span><br><span class="line">    `subject_type`      tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目类型 1单选 2多选 3判断 4简答&#x27;</span>,</span><br><span class="line">    `subject_score`     tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目分数&#x27;</span>,</span><br><span class="line">    `subject_parse`     <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目解析&#x27;</span>,</span><br><span class="line">    `created_by`        <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`      datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`         <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    `update_time`       datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `is_deleted`        <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">327</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;题目信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_category`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_category`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `category_name` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">    `category_type` tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类类型&#x27;</span>,</span><br><span class="line">    `image_url`     <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标连接&#x27;</span>,</span><br><span class="line">    `parent_id`     <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父级id&#x27;</span>,</span><br><span class="line">    `created_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`     <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`   datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`    tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否删除 0: 未删除 1: 已删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">12</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;题目分类&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject_brief`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject_brief`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `subject_id`     <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;题目id&#x27;</span>,</span><br><span class="line">    `subject_answer` text COMMENT <span class="string">&#x27;题目答案&#x27;</span>,</span><br><span class="line">    `created_by`     <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`   datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`      <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`     <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">280</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;简答题&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="刷题模块数据模型"><a href="#刷题模块数据模型" class="headerlink" title="刷题模块数据模型"></a>刷题模块数据模型</h4><p><img src="https://s2.loli.net/2024/07/17/V8iKD6RWFCJHUab.png" alt="image-20240717162213876.png"></p><p><img src="https://s2.loli.net/2024/07/17/9I7ol1eVBZm3NvA.png" alt="image-20240717154416885.png"><br><img src="https://s2.loli.net/2024/07/17/nbR4qgoGCBw93ik.png" alt="image-20240717154425945.png"><br><img src="https://s2.loli.net/2024/07/17/iYCKuszXPJmLG5t.png" alt="image-20240717154441135.png"><br><img src="https://s2.loli.net/2024/07/17/cuG26enxkZCDtps.png" alt="image-20240717162527674.png"><br><img src="https://s2.loli.net/2024/07/17/KZSErI4H5tVxn2k.png" alt="image-20240717162448319.png"><br><img src="https://s2.loli.net/2024/07/17/V2PGpheKlCJ1Dfw.png" alt="image-20240717154448206.png"><br><img src="https://s2.loli.net/2024/07/17/b85pTjQCnKoW2VB.png" alt="image-20240717154500698.png"></p><p><strong>鉴权模块</strong></p><h3 id="1-刷题模块（微服务模块）"><a href="#1-刷题模块（微服务模块）" class="headerlink" title="1.刷题模块（微服务模块）"></a>1.刷题模块（微服务模块）</h3><p><img src="https://s2.loli.net/2024/07/17/wl4dD9uVb1gnAtB.png" alt="image-20240717163944712.png"></p><p>starter类是用于放置整个项目的启动类的</p><h4 id="产品功能模块"><a href="#产品功能模块" class="headerlink" title="产品功能模块"></a>产品功能模块</h4><p><img src="https://s2.loli.net/2024/07/10/weDZpG3xrbvXtnV.png" alt="image-20240710164145589.png"></p><h4 id="研发功能模块拆分"><a href="#研发功能模块拆分" class="headerlink" title="研发功能模块拆分"></a>研发功能模块拆分</h4><p><img src="https://s2.loli.net/2024/07/10/xjnVqWl3YUD97AB.png" alt="image-20240710164949102.png"></p><h4 id="原型设计"><a href="#原型设计" class="headerlink" title="原型设计"></a>原型设计</h4><p>axrue+antdesign的组件库</p><h5 id="刷题首页"><a href="#刷题首页" class="headerlink" title="刷题首页"></a>刷题首页</h5><p><img src="https://s2.loli.net/2024/07/10/mLyW9JI56dVsefR.png" alt="image-20240710165032544.png"></p><h5 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h5><p><img src="https://s2.loli.net/2024/07/10/s5GYPwTHDFv6pe3.png" alt="image-20240710165319312.png"></p><h4 id="分类模块"><a href="#分类模块" class="headerlink" title="分类模块"></a>分类模块</h4><p><img src="https://s2.loli.net/2024/07/10/OQNz3dAREaLeyTm.png" alt="image-20240710174638222.png"></p><p><strong>分类的概念是面试题的大类。其中我们有两种概念：</strong></p><ol><li><strong>一种是岗位分类，例如后端，前端，测试。</strong></li><li><strong>一种是岗位下细分的分类，比如后端下细分，框架，并发，集合等等。</strong></li></ol><h5 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h5><p>正常的业务逻辑，保证新增后，可以正常的插入数据库即可。</p><h5 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h5><p>crud</p><h5 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h5><p>crud</p><h5 id="首页的分类"><a href="#首页的分类" class="headerlink" title="首页的分类"></a>首页的分类</h5><p>可以扩展做成做成缓存，不易变的数据，直接从redis查缓存。</p><p>缓存预热这种，启动项目之后，扔进去。</p><p>目前做成串行化的，二期可以优化，由前端先查询岗位大类，然后再根据大类查询小类。</p><h4 id="标签详细设计"><a href="#标签详细设计" class="headerlink" title="标签详细设计"></a>标签详细设计</h4><p>标签的概念是分类下的细分。标签是通用性的，独立的个体，与分类不进行强耦合，和题目相关。标签和分类是公用的，多个分类可以对应同一个标签。</p><h5 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h5><p>crud 直接看代码</p><h5 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h5><p>crud</p><h5 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h5><p>crud</p><h5 id="标签查询"><a href="#标签查询" class="headerlink" title="标签查询"></a>标签查询</h5><p>根据分类去查询标签，要通过题目信息的关联表来进行查询。详细看代码</p><p>以上功能涉及到 subject_label 表</p><p><img src="https://s2.loli.net/2024/07/10/omhFSeL9tyZRjVJ.png" alt="7yCAHGEJegnk5NF[1].png"></p><h4 id="题目模块"><a href="#题目模块" class="headerlink" title="题目模块"></a>题目模块</h4><p><img src="https://s2.loli.net/2024/07/10/MLmSYUluqyNp1sz.png" alt="image-20240710174839950.png"></p><p>题目分为单选，多选，判断，简单，四种数据类型，在设计数据的时候，拆分成了题目的主表和其他对应的表来做。</p><h5 id="新增题目"><a href="#新增题目" class="headerlink" title="新增题目"></a>新增题目</h5><p>注意：采取工厂+策略的模式去做扩展，现在有四种题型，未来无论加多少种，都可以不用动主流程。</p><p>后期会结合es 做题目的查重。为搜索做准备。</p><h5 id="修改题目"><a href="#修改题目" class="headerlink" title="修改题目"></a>修改题目</h5><p>crud</p><h5 id="删除题目"><a href="#删除题目" class="headerlink" title="删除题目"></a>删除题目</h5><p>要注意删除主表的同时，也把其他的细分的数据表进行同步的处理。</p><h5 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h5><p>难度不大，就是个简单的分页的查询，分类、标签，难度这些其实都是入参的场景。</p><p>查标签，难度啊，出题人啊，等等，这些就直接查，不做join。</p><h5 id="题目的详情"><a href="#题目的详情" class="headerlink" title="题目的详情"></a>题目的详情</h5><p>也做一下工厂+策略吧</p><p>此功能涉及如下数据表</p><p><img src="https://s2.loli.net/2024/07/10/x2aCvEXZFSIl6N7.png" alt="image-20240710171403151.png"></p><h4 id="刷题模块代码的实现（jc-club-subject）"><a href="#刷题模块代码的实现（jc-club-subject）" class="headerlink" title="刷题模块代码的实现（jc-club-subject）"></a>刷题模块代码的实现（jc-club-subject）</h4><h5 id="application层的SubjectController（应用层初探-SpringMVC集成）"><a href="#application层的SubjectController（应用层初探-SpringMVC集成）" class="headerlink" title="application层的SubjectController（应用层初探&amp;SpringMVC集成）"></a>application层的SubjectController（应用层初探&amp;SpringMVC集成）</h5><p>在<code>jc-club-subject</code>中的<code>jc-club-application-controller</code>中的<code>controller</code>模块下面建立<code>SubjectController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.application.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 刷题controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里给出的测试代码如上。</p><p>在<code>jc-club-subject</code>中的<code>jc-club-starter</code>包中有<code>SubjectApplication.java</code>作为启动类,并且需要修改<code>pom.xml</code>中的内容，让启动类能够访问到<code>jc-club-application-controller</code>中的代码内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//jc-club-starter的pom.xml,在starter中关于启动的配置是写在resources中的application.yml文件中的，包裹数据库连接,redis等等</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectApplication.java 启动类</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 刷题微服务启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/10/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.jingdianjichi&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.jingdianjichi.**.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.jingdianjichi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SubjectApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得maven install</p><h5 id="mysql-druid-mybatis集成-infrastructure层"><a href="#mysql-druid-mybatis集成-infrastructure层" class="headerlink" title="mysql,druid,mybatis集成(infrastructure层)"></a>mysql,druid,mybatis集成(infrastructure层)</h5><p><a href="https://blog.csdn.net/Bb15070047748/article/details/107188167/?ops_request_misc=&request_id=&biz_id=102&utm_term=&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase&spm=1018.2226.3001.4187#{}&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-107188167.nonecase">彻底搞懂MyBaits中#{}和${}的区别_mybatis #{}-CSDN博客</a></p><p>在<code>jc-club-subject</code>中的<code>jc-club-infra</code>包中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbcStarter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatisplus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>做<strong>subject_category</strong>这个模块</p><p>用IDEA自带是数据库工具去连上MySQL</p><p><img src="https://s2.loli.net/2024/07/20/fDcwKd4ak8NtzXj.png" alt="image-20240720131302130.png"></p><p><img src="https://s2.loli.net/2024/07/20/HANolc9JDCsXFhy.png" alt="image-20240720131412700.png"><br>联上数据库后，右键category表，然后Eazycode，选择目录，放在<code>jc-club-infra</code>包下的basic目录中，<code>template</code>选择<code>mapper.xml.vm, dao.java.vm, entity.java.vm, service.java.vm, serviceImpl.java.vm</code>(下面两张图是项目结束后完整的截图，这里就涉及到了mybatis)</p><p><img src="https://s2.loli.net/2024/07/20/sYgHreQo5bGAaxq.png" alt="image-20240720132232428.png"></p><p><img src="https://s2.loli.net/2024/07/20/y4JMCVFKU3uv2lf.png" alt="image-20240720132254642.png"></p><p><a href="https://blog.csdn.net/quest101/article/details/105624322?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172154711316800226546866%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=172154711316800226546866&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105624322-null-null.142">https://blog.csdn.net/quest101/article/details/105624322?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172154711316800226546866%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=172154711316800226546866&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105624322-null-null.142</a></p><p>[mybatis-plus关于@Mapper、@Repository、@MapperScan、xml文件的相关问题_mybatisplus repository-CSDN博客](<a href="https://blog.csdn.net/qq_41428418/article/details/132575881?ops_request_misc=&request_id=&biz_id=102&utm_term=mapperscan">https://blog.csdn.net/qq_41428418/article/details/132575881?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=mapperscan</a> resulttype&#x3D;&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-132575881.142^v100^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)</p><p>继续在<code>jc-club-starter</code>模块的<code>pom.xml</code>中引入当前的<code>jc-club-infra</code>模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//jc-club-starter的pom.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>jc-club-subject</code>中的<code>jc-club-starter</code>中的<code>resources</code>中的<code>application.yml</code>中，定义了服务器和数据源的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="string">port:3000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jc-club?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>server</code>: 定义了服务器的配置。</p><ul><li><code>port</code>: 指定了服务器运行的端口号，这里是 <code>3000</code>。</li></ul></li><li><p><code>spring</code>: 包含了Spring框架的配置。</p><ul><li><code>datasource</code>: 定义了数据源的配置，用于数据库连接。<ul><li><code>username</code>: 数据库的用户名，这里是 <code>root</code>。</li><li><code>password</code>: 数据库的密码，这里是 <code>123456</code>。</li><li><code>driver-class-name</code>: MySQL数据库驱动的类名。</li><li><code>url</code>: 数据库的连接URL，包括数据库地址、端口、数据库名以及一些连接参数。这里的URL表明连接到本地的MySQL服务器上的 <code>jc-club</code> 数据库，并且指定了时区、字符编码和SSL的使用。</li><li><code>type</code>: 指定了数据源的类型，这里使用的是阿里巴巴的Druid连接池。</li><li><code>druid</code>: Druid连接池的特定配置。<ul><li><code>initial-size</code>: 连接池的初始大小，这里是 <code>20</code>。</li><li><code>min-idle</code>: 连接池中最小的空闲连接数，这里是 <code>20</code>。</li><li><code>max-active</code>: 连接池中最大的活动连接数，这里是 <code>100</code>。</li><li><code>max-wait</code>: 连接池中获取连接的最大等待时间（毫秒），这里是 <code>60000</code> 毫秒（即60秒）。</li><li><code>stat-view-servlet</code>: 用于Druid的监控页面。<ul><li><code>enabled</code>: 是否启用监控页面，这里是 <code>true</code>。</li><li><code>url-pattern</code>: 监控页面的URL模式。</li><li><code>login-username</code>: 监控页面的登录用户名。</li><li><code>login-password</code>: 监控页面的登录密码。</li></ul></li><li><code>filter</code>: 定义了Druid的过滤器配置。<ul><li><code>stat</code>: 用于统计的过滤器。<ul><li><code>enabled</code>: 是否启用统计过滤器，这里是 <code>true</code>。</li><li><code>slow-sql-millis</code>: 执行时间超过多少毫秒的SQL被认为是慢查询，这里是 <code>2000</code> 毫秒。</li><li><code>log-slow-sql</code>: 是否记录慢查询的日志，这里是 <code>true</code>。</li></ul></li><li><code>wall</code>: 用于防火墙的过滤器，用于防止SQL注入。<ul><li><code>enabled</code>: 是否启用防火墙过滤器，这里是 <code>true</code>。</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>在<code>jc-club-subject</code>中的<code>jc-club-application-controller</code>中的<code>pom.xml</code>中引入<code>jc-club-infra</code>模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>jc-club-subject</code>中的<code>jc-club-application-controller</code>中的<code>SubjectController.java</code>中新增一段对数据库的测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.application.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 刷题controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> subjectCategoryService.queryById(<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">return</span> subjectCategory;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试成功</p><p><img src="https://s2.loli.net/2024/07/21/V6nFPGIOk5UmXSu.png" alt="image-20240721152600418.png"></p><h5 id="基于druid配置文件加密（infra中的工具类）"><a href="#基于druid配置文件加密（infra中的工具类）" class="headerlink" title="基于druid配置文件加密（infra中的工具类）"></a>基于druid配置文件加密（infra中的工具类）</h5><p>在<code>jc-club-subject</code>中的<code>jc-club-infra/basic</code>中新建一个<code>utils</code>包，建一个用于数据库加密的<code>DruidEncrypUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.infra.basic.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.filter.config.ConfigTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidEncryptUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] keyPair = ConfigTools.genKeyPair(<span class="number">512</span>);</span><br><span class="line">            privateKey = keyPair[<span class="number">0</span>]; <span class="comment">//私钥</span></span><br><span class="line">            System.out.println(<span class="string">&quot;privateKey:&quot;</span> + privateKey);</span><br><span class="line">            publicKey = keyPair[<span class="number">1</span>]; <span class="comment">//公钥</span></span><br><span class="line">            System.out.println(<span class="string">&quot;publicKey:&quot;</span> + publicKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> ConfigTools.encrypt(privateKey, plainText);</span><br><span class="line">        System.out.println(<span class="string">&quot;encrypt:&quot;</span> + encrypt);</span><br><span class="line">        <span class="keyword">return</span> encrypt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String encryptText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">decrypt</span> <span class="operator">=</span> ConfigTools.decrypt(publicKey, encryptText);</span><br><span class="line">        System.out.println(<span class="string">&quot;decrypt:&quot;</span> + decrypt);</span><br><span class="line">        <span class="keyword">return</span> decrypt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> encrypt(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;encrypt:&quot;</span> + encrypt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成的公私钥和加密的密码</p><p><img src="https://s2.loli.net/2024/07/20/trGKkfQ7o2C9MqU.png" alt="image-20240720154842241.png"></p><p>在<code>jc-club-subject</code>中的<code>jc-club-starter</code>中修改<code>application.yml</code>，在<code>password、config和publicKey</code>处进行修改:</p><ul><li><p><code>config</code>: 配置过滤器，这里启用了配置过滤器。</p></li><li><p><code>connectionProperties</code>: 连接属性，这里配置了解密配置，<code>config.decrypt=true</code> 表示开启解密功能，<code>config.decrypt.key=$&#123;publicKey&#125;</code> 表示使用配置的公钥属性进行解密。</p></li><li><p><code>publicKey</code>: 定义了一个公钥，用于与 <code>connectionProperties</code> 中的 <code>config.decrypt.key</code> 配合，进行数据库密码的解密。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="string">port:3000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Me2Tw8jJlEU2C3ghYkBPPfauoyYKXOnb7iTsOHbISHU/mC1ol9OUvU3O9klxv1o5UEv49mErTSawnrw4zsG+5g==</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jc-club?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">config.decrypt=true;config.decrypt.key=$&#123;publicKey&#125;;</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">publicKey:</span> <span class="string">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIKZoTIyh/UEThK6nHOmxVlsSYM6o5qTle39c8NilMUjIln2P3bll86R0asiMLU2p2S81RRfARjIO1im8dNBvS8CAwEAAQ==</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在数据库可以通过加密后的密码连上了</p><h5 id="分层架构业务开发"><a href="#分层架构业务开发" class="headerlink" title="分层架构业务开发"></a>分层架构业务开发</h5><p>所有接口如图所示：</p><p><img src="https://s2.loli.net/2024/07/22/kZsLMm7DNdGpfSX.png" alt="image-20240722125513009.png"></p><h6 id="题目分类-SubjectCategoryController-java"><a href="#题目分类-SubjectCategoryController-java" class="headerlink" title="题目分类(SubjectCategoryController.java)"></a>题目分类(SubjectCategoryController.java)</h6><p>这部分内容中，<code>SujectCategoryController</code>作为对题目类型涉及到get、post增删改查的入口，其中包含都在<code>jc-club-application-controller</code>中的<code>SubjectCategoryServiceImpl</code>和<code>SubjectCategoryDomainServiceImpl</code>。该controller通过<code>jc-club-application-convert</code>组件中<code>SubjectCategoryDTOConverter</code>的将DTO-&gt;BO&#x2F;BO-&gt;DTO，再利用<code>SubjectCategoryDomainServiceImpl</code>组件的add方法，其中涉及到<code>jc-club-domain-convert</code>组件中的<code>SubjectCategoryConverter</code>将BO-&gt;Category，在通过<code>SubjectCategoryServiceImpl</code>调用<code>infra</code>层的<code>SubjectCategoryConverter</code>将Category类转化为DAO。</p><p><a href="https://blog.csdn.net/weixin_45067224/article/details/130882294?ops_request_misc=%7B%22request_id%22:%22172154968616800188590959%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172154968616800188590959&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130882294-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mapstruct.Mapper&spm=1018.2226.3001.4187">MapStruct转换器常见问题及其使用方式_@inheritinverseconfiguration-CSDN博客</a></p><p>这里的convert的实现是利用@Mapper注解到converter类的</p><p><a href="https://blog.csdn.net/hellozhxy/article/details/121403654?ops_request_misc=%7B%22request_id%22:%22172154968616800188590959%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172154968616800188590959&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-121403654-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mapstruct.Mapper&spm=1018.2226.3001.4187">MapStruct使用详解-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectCategoryDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectCategoryDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectCategoryDTO&gt; <span class="title function_">convertBoToCategoryDTOList</span><span class="params">(List&lt;SubjectCategoryBO&gt; subjectCategoryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectCategoryBO <span class="title function_">convertDtoToCategoryBO</span><span class="params">(SubjectCategoryDTO subjectCategoryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectCategoryDTO <span class="title function_">convertBoToCategoryDTO</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>新增分类（<code>POST: /subject/category/add</code>）</p><p>请求<code>body</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span><span class="string">&quot;后端&quot;</span>，</span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imgUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://image/123&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应成功示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;新增成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reqUuid&quot;</span><span class="punctuation">:</span><span class="string">&quot;123123123.123123.123123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>新增<code>jc-club-common</code>包：</p><ol><li><p><code>Lombok</code>是一个Java库，它通过注解的方式提供了一系列可以简化Java代码的工具，比如自动生成getter、setter、toString等方法。</p></li><li><p><code>MapStruct</code>是一个代码生成器，用于将Java方法的输入参数映射到输出参数，通常用于DTO（数据传输对象）和Entity（实体）之间的映射。</p><p><a href="https://blog.csdn.net/Kevinnsm/article/details/114998540?ops_request_misc=%7B%22request_id%22:%22172146370216800184185770%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172146370216800184185770&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-114998540-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%AE%9E%E4%BD%93&spm=1018.2226.3001.4187">DTO数据传输对象详解_dto撖寡情-CSDN博客</a></p></li><li><p><code>mapstruct-processor</code>，是MapStruct的注解处理器部分，用于在编译时生成映射代码。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//pom.xml 注意lombok放在mapstruct前面是为了能够正常的拿到数据。如果项目中使用了lombok，那么需要在编译器指定他们的执行顺序，因为mapstrut底层是靠set/get赋值的，所以需要lombok先编译。</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-infra</code>中的<code>entity</code>下的<code>SubjectCategory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.infra.basic.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类(SubjectCategory)实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//导入了Lombok库中的@Data注解。@Data是一个便利的注解，它为类自动生成getter和setter方法、equals()、hashCode()和toString()方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategory</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123; <span class="comment">//序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父级id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除 0未删除 1已删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jc-club-infra</code>中的<code>mapper</code>下的<code>SubjectCategoryDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.infra.basic.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.entity.SubjectCategory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类(SubjectCategory)表数据库访问层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectCategory <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计总行数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectCategory 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectCategory 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增数据（MyBatis原生foreach方法）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities List&lt;SubjectCategory&gt; 实例对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;entities&quot;)</span> List&lt;SubjectCategory&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增或按主键更新数据（MyBatis原生foreach方法）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities List&lt;SubjectCategory&gt; 实例对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertOrUpdateBatch</span><span class="params">(<span class="meta">@Param(&quot;entities&quot;)</span> List&lt;SubjectCategory&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectCategory 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectCategory&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">querySubjectCount</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jc-club-infra</code>中的<code>service</code>下的<code>SubjectCategoryServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.infra.basic.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.entity.SubjectCategory;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.mapper.SubjectCategoryDao;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.service.SubjectCategoryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类(SubjectCategory)表服务实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;subjectCategoryService&quot;)</span> <span class="comment">//Spring注解，用于声明这个类是一个服务组件，并且可以通过subjectCategoryService这个名称获取到这个服务的实例。</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//Lombok注解，自动为类生成一个日志对象(log)，使用SLF4J日志框架。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectCategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span> <span class="comment">//Spring注解，用于自动装配(注入)SubjectCategoryDao类型的bean到subjectCategoryDao字段。</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryDao subjectCategoryDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectCategory 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectCategory <span class="title function_">insert</span><span class="params">(SubjectCategory subjectCategory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(log.isInfoEnabled())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectCategoryController.add.subjectCategory:&#123;&#125;&quot;</span></span><br><span class="line">                    , JSON.toJSONString(subjectCategory));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.subjectCategoryDao.insert(subjectCategory);</span><br><span class="line">        <span class="keyword">return</span> subjectCategory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectCategory <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectCategory 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectCategory subjectCategory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.update(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectCategory&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategory subjectCategory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.queryCategory(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">querySubjectCount</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.querySubjectCount(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jc-club-domain</code>中的<code>pom.xml</code>引入<code>infra</code>模块，便于<code>jc-club-domain</code>中的<code>service/impl</code>下的<code>SubjectCategoryDomainServiceImpl.java</code>来引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-subject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-domain</code>中的<code>entity</code>下的<code>SubjectCategoryBO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类(SubjectCategory)实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-10-01 21:49:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父级id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签bo数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectLabelBO&gt; labelBOList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jc-club-domain</code>中的<code>service</code>下的<code>SubjectCategoryDomainService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.domain.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.domain.entity.SubjectCategoryBO;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询岗位大类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分类及标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategoryAndLabel</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么将BO转为Category呢？这里需要在<code>jc-club-domain</code>中的<code>convert</code>包设置<code>SubjectCategoryConverter.java</code>，用到mapstruct。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryConverter.java</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.domain.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.domain.entity.SubjectCategoryBO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.entity.SubjectCategory;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectCategoryConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectCategoryConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectCategory <span class="title function_">convertBoToCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; <span class="title function_">convertBoToCategory</span><span class="params">(List&lt;SubjectCategory&gt; categoryList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时`jc-club-domain`中的`service`下的`SubjectCategoryDomainServiceImpl.java`就可以调用这个了</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.domain.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectCategoryDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryService subjectCategoryService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryBO); <span class="comment">//BO-&gt;SujectCategory</span></span><br><span class="line">        subjectCategory.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectCategoryService.insert(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>jc-club-subject</code>中的<code>jc-club-application-controller</code>的<code>pom.xml</code>中新增<code>jc-club-domain</code>，目的是在创建<code>SubjectCategoryController</code>时能正常引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>jc-club-subject</code>中的<code>jc-club-application-controller</code>的<code>SubjectCategoryController.java</code>。这里会涉及到在<code>jc-club-application-dto</code>模块下的从BO到DTO的转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryDTO.java BO-&gt;DTO</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.application.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/10/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父级id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectLabelDTO&gt; labelDTOList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDTOConverter.java</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.application.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.application.dto.SubjectCategoryDTO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.domain.entity.SubjectCategoryBO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.infra.basic.entity.SubjectCategory;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目分类dto转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectCategoryDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectCategoryDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectCategoryDTO&gt; <span class="title function_">convertBoToCategoryDTOList</span><span class="params">(List&lt;SubjectCategoryBO&gt; subjectCategoryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectCategoryBO <span class="title function_">convertDtoToCategoryBO</span><span class="params">(SubjectCategoryDTO subjectCategoryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectCategoryDTO <span class="title function_">convertBoToCategoryDTO</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject/category&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryDomainService subjectCategoryDomainService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SubjectCategoryBO subjectCategoryBO=SubjectCategoryDTOConverter.INSTANCE.convertDtoToBO(subjectCategoryDTO);</span><br><span class="line">            subjectDomainService.add(subjectCategoryBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="literal">false</span>); <span class="comment">//这里的返回结果在jc-club-common中的entity模块设计一个Result类来统一返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于会涉及到结果返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jc-club-common/entity Result.java</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.common.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.common.enums.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.SUCCESS.getDesc());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">ok</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.SUCCESS.getDesc());</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.FAIL.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.FAIL.getDesc());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">fail</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.FAIL.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.FAIL.getDesc());</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//jc-club-common/enums ResultCodeEnum.java</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.common.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    FAIL(<span class="number">500</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String desc;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(<span class="type">int</span> code,String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultCodeEnum <span class="title function_">getByCode</span><span class="params">(<span class="type">int</span> codeVal)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ResultCodeEnum resultCodeEnum : ResultCodeEnum.values())&#123;</span><br><span class="line">            <span class="keyword">if</span>(resultCodeEnum.code == codeVal)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultCodeEnum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加日志lo4j2和fastjson在<code>jc-club-common</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>SubjectCategoryController.java</code>和<code>SubjectCategoryDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject/category&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryDomainService subjectCategoryDomainService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectCategoryController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*这里log.isInfoEnabled()的作用是如果不加log.isDebugEnabled()等</span></span><br><span class="line"><span class="comment">进行预先判断，当系统loglevel设置高于Debug或Info或Trace时，虽然系统不会答应出这些级别的日志，但是每次还是会拼接</span></span><br><span class="line"><span class="comment">参数字符串/序列化，影响系统的性能。*/</span></span><br><span class="line">            SubjectCategoryBO subjectCategoryBO=SubjectCategoryDTOConverter.INSTANCE.convertDtoToBO(subjectCategoryDTO);</span><br><span class="line">            subjectDomainService.add(subjectCategoryBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="literal">false</span>); <span class="comment">//这里的返回结果在jc-club-common中的entity模块设计一个Result类来统一返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDomainServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.domain.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectCategoryDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectCategoryDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryService subjectCategoryService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectCategoryController.add.bo:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectCategoryBO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryBO); <span class="comment">//BO-&gt;SujectCategory</span></span><br><span class="line">        subjectCategory.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectCategoryService.insert(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>preconditions参数校验</strong>：</p><p>回到<code>SubjectCategoryController.java</code>，进行参数校验，在<code>pom.xml</code>中添加<code>guava</code>（注意参数校验放在controller）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//jc-club-common/pom.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryController.java</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectCategoryController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectCategoryDTO.getCategoryType(), <span class="string">&quot;分类类型不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(subjectCategoryDTO.getCategoryName()), <span class="string">&quot;分类名称不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(subjectCategoryDTO.getParentId(), <span class="string">&quot;分类父级id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">            subjectCategoryDomainService.add(subjectCategoryBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增分类失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="刷题模块接口定义"><a href="#刷题模块接口定义" class="headerlink" title="刷题模块接口定义"></a>刷题模块接口定义</h6><ol><li>新增分类</li><li>更新分类</li><li>查询分类</li><li>查询大类下分类</li><li>查询分类及标签（二期优化）</li><li>删除分类</li></ol><p><img src="https://s2.loli.net/2024/07/10/mLyW9JI56dVsefR.png" alt="image-20240710165032544.png"></p><p>分类-&gt;标签</p><p>基本的-&gt;二次优化</p><p>数据库-&gt;缓存优化</p><ol><li><p>新增分类：POST：&#x2F;subject&#x2F;category&#x2F;add</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;缓存&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应成功示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>查询分类：POST：&#x2F;subject&#x2F;category&#x2F;queryPrimaryCategory</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;后端&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">65</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>查询大类下分类：POST：&#x2F;subject&#x2F;category&#x2F;queryCategoryByPrimary</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;框架&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image/123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;并发&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image/123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jvm&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image/123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>查询分类及标签（二期优化）</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;缓存&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Redis&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;集群&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实际应用&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多线程&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据一致性&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;分布式&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;持久化&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">49</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;事务&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据库&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;进程&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;索引&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实际应用&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">33</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;存储引擎&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据一致性&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">49</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;事务&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaSE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;框架&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">62</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringBoot&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;消息队列&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实际应用&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;代码管理工具&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Git&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网络&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作系统&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;最佳实践&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://image/category.icon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelDTOList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实际应用&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jvm&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里优化后的其实是把大分类-&gt;小分类-&gt;标签全都查完了，是用的多线程去实现的</p><p>数据查完之后，再通过遍历然后利用某些规则，前端就能很轻松的查到了</p></li><li><p>删除分类</p><p>请求体:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>更新分类</p><p>请求体:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;imageUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image/123&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="题目列表及详情接口定义"><a href="#题目列表及详情接口定义" class="headerlink" title="题目列表及详情接口定义"></a>题目列表及详情接口定义</h6><p><img src="https://s2.loli.net/2024/07/10/mLyW9JI56dVsefR.png" alt="image-20240710165032544.png"></p><p>涉及到难度，创建时间，题目，点赞收藏评论，创建人</p><p>分页查询</p><ol><li><p>查询题目列表（POST:&#x2F;subject&#x2F;category&#x2F;querySubjectList）</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pageIndex&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelId&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPage&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;subjectName&quot;</span><span class="punctuation">:</span><span class="string">&quot;SpringBoot的自动装配原理是什么?&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;subjectId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;labelNames&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;并发&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;集合&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span>，</span><br><span class="line">    <span class="string">&quot;reqUuid&quot;</span>：<span class="string">&quot;1231231223&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;success&quot;</span>：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="分类接口开发"><a href="#分类接口开发" class="headerlink" title="分类接口开发"></a>分类接口开发</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectCategoryController.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询岗位大类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/queryPrimaryCategory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;SubjectCategoryDTO&gt;&gt; <span class="title function_">queryPrimaryCategory</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">            List&lt;SubjectCategoryBO&gt; subjectCategoryBOList = subjectCategoryDomainService.queryCategory(subjectCategoryBO);</span><br><span class="line">            List&lt;SubjectCategoryDTO&gt; subjectCategoryDTOList = SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertBoToCategoryDTOList(subjectCategoryBOList);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(subjectCategoryDTOList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//domain包里 SubjectCategoryDomainService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询岗位大类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//domain包里 SubjectCategoryDomainServiceImpl.java</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryBO);</span><br><span class="line">        subjectCategory.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        List&lt;SubjectCategory&gt; subjectCategoryList = subjectCategoryService.queryCategory(subjectCategory);</span><br><span class="line">        List&lt;SubjectCategoryBO&gt; boList = SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryList);</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.boList:&#123;&#125;&quot;</span>,</span><br><span class="line">                    JSON.toJSONString(boList));</span><br><span class="line">        &#125;</span><br><span class="line">        boList.forEach(bo -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">subjectCount</span> <span class="operator">=</span> subjectCategoryService.querySubjectCount(bo.getId());</span><br><span class="line">            bo.setCount(subjectCount);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> boList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>controller:用converter DTO-&gt;BO</p><p>domainservice: converter bo-&gt;category，用service带着category去查,用Dao去查（dao的接口+dao.xml,mapperscan能扫描到）数据库，返回List<SubjectCategory></p><p>controller:用converter bolist-&gt;dtolist</p><p>返回dtolist，用Result封装一下，查出来了</p><p>关于为什么能够用Result返回用postman可以查到，其实用了@RestController标识：[SpringBoot以及集成组件注解大全详解（一）——lomback &amp;&amp; JPA_@componentscan是复合注解吗-CSDN博客](<a href="https://blog.csdn.net/qq_42133100/article/details/89084518?ops_request_misc=%7B%22request_id%22:%22172154818816800186530805%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172154818816800186530805&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89084518-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=lomback%E4%B8%AD@data">https://blog.csdn.net/qq_42133100/article/details/89084518?ops_request_misc=%7B%22request%5Fid%22%3A%22172154818816800186530805%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172154818816800186530805&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89084518-null-null.142^v100^pc_search_result_base8&amp;utm_term=lomback中@data</a> RestController&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[【MyBatis】Dao接口和Dao.xml文件如何建立连接-CSDN博客](<a href="https://blog.csdn.net/weixin_45156425/article/details/120956070?ops_request_misc=%7B%22request_id%22:%22172154533316800207082850%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172154533316800207082850&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120956070-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatis%E5%92%8Cdao">https://blog.csdn.net/weixin_45156425/article/details/120956070?ops_request_misc=%7B%22request%5Fid%22%3A%22172154533316800207082850%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=172154533316800207082850&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120956070-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatis和dao</a> xml&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="https://s2.loli.net/2024/07/21/V6nFPGIOk5UmXSu.png" alt="image-20240721152600418.png"></p><p><strong>根据大类查询二级分类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新SubjectCategoryDomainService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectCategoryDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询岗位大类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectCategoryController.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查二级分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/queryCategoryByPrimary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;SubjectCategoryDTO&gt;&gt; <span class="title function_">queryCategoryByPrimary</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectCategoryController.queryCategoryByPrimary.dto:&#123;&#125;&quot;</span></span><br><span class="line">                        , JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectCategoryDTO.getParentId(), <span class="string">&quot;分类id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">            List&lt;SubjectCategoryBO&gt; subjectCategoryBOList = subjectCategoryDomainService.queryCategory(subjectCategoryBO);</span><br><span class="line">            List&lt;SubjectCategoryDTO&gt; subjectCategoryDTOList = SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertBoToCategoryDTOList(subjectCategoryBOList);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(subjectCategoryDTOList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>更新分类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectCategoryController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> subjectCategoryDomainService.update(subjectCategoryBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新分类失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDomainService</span></span><br><span class="line">Boolean <span class="title function_">update</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"><span class="comment">//SubjectCategoryDomainServiceImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryBO);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectCategoryService.update(subjectCategory);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SubjectCategoryService</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"><span class="comment">//SubjectCategoryServiceImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectCategory subjectCategory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.update(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDao</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectCategory subjectCategory)</span>;</span><br><span class="line"><span class="comment">//接下来就是通过SubjectCategoryD.xml和mybatis组件去进行数据库的操作</span></span><br></pre></td></tr></table></figure><p><strong>删除分类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectCategoryController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                    convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> subjectCategoryDomainService.delete(subjectCategoryBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.delete.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除分类失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDomainService</span></span><br><span class="line">Boolean <span class="title function_">delete</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span>;</span><br><span class="line"><span class="comment">//SubjectCategoryDomainServiceImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">                .convertBoToCategory(subjectCategoryBO);</span><br><span class="line">        subjectCategory.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode()); <span class="comment">//设置已经删除字段</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectCategoryService.update(subjectCategory);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//IsDeletedFlagEnum 在common包下的enum中</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IsDeletedFlagEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    DELETED(<span class="number">1</span>,<span class="string">&quot;已删除&quot;</span>),</span><br><span class="line">    UN_DELETED(<span class="number">0</span>,<span class="string">&quot;未删除&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String desc;</span><br><span class="line"></span><br><span class="line">    IsDeletedFlagEnum(<span class="type">int</span> code, String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IsDeletedFlagEnum <span class="title function_">getByCode</span><span class="params">(<span class="type">int</span> codeVal)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(IsDeletedFlagEnum resultCodeEnum : IsDeletedFlagEnum.values())&#123;</span><br><span class="line">            <span class="keyword">if</span>(resultCodeEnum.code == codeVal)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultCodeEnum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectCategoryService</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"><span class="comment">//SubjectCategoryServiceImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SubjectCategoryDao</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"><span class="comment">//接下来就是通过SubjectCategoryD.xml和mybatis组件去进行数据库的操作</span></span><br></pre></td></tr></table></figure><h6 id="题目标签接口定义"><a href="#题目标签接口定义" class="headerlink" title="题目标签接口定义"></a>题目标签接口定义</h6><ol><li><p>新增标签</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringMVC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>更新标签</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>删除标签</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>根据分类查询标签</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringBoot&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;labelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringMVC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sortNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="标签基础模块开发"><a href="#标签基础模块开发" class="headerlink" title="标签基础模块开发"></a>标签基础模块开发</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectLabelController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectLabelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectLabelDomainService subjectLabelDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SubjectLabelDTO subjectLabelDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectLabelController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(subjectLabelDTO.getLabelName()),</span><br><span class="line">                    <span class="string">&quot;标签名称不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">subjectLabelBO</span> <span class="operator">=</span> SubjectLabelDTOConverter.INSTANCE.convertDtoToLabelBO(subjectLabelDTO);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> subjectLabelDomainService.add(subjectLabelBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectLabelController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增标签失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SubjectLabelDTO subjectLabelDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectLabelController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectLabelDTO.getId(), <span class="string">&quot;标签id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">subjectLabelBO</span> <span class="operator">=</span> SubjectLabelDTOConverter.INSTANCE.convertDtoToLabelBO(subjectLabelDTO);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> subjectLabelDomainService.update(subjectLabelBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectLabelController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新标签失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> SubjectLabelDTO subjectLabelDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectLabelController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectLabelDTO.getId(), <span class="string">&quot;标签id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">subjectLabelBO</span> <span class="operator">=</span> SubjectLabelDTOConverter.INSTANCE.convertDtoToLabelBO(subjectLabelDTO);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> subjectLabelDomainService.delete(subjectLabelBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectLabelController.delete.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除标签失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分类下标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/queryLabelByCategoryId&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;SubjectLabelDTO&gt;&gt; <span class="title function_">queryLabelByCategoryId</span><span class="params">(<span class="meta">@RequestBody</span> SubjectLabelDTO subjectLabelDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectLabelController.queryLabelByCategoryId.dto:&#123;&#125;&quot;</span>,</span><br><span class="line">                        JSON.toJSONString(subjectLabelDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectLabelDTO.getCategoryId(), <span class="string">&quot;分类id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">subjectLabelBO</span> <span class="operator">=</span> SubjectLabelDTOConverter.INSTANCE.convertDtoToLabelBO(subjectLabelDTO);</span><br><span class="line">            List&lt;SubjectLabelBO&gt; resultList = subjectLabelDomainService.queryLabelByCategoryId(subjectLabelBO);</span><br><span class="line">            List&lt;SubjectLabelDTO&gt; subjectLabelDTOS = SubjectLabelDTOConverter.INSTANCE.convertBOToLabelDTOList(resultList);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(subjectLabelDTOS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectLabelController.queryLabelByCategoryId.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询分类下标签失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectLabelDTOConverter</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectLabelDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectLabelDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectLabelDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectLabelBO <span class="title function_">convertDtoToLabelBO</span><span class="params">(SubjectLabelDTO subjectLabelDTO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectLabelDTO&gt; <span class="title function_">convertBOToLabelDTOList</span><span class="params">(List&lt;SubjectLabelBO&gt; boList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectLabelConverter</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectLabelConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectLabelConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectLabelConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectLabel <span class="title function_">convertBoToLabel</span><span class="params">(SubjectLabelBO subjectLabelBO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectLabelBO&gt; <span class="title function_">convertLabelToBoList</span><span class="params">(List&lt;SubjectLabel&gt; subjectLabelList)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectLabelDTO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectLabelDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String labelName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectLabelBO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectLabelBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String labelName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sortNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectLabelDomainService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectLabelDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">add</span><span class="params">(SubjectLabelBO subjectLabelBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(SubjectLabelBO subjectLabelBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(SubjectLabelBO subjectLabelBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分类下标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectLabelBO&gt; <span class="title function_">queryLabelByCategoryId</span><span class="params">(SubjectLabelBO subjectLabelBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectLabelDomainServiceImpl</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectLabelDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectLabelDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectLabelService subjectLabelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMappingService subjectMappingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectCategoryService subjectCategoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">add</span><span class="params">(SubjectLabelBO subjectLabelBO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectLabelDomainServiceImpl.add.bo:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelBO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectLabel</span> <span class="variable">subjectLabel</span> <span class="operator">=</span> SubjectLabelConverter.INSTANCE</span><br><span class="line">                .convertBoToLabel(subjectLabelBO);</span><br><span class="line">        subjectLabel.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectLabelService.insert(subjectLabel);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(SubjectLabelBO subjectLabelBO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectLabelDomainServiceImpl.update.bo:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelBO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectLabel</span> <span class="variable">subjectLabel</span> <span class="operator">=</span> SubjectLabelConverter.INSTANCE</span><br><span class="line">                .convertBoToLabel(subjectLabelBO);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectLabelService.update(subjectLabel);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(SubjectLabelBO subjectLabelBO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectLabelDomainServiceImpl.update.bo:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLabelBO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectLabel</span> <span class="variable">subjectLabel</span> <span class="operator">=</span> SubjectLabelConverter.INSTANCE</span><br><span class="line">                .convertBoToLabel(subjectLabelBO);</span><br><span class="line">        subjectLabel.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode());</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectLabelService.update(subjectLabel);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectLabelBO&gt; <span class="title function_">queryLabelByCategoryId</span><span class="params">(SubjectLabelBO subjectLabelBO)</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前分类是1级分类，则查询所有标签</span></span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> subjectCategoryService.queryById(subjectLabelBO.getCategoryId());</span><br><span class="line">        <span class="keyword">if</span>(CategoryTypeEnum.PRIMARY.getCode() == subjectCategory.getCategoryType())&#123;</span><br><span class="line">            <span class="type">SubjectLabel</span> <span class="variable">subjectLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectLabel</span>();</span><br><span class="line">            subjectLabel.setCategoryId(subjectLabelBO.getCategoryId());</span><br><span class="line">            List&lt;SubjectLabel&gt; labelList = subjectLabelService.queryByCondition(subjectLabel);</span><br><span class="line">            List&lt;SubjectLabelBO&gt; labelResultList = SubjectLabelConverter.INSTANCE.convertLabelToBoList(labelList);</span><br><span class="line">            <span class="keyword">return</span> labelResultList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> subjectLabelBO.getCategoryId();</span><br><span class="line">        <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">        subjectMapping.setCategoryId(categoryId);</span><br><span class="line">        subjectMapping.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(mappingList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将mappingList转换为一个流（Stream）,使用map操作对流中的每个元素（SubjectMapping对象）应用一个函数,使用collect操作将流中的元素汇总或归纳到一个新的集合中</span></span><br><span class="line">        List&lt;Long&gt; labelIdList = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">        List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIdList);</span><br><span class="line">        List&lt;SubjectLabelBO&gt; boList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        labelList.forEach(label -&gt; &#123; <span class="comment">//lamda表达式</span></span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">bo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectLabelBO</span>();</span><br><span class="line">            bo.setId(label.getId());</span><br><span class="line">            bo.setLabelName(label.getLabelName());</span><br><span class="line">            bo.setCategoryId(categoryId);</span><br><span class="line">            bo.setSortNum(label.getSortNum());</span><br><span class="line">            boList.add(bo);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> boList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectMappingService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectMappingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectMapping <span class="title function_">queryById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectMapping 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectMapping <span class="title function_">insert</span><span class="params">(SubjectMapping subjectMapping)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectMapping 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectMapping subjectMapping)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询标签id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectMapping&gt; <span class="title function_">queryLabelId</span><span class="params">(SubjectMapping subjectMapping)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">batchInsert</span><span class="params">(List&lt;SubjectMapping&gt; mappingList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectMappingServiceImpl</span></span><br><span class="line"><span class="meta">@Service(&quot;subjectMappingService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectMappingServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectMappingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMappingDao subjectMappingDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectMapping <span class="title function_">queryById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectMappingDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectMapping 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectMapping <span class="title function_">insert</span><span class="params">(SubjectMapping subjectMapping)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subjectMappingDao.insert(subjectMapping);</span><br><span class="line">        <span class="keyword">return</span> subjectMapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectMapping 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectMapping subjectMapping)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectMappingDao.update(subjectMapping);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectMappingDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectMapping&gt; <span class="title function_">queryLabelId</span><span class="params">(SubjectMapping subjectMapping)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectMappingDao.queryDistinctLabelId(subjectMapping);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchInsert</span><span class="params">(List&lt;SubjectMapping&gt; mappingList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subjectMappingDao.insertBatch(mappingList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="标签业务改动"><a href="#标签业务改动" class="headerlink" title="标签业务改动"></a>标签业务改动</h6><p>将一级分类和标签联系起来</p><p><img src="https://s2.loli.net/2024/07/28/cHv61yPJdFUGBVZ.png" alt="image-20240728114457915.png"></p><p><code>SubjectLabelDao.xml</code></p><p><img src="https://s2.loli.net/2024/07/28/AjiBfXphTF9ctyV.png" alt="image-20240728114229629.png"></p><p>domain层也跟着改</p><h6 id="题目模块接口定义"><a href="#题目模块接口定义" class="headerlink" title="题目模块接口定义"></a>题目模块接口定义</h6><ol><li><p>新增单选题目</p><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;subjectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subjectDifficult&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subjectType&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subjectScore&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subjectParse&quot;</span><span class="punctuation">:</span> <span class="string">&quot;题目解析&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryIds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;labelIds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;optionList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;optionType&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;optionContent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;自动的&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isCorrect&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;optionType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;optionContent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;其实是用配置文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isCorrect&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应成功示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>新增多选题目</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;subjectType&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryIds&quot;</span>: [</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;labelIds&quot;</span>: [</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;optionList&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;optionType&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;optionContent&quot;</span>: <span class="string">&quot;自动的&quot;</span>,</span><br><span class="line">            <span class="string">&quot;isCorrect&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;optionType&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;optionContent&quot;</span>: <span class="string">&quot;其实是用配置文件&quot;</span>,</span><br><span class="line">            <span class="string">&quot;isCorrect&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应成功示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增判断题目</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;subjectType&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryIds&quot;</span>: [</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;labelIds&quot;</span>: [</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;optionList&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;isCorrect&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应成功示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增简答题目</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;Mysql是个什么东西？&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;subjectType&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subjectAnswer&quot;</span>: <span class="string">&quot;Mysql是个数据库&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryIds&quot;</span>: [</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;labelIds&quot;</span>: [</span><br><span class="line">        <span class="number">11</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询题目列表</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;labelId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;totalPages&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line"><span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span>,</span><br><span class="line"><span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;subjectType&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;end&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询题目列表</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;labelId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;totalPages&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line"><span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span>,</span><br><span class="line"><span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;subjectType&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;end&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询题目详情</p><p>请求体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pageSize&quot;</span>: <span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line"><span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;SpringBoot自动装配原理是什么？&quot;</span>,</span><br><span class="line"><span class="string">&quot;subjectDifficult&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;subjectType&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">&quot;subjectScore&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;subjectParse&quot;</span>: <span class="string">&quot;题目解析&quot;</span>,</span><br><span class="line"><span class="string">&quot;subjectAnswer&quot;</span>: <span class="string">&quot;题目答案&quot;</span>,</span><br><span class="line"><span class="string">&quot;labelName&quot;</span>: [</span><br><span class="line"><span class="string">&quot;SpringBoot&quot;</span>,</span><br><span class="line"><span class="string">&quot;SpringMVC&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="题目模块接口开发"><a href="#题目模块接口开发" class="headerlink" title="题目模块接口开发"></a>题目模块接口开发</h6><p>题目模块接口开发是程序员社区项目中用于管理题目信息的核心部分。它涉及一系列接口，用于实现题目的新增、查询、更新和删除等操作。这些接口包括但不限于：</p><ul><li>新增单选、多选、判断和简答题目的接口，允许用户提交题目名称、难度、类型、分数、解析、所属分类和标签等信息。</li><li>查询题目列表的接口，支持分页查询，并可根据分类、标签、难度等条件进行筛选。</li><li>查询题目详情的接口，通过题目ID获取详细信息，包括题目类型、内容、选项、正确答案和解析等。</li></ul><p>代码层面，题目模块接口开发使用了Spring Boot框架来构建RESTful API，并采用了DTO（Data Transfer Object）和BO（Business Object）模式来分离数据传输和业务逻辑。通过MapStruct库实现了DTO与BO之间的自动转换，以简化代码并减少重复性工作。此外，服务层（Service）和数据访问层（DAO）的分离确保了业务逻辑的清晰和数据访问的高效性。</p><p>在实现上，题目模块接口利用了Lombok库来自动生成getter、setter等方法，以及使用Spring框架的注解如<code>@RestController</code>和<code>@RequestMapping</code>来简化路由配置。日志记录采用SLF4J与Log4j2，确保了日志的灵活性和可配置性。此外，通过使用Spring的事务管理<code>@Transactional</code>，保证了数据操作的原子性和一致性。</p><p>整体而言，题目模块接口开发为程序员社区项目提供了一个稳定、可扩展且易于维护的后端服务，以支持题目内容的管理与展示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectInfoBO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoBO</span> <span class="keyword">extends</span> <span class="title class_">PageInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目难度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectDifficult;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出题人名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String settleName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目类型 1单选 2多选 3判断 4简答</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectScore;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目答案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; categoryIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; labelIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; labelName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectAnswerBO&gt; optionList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long labelId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keyWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUserAvatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectCount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否被当前用户点赞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean liked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前题目点赞的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer likedCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long nextSubjectId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lastSubjectId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PageResult</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">totalPages</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; result = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            setTotal(result.size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(Integer total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.pageSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = (total / <span class="built_in">this</span>.pageSize) + (total % <span class="built_in">this</span>.pageSize == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.start = (<span class="built_in">this</span>.pageSize &gt; <span class="number">0</span> ? (<span class="built_in">this</span>.pageNo - <span class="number">1</span>) * <span class="built_in">this</span>.pageSize : <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.end = (<span class="built_in">this</span>.start - <span class="number">1</span> + <span class="built_in">this</span>.pageSize * (<span class="built_in">this</span>.pageNo &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNo</span><span class="params">(Integer pageNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageNo = pageNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PageInfo</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPageNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pageNo == <span class="literal">null</span> || pageNo &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pageNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pageSize == <span class="literal">null</span> || pageSize &lt; <span class="number">1</span> || pageSize &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectAnswerBO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectAnswerBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案选项标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer optionType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String optionContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isCorrect;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectAnswerDTO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectAnswerDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案选项标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer optionType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String optionContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer isCorrect;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectOptionBO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectOptionBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目答案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectAnswerBO&gt; optionList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectInfo</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">71318372165220898L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目难度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectDifficult;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出题人名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String settleName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目类型 1单选 2多选 3判断 4简答</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectScore;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParse;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer subjectCount;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectInfoDTO</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoDTO</span> <span class="keyword">extends</span> <span class="title class_">PageInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目难度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectDifficult;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出题人名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String settleName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目类型 1单选 2多选 3判断 4简答</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectScore;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目答案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subjectAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; categoryIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; labelIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 答案选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectAnswerDTO&gt; optionList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; labelName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long labelId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keyWord;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUserAvatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 题目数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer subjectCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否被当前用户点赞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean liked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前题目点赞的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer likedCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long nextSubjectId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lastSubjectId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectTypeHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectTypeHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举身份的识别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfoTypeEnum <span class="title function_">getHandlerType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际的题目的插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际的题目的插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectOptionBO <span class="title function_">query</span><span class="params">(<span class="type">int</span> subjectId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BriefTypeHandler</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BriefTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">SubjectTypeHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectBriefService subjectBriefService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfoTypeEnum <span class="title function_">getHandlerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SubjectInfoTypeEnum.BRIEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectBrief</span> <span class="variable">subjectBrief</span> <span class="operator">=</span> BriefSubjectConverter.INSTANCE.convertBoToEntity(subjectInfoBO);</span><br><span class="line">        subjectBrief.setSubjectId(subjectInfoBO.getId().intValue());</span><br><span class="line">        subjectBrief.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectBriefService.insert(subjectBrief);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectOptionBO <span class="title function_">query</span><span class="params">(<span class="type">int</span> subjectId)</span> &#123;</span><br><span class="line">        <span class="type">SubjectBrief</span> <span class="variable">subjectBrief</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectBrief</span>();</span><br><span class="line">        subjectBrief.setSubjectId(subjectId);</span><br><span class="line">        <span class="type">SubjectBrief</span> <span class="variable">result</span> <span class="operator">=</span> subjectBriefService.queryByCondition(subjectBrief);</span><br><span class="line">        <span class="type">SubjectOptionBO</span> <span class="variable">subjectOptionBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectOptionBO</span>();</span><br><span class="line">        subjectOptionBO.setSubjectAnswer(result.getSubjectAnswer());</span><br><span class="line">        <span class="keyword">return</span> subjectOptionBO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JudgeTypeHandler</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudgeTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">SubjectTypeHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectJudgeService subjectJudgeService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfoTypeEnum <span class="title function_">getHandlerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SubjectInfoTypeEnum.JUDGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断题目的插入</span></span><br><span class="line">        <span class="type">SubjectJudge</span> <span class="variable">subjectJudge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectJudge</span>();</span><br><span class="line">        <span class="type">SubjectAnswerBO</span> <span class="variable">subjectAnswerBO</span> <span class="operator">=</span> subjectInfoBO.getOptionList().get(<span class="number">0</span>);</span><br><span class="line">        subjectJudge.setSubjectId(subjectInfoBO.getId());</span><br><span class="line">        subjectJudge.setIsCorrect(subjectAnswerBO.getIsCorrect());</span><br><span class="line">        subjectJudge.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectJudgeService.insert(subjectJudge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectOptionBO <span class="title function_">query</span><span class="params">(<span class="type">int</span> subjectId)</span> &#123;</span><br><span class="line">        <span class="type">SubjectJudge</span> <span class="variable">subjectJudge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectJudge</span>();</span><br><span class="line">        subjectJudge.setSubjectId(Long.valueOf(subjectId));</span><br><span class="line">        List&lt;SubjectJudge&gt; result = subjectJudgeService.queryByCondition(subjectJudge);</span><br><span class="line">        List&lt;SubjectAnswerBO&gt; subjectAnswerBOList = JudgeSubjectConverter.INSTANCE.convertEntityToBoList(result);</span><br><span class="line">        <span class="type">SubjectOptionBO</span> <span class="variable">subjectOptionBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectOptionBO</span>();</span><br><span class="line">        subjectOptionBO.setOptionList(subjectAnswerBOList);</span><br><span class="line">        <span class="keyword">return</span> subjectOptionBO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MultipleTypeHandler</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultipleTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">SubjectTypeHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMultipleService subjectMultipleService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfoTypeEnum <span class="title function_">getHandlerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SubjectInfoTypeEnum.MULTIPLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="comment">//多选题目的插入</span></span><br><span class="line">        List&lt;SubjectMultiple&gt; subjectMultipleList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        subjectInfoBO.getOptionList().forEach(option -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectMultiple</span> <span class="variable">subjectMultiple</span> <span class="operator">=</span> MultipleSubjectConverter.INSTANCE.convertBoToEntity(option);</span><br><span class="line">            subjectMultiple.setSubjectId(subjectInfoBO.getId());</span><br><span class="line">            subjectMultiple.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">            subjectMultipleList.add(subjectMultiple);</span><br><span class="line">        &#125;);</span><br><span class="line">        subjectMultipleService.batchInsert(subjectMultipleList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectOptionBO <span class="title function_">query</span><span class="params">(<span class="type">int</span> subjectId)</span> &#123;</span><br><span class="line">        <span class="type">SubjectMultiple</span> <span class="variable">subjectMultiple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMultiple</span>();</span><br><span class="line">        subjectMultiple.setSubjectId(Long.valueOf(subjectId));</span><br><span class="line">        List&lt;SubjectMultiple&gt; result = subjectMultipleService.queryByCondition(subjectMultiple);</span><br><span class="line">        List&lt;SubjectAnswerBO&gt; subjectAnswerBOList = MultipleSubjectConverter.INSTANCE.convertEntityToBoList(result);</span><br><span class="line">        <span class="type">SubjectOptionBO</span> <span class="variable">subjectOptionBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectOptionBO</span>();</span><br><span class="line">        subjectOptionBO.setOptionList(subjectAnswerBOList);</span><br><span class="line">        <span class="keyword">return</span> subjectOptionBO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//RadioTypeHandler</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadioTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">SubjectTypeHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectRadioService subjectRadioService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfoTypeEnum <span class="title function_">getHandlerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SubjectInfoTypeEnum.RADIO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="comment">//单选题目的插入</span></span><br><span class="line">        List&lt;SubjectRadio&gt; subjectRadioList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        subjectInfoBO.getOptionList().forEach(option -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectRadio</span> <span class="variable">subjectRadio</span> <span class="operator">=</span> RadioSubjectConverter.INSTANCE.convertBoToEntity(option);</span><br><span class="line">            subjectRadio.setSubjectId(subjectInfoBO.getId());</span><br><span class="line">            subjectRadio.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">            subjectRadioList.add(subjectRadio);</span><br><span class="line">        &#125;);</span><br><span class="line">        subjectRadioService.batchInsert(subjectRadioList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectOptionBO <span class="title function_">query</span><span class="params">(<span class="type">int</span> subjectId)</span> &#123;</span><br><span class="line">        <span class="type">SubjectRadio</span> <span class="variable">subjectRadio</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectRadio</span>();</span><br><span class="line">        subjectRadio.setSubjectId(Long.valueOf(subjectId));</span><br><span class="line">        List&lt;SubjectRadio&gt; result = subjectRadioService.queryByCondition(subjectRadio);</span><br><span class="line">        List&lt;SubjectAnswerBO&gt; subjectAnswerBOList = RadioSubjectConverter.INSTANCE.convertEntityToBoList(result);</span><br><span class="line">        <span class="type">SubjectOptionBO</span> <span class="variable">subjectOptionBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectOptionBO</span>();</span><br><span class="line">        subjectOptionBO.setOptionList(subjectAnswerBOList);</span><br><span class="line">        <span class="keyword">return</span> subjectOptionBO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectController</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectInfoDomainService subjectInfoDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增题目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SubjectInfoDTO subjectInfoDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(subjectInfoDTO.getSubjectName()),</span><br><span class="line">                    <span class="string">&quot;题目名称不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getSubjectDifficult(), <span class="string">&quot;题目难度不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getSubjectType(), <span class="string">&quot;题目类型不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getSubjectScore(), <span class="string">&quot;题目分数不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkArgument(!CollectionUtils.isEmpty(subjectInfoDTO.getCategoryIds())</span><br><span class="line">                    , <span class="string">&quot;分类id不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkArgument(!CollectionUtils.isEmpty(subjectInfoDTO.getLabelIds())</span><br><span class="line">                    , <span class="string">&quot;标签id不能为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertDTOToBO(subjectInfoDTO); <span class="comment">//转为BO</span></span><br><span class="line">            List&lt;SubjectAnswerBO&gt; subjectAnswerBOS =</span><br><span class="line">                    SubjectAnswerDTOConverter.INSTANCE.convertListDTOToBO(subjectInfoDTO.getOptionList()); <span class="comment">//单独添加回答</span></span><br><span class="line">            subjectInfoBO.setOptionList(subjectAnswerBOS);</span><br><span class="line">            subjectInfoDomainService.add(subjectInfoBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增题目失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询题目列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getSubjectPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;SubjectInfoDTO&gt;&gt; <span class="title function_">getSubjectPage</span><span class="params">(<span class="meta">@RequestBody</span> SubjectInfoDTO subjectInfoDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectController.getSubjectPage.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getCategoryId(), <span class="string">&quot;分类id不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getLabelId(), <span class="string">&quot;标签id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertDTOToBO(subjectInfoDTO);</span><br><span class="line">            subjectInfoBO.setPageNo(subjectInfoDTO.getPageNo()); <span class="comment">//页码</span></span><br><span class="line">            subjectInfoBO.setPageSize(subjectInfoDTO.getPageSize()); <span class="comment">//大小</span></span><br><span class="line">            PageResult&lt;SubjectInfoBO&gt; boPageResult = subjectInfoDomainService.getSubjectPage(subjectInfoBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(boPageResult);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;分页查询题目失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询题目信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/querySubjectInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;SubjectInfoDTO&gt; <span class="title function_">querySubjectInfo</span><span class="params">(<span class="meta">@RequestBody</span> SubjectInfoDTO subjectInfoDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectController.querySubjectInfo.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(subjectInfoDTO.getId(), <span class="string">&quot;题目id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertDTOToBO(subjectInfoDTO);</span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">boResult</span> <span class="operator">=</span> subjectInfoDomainService.querySubjectInfo(subjectInfoBO);</span><br><span class="line">            <span class="type">SubjectInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertBOToDTO(boResult);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(dto);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询题目详情失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全文检索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getSubjectPageBySearch&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;SubjectInfoEs&gt;&gt; <span class="title function_">getSubjectPageBySearch</span><span class="params">(<span class="meta">@RequestBody</span> SubjectInfoDTO subjectInfoDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;SubjectController.getSubjectPageBySearch.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(StringUtils.isNotBlank(subjectInfoDTO.getKeyWord()), <span class="string">&quot;关键词不能为空&quot;</span>);</span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertDTOToBO(subjectInfoDTO);</span><br><span class="line">            subjectInfoBO.setPageNo(subjectInfoDTO.getPageNo());</span><br><span class="line">            subjectInfoBO.setPageSize(subjectInfoDTO.getPageSize());</span><br><span class="line">            PageResult&lt;SubjectInfoEs&gt; boPageResult = subjectInfoDomainService.getSubjectPageBySearch(subjectInfoBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(boPageResult);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.getSubjectPageBySearch.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;全文检索失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取题目贡献榜</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getContributeList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;SubjectInfoDTO&gt;&gt; <span class="title function_">getContributeList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;SubjectInfoBO&gt; boList = subjectInfoDomainService.getContributeList();</span><br><span class="line">            List&lt;SubjectInfoDTO&gt; dtoList = SubjectInfoDTOConverter.INSTANCE.convertBOToDTOList(boList);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(dtoList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SubjectCategoryController.getContributeList.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;获取贡献榜失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试mq发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pushMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">pushMessage</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        rocketMQTemplate.convertAndSend(<span class="string">&quot;test-topic&quot;</span>, <span class="string">&quot;早上好&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectInfoDTOConverter</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectInfoDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectInfoDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectInfoDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectInfoBO <span class="title function_">convertDTOToBO</span><span class="params">(SubjectInfoDTO subjectInfoDTO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectInfoDTO <span class="title function_">convertBOToDTO</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfoDTO&gt; <span class="title function_">convertBOToDTOList</span><span class="params">(List&lt;SubjectInfoBO&gt; subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectAnswerDTOConverter</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectAnswerDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectAnswerDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectAnswerDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectAnswerBO <span class="title function_">convertDTOToBO</span><span class="params">(SubjectAnswerDTO subjectAnswerDTO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectAnswerBO&gt; <span class="title function_">convertListDTOToBO</span><span class="params">(List&lt;SubjectAnswerDTO&gt; dtoList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SubjectInfoConverter</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectInfoConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubjectInfoConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SubjectInfoConverter.class);</span><br><span class="line"></span><br><span class="line">    SubjectInfo <span class="title function_">convertBoToInfo</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectInfoBO <span class="title function_">convertOptionToBo</span><span class="params">(SubjectOptionBO subjectOptionBO)</span>;</span><br><span class="line"></span><br><span class="line">    SubjectInfoBO <span class="title function_">convertOptionAndInfoToBo</span><span class="params">(SubjectOptionBO subjectOptionBO,SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfoBO&gt; <span class="title function_">convertListInfoToBO</span><span class="params">(List&lt;SubjectInfo&gt; subjectInfoList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubjectInfoDomainService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectInfoDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增题目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PageResult&lt;SubjectInfoBO&gt; <span class="title function_">getSubjectPage</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询题目信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfoBO <span class="title function_">querySubjectInfo</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全文检索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PageResult&lt;SubjectInfoEs&gt; <span class="title function_">getSubjectPageBySearch</span><span class="params">(SubjectInfoBO subjectInfoBO)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfoBO&gt; <span class="title function_">getContributeList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectInfoDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectInfoService subjectInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMappingService subjectMappingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectLabelService subjectLabelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectTypeHandlerFactory subjectTypeHandlerFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectEsService subjectEsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectLikedDomainService subjectLikedDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRpc userRpc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RANK_KEY</span> <span class="operator">=</span> <span class="string">&quot;subject_rank&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectInfoDomainServiceImpl.add.bo:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoBO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> SubjectInfoConverter.INSTANCE.convertBoToInfo(subjectInfoBO);</span><br><span class="line">        subjectInfo.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectInfoService.insert(subjectInfo);</span><br><span class="line">        <span class="type">SubjectTypeHandler</span> <span class="variable">handler</span> <span class="operator">=</span> subjectTypeHandlerFactory.getHandler(subjectInfo.getSubjectType()); <span class="comment">//题目类型关系工厂</span></span><br><span class="line">        subjectInfoBO.setId(subjectInfo.getId());</span><br><span class="line">        handler.add(subjectInfoBO);</span><br><span class="line">        List&lt;Integer&gt; categoryIds = subjectInfoBO.getCategoryIds();</span><br><span class="line">        List&lt;Integer&gt; labelIds = subjectInfoBO.getLabelIds();</span><br><span class="line">        List&lt;SubjectMapping&gt; mappingList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        categoryIds.forEach(categoryId -&gt; &#123; <span class="comment">//category和label多对多的关系</span></span><br><span class="line">            labelIds.forEach(labelId -&gt; &#123;</span><br><span class="line">                <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">                subjectMapping.setSubjectId(subjectInfo.getId());</span><br><span class="line">                subjectMapping.setCategoryId(Long.valueOf(categoryId));</span><br><span class="line">                subjectMapping.setLabelId(Long.valueOf(labelId));</span><br><span class="line">                subjectMapping.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">                mappingList.add(subjectMapping);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        subjectMappingService.batchInsert(mappingList);</span><br><span class="line">        <span class="comment">//同步到es</span></span><br><span class="line">        <span class="type">SubjectInfoEs</span> <span class="variable">subjectInfoEs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>();</span><br><span class="line">        subjectInfoEs.setDocId(<span class="keyword">new</span> <span class="title class_">IdWorkerUtil</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>).nextId());</span><br><span class="line">        subjectInfoEs.setSubjectId(subjectInfo.getId());</span><br><span class="line">        subjectInfoEs.setSubjectAnswer(subjectInfoBO.getSubjectAnswer());</span><br><span class="line">        subjectInfoEs.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">        subjectInfoEs.setCreateUser(<span class="string">&quot;Roger&quot;</span>);</span><br><span class="line">        subjectInfoEs.setSubjectName(subjectInfo.getSubjectName());</span><br><span class="line">        subjectInfoEs.setSubjectType(subjectInfo.getSubjectType());</span><br><span class="line">        subjectEsService.insert(subjectInfoEs);</span><br><span class="line">        <span class="comment">//redis放入zadd计入排行榜</span></span><br><span class="line">        redisUtil.addScore(RANK_KEY, LoginUtil.getLoginId(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//实现了分页查询逻辑，并且将查询到的数据和相关的标签信息封装到业务对象中，最后包装成一个分页结果返回。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;SubjectInfoBO&gt; <span class="title function_">getSubjectPage</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        PageResult&lt;SubjectInfoBO&gt; pageResult = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;();</span><br><span class="line">        pageResult.setPageNo(subjectInfoBO.getPageNo());</span><br><span class="line">        pageResult.setPageSize(subjectInfoBO.getPageSize());</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (subjectInfoBO.getPageNo() - <span class="number">1</span>) * subjectInfoBO.getPageSize();</span><br><span class="line">        <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> SubjectInfoConverter.INSTANCE.convertBoToInfo(subjectInfoBO);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectInfoService.countByCondition(subjectInfo, subjectInfoBO.getCategoryId()</span><br><span class="line">                , subjectInfoBO.getLabelId()); <span class="comment">//根据条件查询满足要求的题目总数。</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pageResult;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;SubjectInfo&gt; subjectInfoList = subjectInfoService.queryPage(subjectInfo, subjectInfoBO.getCategoryId()</span><br><span class="line">                , subjectInfoBO.getLabelId(), start, subjectInfoBO.getPageSize());</span><br><span class="line">        List&lt;SubjectInfoBO&gt; subjectInfoBOS = SubjectInfoConverter.INSTANCE.convertListInfoToBO(subjectInfoList);</span><br><span class="line">        subjectInfoBOS.forEach(info -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">            subjectMapping.setSubjectId(info.getId());</span><br><span class="line">            List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">            List&lt;Long&gt; labelIds = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">            List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIds);</span><br><span class="line">            List&lt;String&gt; labelNames = labelList.stream().map(SubjectLabel::getLabelName).collect(Collectors.toList());</span><br><span class="line">            info.setLabelName(labelNames);</span><br><span class="line">        &#125;);</span><br><span class="line">        pageResult.setRecords(subjectInfoBOS);</span><br><span class="line">        pageResult.setTotal(count);</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfoBO <span class="title function_">querySubjectInfo</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> subjectInfoService.queryById(subjectInfoBO.getId());</span><br><span class="line">        <span class="type">SubjectTypeHandler</span> <span class="variable">handler</span> <span class="operator">=</span> subjectTypeHandlerFactory.getHandler(subjectInfo.getSubjectType());</span><br><span class="line">        <span class="type">SubjectOptionBO</span> <span class="variable">optionBO</span> <span class="operator">=</span> handler.query(subjectInfo.getId().intValue());</span><br><span class="line">        <span class="type">SubjectInfoBO</span> <span class="variable">bo</span> <span class="operator">=</span> SubjectInfoConverter.INSTANCE.convertOptionAndInfoToBo(optionBO, subjectInfo);</span><br><span class="line">        <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">        subjectMapping.setSubjectId(subjectInfo.getId());</span><br><span class="line">        subjectMapping.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">        List&lt;Long&gt; labelIdList = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">        List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIdList);</span><br><span class="line">        List&lt;String&gt; labelNameList = labelList.stream().map(SubjectLabel::getLabelName).collect(Collectors.toList());</span><br><span class="line">        bo.setLabelName(labelNameList);</span><br><span class="line">        bo.setLiked(subjectLikedDomainService.isLiked(subjectInfoBO.getId().toString(), LoginUtil.getLoginId()));</span><br><span class="line">        bo.setLikedCount(subjectLikedDomainService.getLikedCount(subjectInfoBO.getId().toString()));</span><br><span class="line">        assembleSubjectCursor(subjectInfoBO, bo);</span><br><span class="line">        <span class="keyword">return</span> bo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assembleSubjectCursor</span><span class="params">(SubjectInfoBO subjectInfoBO, SubjectInfoBO bo)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> subjectInfoBO.getCategoryId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">labelId</span> <span class="operator">=</span> subjectInfoBO.getLabelId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">subjectId</span> <span class="operator">=</span> subjectInfoBO.getId();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(categoryId) || Objects.isNull(labelId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">nextSubjectId</span> <span class="operator">=</span> subjectInfoService.querySubjectIdCursor(subjectId, categoryId, labelId, <span class="number">1</span>);</span><br><span class="line">        bo.setNextSubjectId(nextSubjectId);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">lastSubjectId</span> <span class="operator">=</span> subjectInfoService.querySubjectIdCursor(subjectId, categoryId, labelId, <span class="number">0</span>);</span><br><span class="line">        bo.setLastSubjectId(lastSubjectId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;SubjectInfoEs&gt; <span class="title function_">getSubjectPageBySearch</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">        <span class="type">SubjectInfoEs</span> <span class="variable">subjectInfoEs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>();</span><br><span class="line">        subjectInfoEs.setPageNo(subjectInfoBO.getPageNo());</span><br><span class="line">        subjectInfoEs.setPageSize(subjectInfoBO.getPageSize());</span><br><span class="line">        subjectInfoEs.setKeyWord(subjectInfoBO.getKeyWord());</span><br><span class="line">        <span class="keyword">return</span> subjectEsService.querySubjectList(subjectInfoEs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectInfoBO&gt; <span class="title function_">getContributeList</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = redisUtil.rankWithScore(RANK_KEY, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;getContributeList.typedTuples:&#123;&#125;&quot;</span>, JSON.toJSONString(typedTuples));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(typedTuples)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;SubjectInfoBO&gt; boList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        typedTuples.forEach((rank -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoBO</span>();</span><br><span class="line">            subjectInfoBO.setSubjectCount(rank.getScore().intValue());</span><br><span class="line">            <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userRpc.getUserInfo(rank.getValue());</span><br><span class="line">            subjectInfoBO.setCreateUser(userInfo.getNickName());</span><br><span class="line">            subjectInfoBO.setCreateUserAvatar(userInfo.getAvatar());</span><br><span class="line">            boList.add(subjectInfoBO);</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">return</span> boList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;subjectInfoService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectInfoService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectInfoDao subjectInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfo <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfo <span class="title function_">insert</span><span class="params">(SubjectInfo subjectInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subjectInfoDao.insert(subjectInfo);</span><br><span class="line">        <span class="keyword">return</span> subjectInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SubjectInfo <span class="title function_">update</span><span class="params">(SubjectInfo subjectInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subjectInfoDao.update(subjectInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.queryById(subjectInfo.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countByCondition</span><span class="params">(SubjectInfo subjectInfo, Long categoryId, Long labelId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.countByCondition(subjectInfo, categoryId, labelId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectInfo&gt; <span class="title function_">queryPage</span><span class="params">(SubjectInfo subjectInfo, Long categoryId, Long labelId, <span class="type">int</span> start, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.queryPage(subjectInfo, categoryId, labelId, start, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectInfo&gt; <span class="title function_">getContributeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.getContributeCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">querySubjectIdCursor</span><span class="params">(Long subjectId, Long categoryId, Long labelId, <span class="type">int</span> cursor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.querySubjectIdCursor(subjectId, categoryId, labelId, cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfo <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfo <span class="title function_">insert</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfo <span class="title function_">update</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">countByCondition</span><span class="params">(SubjectInfo subjectInfo, Long categoryId, Long labelId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfo&gt; <span class="title function_">queryPage</span><span class="params">(SubjectInfo subjectInfo, Long categoryId, Long labelId, <span class="type">int</span> start, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfo&gt; <span class="title function_">getContributeCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">querySubjectIdCursor</span><span class="params">(Long subjectId, Long categoryId, Long labelId, <span class="type">int</span> cursor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectInfoDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SubjectInfo <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定行数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SubjectInfo&gt; <span class="title function_">queryAllByLimit</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计总行数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增数据（MyBatis原生foreach方法）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities List&lt;SubjectInfo&gt; 实例对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;entities&quot;)</span> List&lt;SubjectInfo&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增或按主键更新数据（MyBatis原生foreach方法）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities List&lt;SubjectInfo&gt; 实例对象列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertOrUpdateBatch</span><span class="params">(<span class="meta">@Param(&quot;entities&quot;)</span> List&lt;SubjectInfo&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subjectInfo 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(SubjectInfo subjectInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">countByCondition</span><span class="params">(<span class="meta">@Param(&quot;subjectInfo&quot;)</span> SubjectInfo subjectInfo,</span></span><br><span class="line"><span class="params">                         <span class="meta">@Param(&quot;categoryId&quot;)</span> Long categoryId,</span></span><br><span class="line"><span class="params">                         <span class="meta">@Param(&quot;labelId&quot;)</span> Long labelId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfo&gt; <span class="title function_">queryPage</span><span class="params">(<span class="meta">@Param(&quot;subjectInfo&quot;)</span> SubjectInfo subjectInfo,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;categoryId&quot;)</span> Long categoryId,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;labelId&quot;)</span> Long labelId,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;start&quot;)</span> <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;pageSize&quot;)</span> Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;SubjectInfo&gt; <span class="title function_">getContributeCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">querySubjectIdCursor</span><span class="params">(<span class="meta">@Param(&quot;subjectId&quot;)</span> Long subjectId,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Param(&quot;categoryId&quot;)</span> Long categoryId,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Param(&quot;labelId&quot;)</span> Long labelId,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Param(&quot;cursor&quot;)</span> <span class="type">int</span> cursor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JacksonConverter（对于返回值的处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.application.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.subject.application.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mvc的全局处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/10/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureMessageConverters(converters);</span><br><span class="line">        converters.add(mappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义mappingJackson2HttpMessageConverter</span></span><br><span class="line"><span class="comment">     * 目前实现：空值忽略，空字段可返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>); <span class="comment">//这行代码配置ObjectMapper，使其在序列化时不会因空Bean而失败。</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); <span class="comment">//这行代码设置序列化时只包含非空的字段。（即返回的json结果中不会含有值为Null的字段）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SQL拦截器自动翻译（mybatis提供的）</strong></p><p>SqlStatementInterceptor 主要作用是监控MyBatis的SQL执行时间，并根据不同的执行时间记录不同级别的日志</p><p>MybatisPlusAllSqlLog这个类实现了<code>InnerInterceptor</code>接口，它是MyBatis-Plus框架提供的一个内部拦截器接口，用于拦截SQL的执行。这个类有两个主要的重写方法：</p><ul><li><code>beforeQuery</code>: 在查询执行前调用，记录SQL信息。</li><li><code>beforeUpdate</code>: 在更新执行前调用，记录SQL信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SqlStatementInterceptor 主要作用是监控MyBatis的SQL执行时间，并根据不同的执行时间记录不同级别的日志</span></span><br><span class="line"><span class="keyword">package</span> com.jingdianjichi.subject.infra.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class,</span></span><br><span class="line"><span class="meta">                Object.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class,</span></span><br><span class="line"><span class="meta">                Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlStatementInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;sys-sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">timeConsuming</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            log.info(<span class="string">&quot;执行SQL:&#123;&#125;ms&quot;</span>, timeConsuming);</span><br><span class="line">            <span class="keyword">if</span> (timeConsuming &gt; <span class="number">999</span> &amp;&amp; timeConsuming &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;执行SQL大于1s:&#123;&#125;ms&quot;</span>, timeConsuming);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeConsuming &gt;= <span class="number">5000</span> &amp;&amp; timeConsuming &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;执行SQL大于5s:&#123;&#125;ms&quot;</span>, timeConsuming);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeConsuming &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;执行SQL大于10s:&#123;&#125;ms&quot;</span>, timeConsuming);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MybatisPlusAllSqlLog</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusAllSqlLog</span> <span class="keyword">implements</span> <span class="title class_">InnerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;sys-sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeQuery</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        logInfo(boundSql, ms, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeUpdate</span><span class="params">(Executor executor, MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> ms.getBoundSql(parameter);</span><br><span class="line">        logInfo(boundSql, ms, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logInfo</span><span class="params">(BoundSql boundSql, MappedStatement ms, Object parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;parameter = &quot;</span> + parameter);</span><br><span class="line">            <span class="comment">// 获取到节点的id,即sql语句的id</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> ms.getId();</span><br><span class="line">            log.info(<span class="string">&quot;sqlId = &quot;</span> + sqlId);</span><br><span class="line">            <span class="comment">// 获取节点的配置</span></span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取到最终的sql语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> getSql(configuration, boundSql, sqlId);</span><br><span class="line">            log.info(<span class="string">&quot;完整的sql:&#123;&#125;&quot;</span>, sql);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;异常:&#123;&#125;&quot;</span>, e.getLocalizedMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装了一下sql语句，使得结果返回完整xml路径下的sql语句节点id + sql语句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSql</span><span class="params">(Configuration configuration, BoundSql boundSql, String sqlId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlId + <span class="string">&quot;:&quot;</span> + showSql(configuration, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行？的替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">showSql</span><span class="params">(Configuration configuration, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">// sql语句中多个空格都用一个空格代替</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql().replaceAll(<span class="string">&quot;[\\s]+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(parameterMappings) &amp;&amp; parameterObject != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取类型处理器注册器，类型处理器的功能是进行java类型和数据库类型的转换</span></span><br><span class="line">            <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> configuration.getTypeHandlerRegistry();</span><br><span class="line">            <span class="comment">// 如果根据parameterObject.getClass(）可以找到对应的类型，则替换</span></span><br><span class="line">            <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">                sql = sql.replaceFirst(<span class="string">&quot;\\?&quot;</span>,</span><br><span class="line">                        Matcher.quoteReplacement(getParameterValue(parameterObject)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// MetaObject主要是封装了originalObject对象，提供了get和set的方法用于获取和设置originalObject的属性值,主要支持对JavaBean、Collection、Map三种类型对象的操作</span></span><br><span class="line">                <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">                <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">                    <span class="keyword">if</span> (metaObject.hasGetter(propertyName)) &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> metaObject.getValue(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">&quot;\\?&quot;</span>,</span><br><span class="line">                                Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">                        <span class="comment">// 该分支是动态sql</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">&quot;\\?&quot;</span>,</span><br><span class="line">                                Matcher.quoteReplacement(getParameterValue(obj)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 打印出缺失，提醒该参数缺失并防止错位</span></span><br><span class="line">                        sql = sql.replaceFirst(<span class="string">&quot;\\?&quot;</span>, <span class="string">&quot;缺失&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果参数是String，则添加单引号， 如果是日期，则转换为时间格式器并加单引号； 对参数是null和不是null的情况作了处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getParameterValue</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        String value;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            value = <span class="string">&quot;&#x27;&quot;</span> + obj.toString() + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">            <span class="type">DateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> DateFormat.getDateTimeInstance(DateFormat.DEFAULT,</span><br><span class="line">                    DateFormat.DEFAULT, Locale.CHINA);</span><br><span class="line">            value = <span class="string">&quot;&#x27;&quot;</span> + formatter.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                value = obj.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="传统部署形式"><a href="#传统部署形式" class="headerlink" title="传统部署形式"></a>传统部署形式</h4><p>在starter模块的pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//配置的版本等内容</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.6<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">....</span><br><span class="line">//打包的名字</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打包成jar包时的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包好Jar包,复制到服务器上,java -jar运行即可</p><p>但是这样还是比较复杂</p><h4 id="CI-CD-jenkins自动打包集成和部署"><a href="#CI-CD-jenkins自动打包集成和部署" class="headerlink" title="CI&#x2F;CD jenkins自动打包集成和部署"></a>CI&#x2F;CD jenkins自动打包集成和部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins</span><br><span class="line">docker pull jenkins/jenkins:lts</span><br><span class="line">docker run -d -u root -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins jenkins/jenkins:lts</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>然后配置一些密码，maven，拉一些包，配置pom.xml，配置路径，就可以打包好，写一个shell脚本然后运行就行了</p><p>[shell脚本语言(超全超详细)-CSDN博客](<a href="https://blog.csdn.net/weixin_43288201/article/details/105643692?ops_request_misc=&request_id=&biz_id=102&utm_term=shell">https://blog.csdn.net/weixin_43288201/article/details/105643692?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=shell</a> 脚本 ^&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-5-105643692.142^v100^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cp /var/jenkins_home/workspace/programmer-club-subject/programmer-club-subject/programmer-club-starter/target/programmer-club-starter.jar /var/jenkins_home/jar/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">APP_NAME=programmer-club-starter.jar</span><br><span class="line">LOG_NAME=programmer-club-starter.log</span><br><span class="line"></span><br><span class="line">pid=`ps -ef | grep $APP_NAME | grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">function is_exist()&#123;</span><br><span class="line">pid=`ps -ef | grep $APP_NAME | grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ -z $&#123;pid&#125; ]; then</span><br><span class="line">String=&quot;notExist&quot;</span><br><span class="line">echo $String</span><br><span class="line">else</span><br><span class="line">String=&quot;exist&quot;</span><br><span class="line">echo $String</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str=$(is_exist)</span><br><span class="line">if [ $&#123;str&#125; = &quot;exist&quot; ]; then</span><br><span class="line">echo &quot; 检测到已经启动的程序，pid 是 $&#123;pid&#125; &quot;</span><br><span class="line">kill -9 $pid</span><br><span class="line">else</span><br><span class="line">echo &quot; 程序没有启动了 &quot;</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str=$(is_exist)</span><br><span class="line">if [ $&#123;str&#125; = &quot;exist&quot; ]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; 已经启动了. pid=$&#123;pid&#125; .&quot;</span><br><span class="line">else</span><br><span class="line">source /etc/profile</span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line">nohup java -Xms300m -Xmx300m -jar /var/jenkins_home/jar/$APP_NAME   &gt;$LOG_NAME 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;程序已重新启动...&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这个脚本中获取PID的命令：</p><ol><li><code>ps -ef</code>：这个命令列出了当前系统上所有正在运行的进程。<code>-e</code>选项表示显示所有进程，<code>-f</code>选项表示显示完整格式。</li><li><code>grep $APP_NAME</code>：<code>grep</code>命令用于搜索包含指定文本的行。在这里，它搜索包含<code>APP_NAME</code>变量值（即<code>programmer-club-starter.jar</code>）的行。</li><li><code>grep -v grep</code>：这个命令用于排除包含<code>grep</code>本身的行，<code>-v</code>选项表示显示不包含匹配文本的行。</li><li><code>awk &#39;&#123;print $2&#125;&#39;</code>：<code>awk</code>是一个强大的文本处理工具。在这里，它用于打印每行的第二个字段，即进程ID（PID）。在Unix&#x2F;Linux系统中，<code>ps -ef</code>命令的输出中，PID通常位于第二列。</li></ol><h3 id="2-OSS模块-jc-club-oss"><a href="#2-OSS模块-jc-club-oss" class="headerlink" title="2. OSS模块(jc-club-oss)"></a>2. OSS模块(jc-club-oss)</h3><p><img src="https://s2.loli.net/2024/07/28/XtN8V5Dq4orKgFP.png" alt="image-20240728193051763.png"></p><h4 id="OSS模块设计"><a href="#OSS模块设计" class="headerlink" title="OSS模块设计"></a>OSS模块设计</h4><p><img src="https://s2.loli.net/2024/07/17/DutXl68xcz4QmRr.png" alt="image-20240717153600388.png"></p><p>注意：考虑 oss 的扩展性和切换性。</p><p>目前对接的 minio，要考虑，如果作为公共的 oss 服务，如何切换到其他的阿里云 oss 或者对接京东云的 oss。作为基础的 oss 服务，切换等等动作，不应该要求业务方进行改造，以及对切换有感知。</p><p><img src="https://s2.loli.net/2024/07/17/Ag6VbxBDoSRjn4O.png" alt="image-20240717153706800.png"></p><h4 id="minio模块开发"><a href="#minio模块开发" class="headerlink" title="minio模块开发"></a>minio模块开发</h4><p>controller-&gt;service-&gt;adaper（阿里&#x2F;minio，适配器模式，不用工厂＋策略的是因为工厂+策略的传入的参数之类的差不多，所以用适配器）-&gt;具体操作</p><p><a href="https://blog.csdn.net/Java_Mr_Jin/article/details/125643455?ops_request_misc=%7B%22request_id%22:%22172205057816800211579712%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172205057816800211579712&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125643455-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=minio&spm=1018.2226.3001.4187">minio安装部署及使用-CSDN博客</a></p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //spingcloud的nacos</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://117.72.14.166:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">  <span class="attr">type:</span></span><br><span class="line">  <span class="string">minio</span></span><br><span class="line"> <span class="string">/*</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">`server.port:</span> <span class="number">4000</span><span class="string">`：这行配置指定了应用程序运行的端口号为4000。</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">`minio`部分：配置了MinIO服务的相关属性。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">`url`：MinIO服务的URL地址，这里是`http://117.72.14.166:9000`。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">`accessKey`和`secretKey`：访问MinIO服务的密钥和私钥，这里都设置为`minioadmin`。</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">`storage.service.type.minio`：指定存储服务的类型为MinIO。</span></span><br><span class="line"> <span class="string">*/</span></span><br></pre></td></tr></table></figure><p><code>Miniocofig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.oss.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * minio配置管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minioUrl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造minioClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">getMinioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder().endpoint(url).credentials(accessKey, secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MinioUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.oss.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.oss.entity.FileInfo;</span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * minio文件操作工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建bucket桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucket).build());</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucket).build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(InputStream inputStream, String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        minioClient.putObject(PutObjectArgs.builder().bucket(bucket).object(objectName)</span><br><span class="line">                .stream(inputStream, -<span class="number">1</span>, <span class="number">5242889L</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出所有桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllBucket</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Bucket&gt; buckets = minioClient.listBuckets();</span><br><span class="line">        <span class="keyword">return</span> buckets.stream().map(Bucket::name).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出当前桶及文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;FileInfo&gt; <span class="title function_">getAllFile</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucket).build());</span><br><span class="line">        List&lt;FileInfo&gt; fileInfoList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">            <span class="type">FileInfo</span> <span class="variable">fileInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInfo</span>();</span><br><span class="line">            <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> result.get();</span><br><span class="line">            fileInfo.setFileName(item.objectName());</span><br><span class="line">            fileInfo.setDirectoryFlag(item.isDir());</span><br><span class="line">            fileInfo.setEtag(item.etag());</span><br><span class="line">            fileInfoList.add(fileInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileInfoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">downLoad</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.getObject(</span><br><span class="line">                GetObjectArgs.builder().bucket(bucket).object(objectName).build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        minioClient.removeBucket(</span><br><span class="line">                RemoveBucketArgs.builder().bucket(bucket).build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        minioClient.removeObject(</span><br><span class="line">                RemoveObjectArgs.builder().bucket(bucket).object(objectName).build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPreviewFileUrl</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                    .method(Method.GET)</span><br><span class="line">                    .bucket(bucketName).object(objectName).build();</span><br><span class="line">            <span class="keyword">return</span> minioClient.getPresignedObjectUrl(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>FileInfo.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean directoryFlag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String etag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileName</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getDirectoryFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> directoryFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDirectoryFlag</span><span class="params">(Boolean directoryFlag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.directoryFlag = directoryFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEtag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> etag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEtag</span><span class="params">(String etag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.etag = etag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testGetAllBuckets&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testGetAllBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;String&gt; allBucket = fileService.getAllBucket();</span><br><span class="line">        <span class="keyword">return</span> allBucket.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUrl&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> fileService.getUrl(bucketName, objectName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> fileService.uploadFile(uploadFile, bucket, objectName);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fileService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StorageAdapter storageAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileService</span><span class="params">(StorageAdapter storageAdapter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.storageAdapter = storageAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出所有桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> storageAdapter.getAllBucket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String bucketName,String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> storageAdapter.getUrl(bucketName,objectName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span>&#123;</span><br><span class="line">        storageAdapter.uploadFile(uploadFile,bucket,objectName);</span><br><span class="line">        objectName = objectName + <span class="string">&quot;/&quot;</span> + uploadFile.getOriginalFilename();</span><br><span class="line">        <span class="keyword">return</span> storageAdapter.getUrl(bucket, objectName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StorageConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//实现nacos动态的配置刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StorageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;storage.service.type&#125;&quot;)</span>  <span class="comment">//这里的注解是从pom.xml中去读的</span></span><br><span class="line">    <span class="keyword">private</span> String storageType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@RefreshScope</span> <span class="comment">//实现nacos动态的配置刷新</span></span><br><span class="line">    <span class="keyword">public</span> StorageAdapter <span class="title function_">storageService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;minio&quot;</span>.equals(storageType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MinioStorageAdapter</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;aliyun&quot;</span>.equals(storageType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliStorageAdapter</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未找到对应的文件存储处理器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StorageAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StorageAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建bucket桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出所有桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">getAllBucket</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出当前桶及文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;FileInfo&gt; <span class="title function_">getAllFile</span><span class="params">(String bucket)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    InputStream <span class="title function_">downLoad</span><span class="params">(String bucket, String objectName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getUrl</span><span class="params">(String bucket, String objectName)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MinioStorageAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.oss.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.oss.entity.FileInfo;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.oss.util.MinioUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * minioIO存储适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioStorageAdapter</span> <span class="keyword">implements</span> <span class="title class_">StorageAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minioUrl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        minioUtil.createBucket(bucket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span> &#123;</span><br><span class="line">        minioUtil.createBucket(bucket);</span><br><span class="line">        <span class="keyword">if</span> (objectName != <span class="literal">null</span>) &#123;</span><br><span class="line">            minioUtil.uploadFile(uploadFile.getInputStream(), bucket, objectName + <span class="string">&quot;/&quot;</span> + uploadFile.getOriginalFilename());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            minioUtil.uploadFile(uploadFile.getInputStream(), bucket, uploadFile.getOriginalFilename());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minioUtil.getAllBucket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;FileInfo&gt; <span class="title function_">getAllFile</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minioUtil.getAllFile(bucket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">downLoad</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minioUtil.downLoad(bucket, objectName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        minioUtil.deleteBucket(bucket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        minioUtil.deleteObject(bucket, objectName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url + <span class="string">&quot;/&quot;</span> + bucket + <span class="string">&quot;/&quot;</span> + objectName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里相当于做了个适配器，这里用的是minio的，如果要用阿里的服务就要切到另一套了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.oss.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.oss.entity.FileInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云oss适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliStorageAdapter</span> <span class="keyword">implements</span> <span class="title class_">StorageAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllBucket</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; bucketNameList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        bucketNameList.add(<span class="string">&quot;aliyun&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bucketNameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;FileInfo&gt; <span class="title function_">getAllFile</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">downLoad</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="OSS模块配合nacos实现动态切换"><a href="#OSS模块配合nacos实现动态切换" class="headerlink" title="OSS模块配合nacos实现动态切换"></a>OSS模块配合nacos实现动态切换</h4><p>nacos 作为配置中心，可以实现动态配置，适用于比如动态数据源切换，动态切换 oss。</p><p><strong>这里要配合<code>RefreshScope</code>注解去使用</strong>，实现动态刷新（minio-&gt;ali）。</p><p><a href="https://blog.csdn.net/m0_71777195/article/details/126319418?ops_request_misc=%7B%22request_id%22:%22172205984816800185890242%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172205984816800185890242&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-126319418-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=RefreshScope&spm=1018.2226.3001.4187">一文带你理解@RefreshScope注解实现动态刷新原理-CSDN博客</a></p><h5 id="集成naocs动态配置"><a href="#集成naocs动态配置" class="headerlink" title="集成naocs动态配置"></a>集成naocs动态配置</h5><p>配置</p><ol><li><p>jc-club-oss&#x2F;pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>jc-club-oss&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;jingdianjichi&#x2F;oss&#x2F;controller&#x2F;FileController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span>&#123; </span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NacosValue(value = &quot;$&#123;storage.service.type&#125;&quot;, autoRefreshed = true)</span></span><br><span class="line">    <span class="keyword">private</span> String storageType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testGetAllBuckets&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testGetAllBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;String&gt; allBucket = fileService.getAllBucket();</span><br><span class="line">        <span class="keyword">return</span> allBucket.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testNacos&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testNacos</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> storageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>jc-club-oss&#x2F;src&#x2F;main&#x2F;resources&#x2F;bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jc-club-oss-dev</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">Spring</span> <span class="string">应用名称：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">application.name:</span> <span class="string">jc-club-oss-dev：定义了Spring应用的名称为jc-club-oss-dev。</span></span><br><span class="line"><span class="string">激活的配置文件：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">profiles.active:</span> <span class="string">dev：指定了激活的配置文件为dev，这意味着在启动时会加载application-dev.yaml或application-dev.properties等配置文件。</span></span><br><span class="line"><span class="string">Nacos</span> <span class="string">配置：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloud.nacos.config.server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848：定义了Nacos配置服务器的地址，这里是117.72.14.166:8848。</span></span><br><span class="line"><span class="attr">cloud.nacos.config.prefix:</span> <span class="string">$&#123;spring.application.name&#125;：定义了配置的前缀，这里使用了$&#123;spring.application.name&#125;，即应用名称作为前缀。</span></span><br><span class="line"><span class="attr">cloud.nacos.config.group:</span> <span class="string">DEFAULT_GROUP：定义了配置的分组，这里是DEFAULT_GROUP。</span></span><br><span class="line"><span class="string">cloud.nacos.config.namespace：这里没有指定具体的命名空间，通常用于区分不同环境的配置。</span></span><br><span class="line"><span class="attr">cloud.nacos.config.file-extension:</span> <span class="string">yaml：指定了配置文件的扩展名，这里是yaml。</span></span><br><span class="line"><span class="string">Nacos</span> <span class="string">服务发现：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloud.nacos.discovery.enabled:</span> <span class="literal">true</span><span class="string">：启用了Nacos的服务发现功能。</span></span><br><span class="line"><span class="attr">cloud.nacos.discovery.server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848：定义了Nacos服务发现服务器的地址，与配置服务器地址一致。</span></span><br><span class="line"><span class="string">配置的作用</span></span><br><span class="line"><span class="string">配置管理：通过Nacos配置中心，应用可以动态地读取和更新配置，而不需要重启应用。这对于微服务架构中的配置管理非常有用。</span></span><br><span class="line"><span class="string">服务发现：通过Nacos服务注册中心，应用可以注册自身服务并发现其他服务，从而实现服务间的调用。</span></span><br><span class="line"><span class="string">使用场景</span></span><br><span class="line"><span class="string">在微服务架构中，使用Nacos进行配置管理和服务发现可以提高系统的可维护性和可扩展性。</span></span><br><span class="line"><span class="string">动态配置更新：应用可以根据Nacos配置中心的配置变化自动更新其配置，而不需要人工干预。*/</span></span><br></pre></td></tr></table></figure></li></ol><p>通过在nacos界面修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">minio/aliyun</span></span><br></pre></td></tr></table></figure><p>即可通过**@Configuration**注解的<code>Storage.java</code>中的<code>@Bean、@RefreshScope</code>注解的storageService方法会创建适配器的对应的StorageAdapter，拿到minio&#x2F;阿里云的oss服务。</p><p><a href="https://blog.csdn.net/weixin_44296929/article/details/139138784?ops_request_misc=%7B%22request_id%22:%22172208236416800222858291%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172208236416800222858291&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-139138784-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@Configuration%E7%B1%BB&spm=1018.2226.3001.4187">@Configuration注解使用详解【记录】-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_46190243/article/details/105604483?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~PaidSort-1-105604483-blog-135087635.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~PaidSort-1-105604483-blog-135087635.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2">Spring 常用注解@Configuration，@Bean，@Component，@Service，@Controller，@Repository，@Entity的区分与学习_@entity @repository 区别-CSDN博客</a></p><h3 id="3-登录鉴权模块"><a href="#3-登录鉴权模块" class="headerlink" title="3. 登录鉴权模块"></a>3. 登录鉴权模块</h3><p><img src="https://s2.loli.net/2024/07/28/l9Wx8Itu31GewjT.png" alt="image-20240728193217684.png"></p><p><img src="https://s2.loli.net/2024/07/29/txUbV5a1osP7f2z.png" alt="image-20240729100733585.png"></p><h4 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h4><p><strong>Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>分布式Session会话</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。</p><p>Sa-Token 旨在以简单、优雅的方式完成系统的权限认证部分，以登录认证为例，你只需要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话登录，参数填登录人的账号id </span></span><br><span class="line">StpUtil.login(<span class="number">10001</span>);</span><br></pre></td></tr></table></figure><p>无需实现任何接口，无需创建任何配置文件，只需要这一句静态代码的调用，便可以完成会话登录认证。</p><p>如果一个接口需要登录后才能访问，我们只需调用以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 校验当前客户端是否已经登录，如果未登录则抛出 `NotLoginException` 异常</span></span><br><span class="line">StpUtil.checkLogin();</span><br></pre></td></tr></table></figure><p>在 Sa-Token 中，大多数功能都可以一行代码解决：</p><p>踢人下线：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将账号id为 10077 的会话踢下线 </span></span><br><span class="line">StpUtil.kickout(<span class="number">10077</span>);复制到剪贴板错误复制成功</span><br></pre></td></tr></table></figure><p>权限认证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解鉴权：只有具备 `user:add` 权限的会话才可以进入方法</span></span><br><span class="line"><span class="meta">@SaCheckPermission(&quot;user:add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">insert</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由拦截鉴权：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据路由划分模块，不同模块不同鉴权 </span></span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SaInterceptor</span>(handler -&gt; &#123;</span><br><span class="line">    SaRouter.match(<span class="string">&quot;/user/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    SaRouter.match(<span class="string">&quot;/admin/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    SaRouter.match(<span class="string">&quot;/goods/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;goods&quot;</span>));</span><br><span class="line">    SaRouter.match(<span class="string">&quot;/orders/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line">    SaRouter.match(<span class="string">&quot;/notice/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;notice&quot;</span>));</span><br><span class="line">    <span class="comment">// 更多模块... </span></span><br><span class="line">&#125;)).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>当你受够 Shiro、SpringSecurity 等框架的三拜九叩之后，你就会明白，相对于这些传统老牌框架，Sa-Token 的 API 设计是多么的简单、优雅！</p><p><a href="https://sa-token.cc/doc.html#/?id=sa-token-%E5%8A%9F%E8%83%BD%E4%B8%80%E8%A7%88">Sa-Token 功能一览</a></p><p>Sa-Token 目前主要五大功能模块：登录认证、权限认证、单点登录、OAuth2.0、微服务鉴权。</p><ul><li><strong>登录认证</strong> —— 单端登录、多端登录、同端互斥登录、七天内免登录。</li><li><strong>权限认证</strong> —— 权限认证、角色认证、会话二级认证。</li><li><strong>踢人下线</strong> —— 根据账号id踢人下线、根据Token值踢人下线。</li><li><strong>注解式鉴权</strong> —— 优雅的将鉴权与业务代码分离。</li><li><strong>路由拦截式鉴权</strong> —— 根据路由拦截鉴权，可适配 restful 模式。</li><li><strong>Session会话</strong> —— 全端共享Session,单端独享Session,自定义Session,方便的存取值。</li><li><strong>持久层扩展</strong> —— 可集成 Redis，重启数据不丢失。</li><li><strong>前后台分离</strong> —— APP、小程序等不支持 Cookie 的终端也可以轻松鉴权。</li><li><strong>Token风格定制</strong> —— 内置六种 Token 风格，还可：自定义 Token 生成策略。</li><li><strong>记住我模式</strong> —— 适配 [记住我] 模式，重启浏览器免验证。</li><li><strong>二级认证</strong> —— 在已登录的基础上再次认证，保证安全性。</li><li><strong>模拟他人账号</strong> —— 实时操作任意用户状态数据。</li><li><strong>临时身份切换</strong> —— 将会话身份临时切换为其它账号。</li><li><strong>同端互斥登录</strong> —— 像QQ一样手机电脑同时在线，但是两个手机上互斥登录。</li><li><strong>账号封禁</strong> —— 登录封禁、按照业务分类封禁、按照处罚阶梯封禁。</li><li><strong>密码加密</strong> —— 提供基础加密算法，可快速 MD5、SHA1、SHA256、AES 加密。</li><li><strong>会话查询</strong> —— 提供方便灵活的会话查询接口。</li><li><strong>Http Basic认证</strong> —— 一行代码接入 Http Basic、Digest 认证。</li><li><strong>全局侦听器</strong> —— 在用户登陆、注销、被踢下线等关键性操作时进行一些AOP操作。</li><li><strong>全局过滤器</strong> —— 方便的处理跨域，全局设置安全响应头等操作。</li><li><strong>多账号体系认证</strong> —— 一个系统多套账号分开鉴权（比如商城的 User 表和 Admin 表）</li><li><strong>单点登录</strong> —— 内置三种单点登录模式：同域、跨域、同Redis、跨Redis、前后端分离等架构都可以搞定。</li><li><strong>单点注销</strong> —— 任意子系统内发起注销，即可全端下线。</li><li><strong>OAuth2.0认证</strong> —— 轻松搭建 OAuth2.0 服务，支持openid模式 。</li><li><strong>分布式会话</strong> —— 提供共享数据中心分布式会话方案。</li><li><strong>微服务网关鉴权</strong> —— 适配Gateway、ShenYu、Zuul等常见网关的路由拦截认证。</li><li><strong>RPC调用鉴权</strong> —— 网关转发鉴权，RPC调用鉴权，让服务调用不再裸奔</li><li><strong>临时Token认证</strong> —— 解决短时间的 Token 授权问题。</li><li><strong>独立Redis</strong> —— 将权限缓存与业务缓存分离。</li><li><strong>Quick快速登录认证</strong> —— 为项目零代码注入一个登录页面。</li><li><strong>标签方言</strong> —— 提供 Thymeleaf 标签方言集成包，提供 beetl 集成示例。</li><li><strong>jwt集成</strong> —— 提供三种模式的 jwt 集成方案，提供 token 扩展参数能力。</li><li><strong>RPC调用状态传递</strong> —— 提供 dubbo、grpc 等集成包，在RPC调用时登录状态不丢失。</li><li><strong>参数签名</strong> —— 提供跨系统API调用签名校验模块，防参数篡改，防请求重放。</li><li><strong>自动续签</strong> —— 提供两种Token过期策略，灵活搭配使用，还可自动续签。</li><li><strong>开箱即用</strong> —— 提供SpringMVC、WebFlux、Solon 等常见框架集成包，开箱即用。</li><li><strong>最新技术栈</strong> —— 适配最新技术栈：支持 SpringBoot 3.x，jdk 17。</li></ul><p>功能结构图：</p><p><img src="https://s2.loli.net/2024/07/28/1Duqo9p4fe2VWCL.png" alt="image-20240728132015039.png"></p><h4 id="鉴权设计-RBAC模型"><a href="#鉴权设计-RBAC模型" class="headerlink" title="鉴权设计-RBAC模型"></a>鉴权设计-RBAC模型</h4><p><strong>RBAC 模型（role-based access control）</strong></p><p>非常成熟的安全的模型概念，基于角色帮助我们把授权和用户的访问控制来做结合。</p><p>User（用户）用户就是指我们的系统使用者。</p><p>PerMission（权限）用户我们对系统的操作，访问哪些东西，可以操作写入操作等等。实际的例子，比如新增题目。</p><p>Role（角色）我们去把一组的权限，去做集合，就得到了角色。</p><p>核心思想其实就是把角色和权限做关联，实现整体的一个灵活访问，提高我们的系统的安全性和管理型。基于这个模型，我们的开发速度还有粒度的粗细也都是十分好控制的。</p><p>优点：</p><p>灵活，安全，简化管理。</p><p><strong>三种RBAC模型：</strong></p><ol><li><p><strong>RBAC-0 模型</strong></p><p>用户和角色是一个多对多的关系，角色和权限也是一个多对多关系。</p></li><li><p><strong>RBAC-1 模型</strong></p><p>多了一个继承的概念。</p><p>比如一个业务部门，经理，主管，营业员。主管的权限肯定不能大于经理，营业员不能大于主管。</p><p>子角色的范围一定会小于父角色。</p></li><li><p><strong>RBAC-2 模型</strong></p><p>角色互斥，基数约束，先决条件等等。</p><ul><li>角色互斥：同一个用户，不能被分配到复制的角色，比如说，你是一个采购，那你就不能分配销售。</li><li>基数约束：一个角色分配的用户数量是有限的。比如有一个公司的架构师，最多只能有三个。</li><li>先决条件：你想获得架构师的角色，那你必然得先是一个资深工程师的角色。</li></ul></li></ol><p><strong>权限</strong>：</p><ul><li>他的含义其实是非常广泛的，可以是菜单，页面，字段，数据。<ul><li>菜单权限</li><li>页面权限</li><li>字段权限</li><li>数据权限</li><li>操作权限</li></ul></li></ul><p><strong>用户组：</strong></p><ul><li>平台的用户基数非常大，角色也非常的多，如果说我给每个用户都操作一下角色，就非常的麻烦。</li><li>抽象一层组的概念，把同类的用户，放在一起，直接拥有相同的权限。</li><li>非常有益于减少工作量，一些管理方面也非常合适。用户组抽象到实际中，其实就是部门啊，科室啊。</li></ul><h4 id="鉴权数据模型设计"><a href="#鉴权数据模型设计" class="headerlink" title="鉴权数据模型设计"></a>鉴权数据模型设计</h4><p><img src="https://s2.loli.net/2024/07/28/ERumTNky47Z1xAK.jpg" alt="4aaca7492044e3e4d3c9d55c9b05c39.jpg"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for auth_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `auth_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auth_permission`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name`           <span class="type">varchar</span>(<span class="number">64</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">    `parent_id`      <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">    `type`           tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限类型 0菜单 1操作&#x27;</span>,</span><br><span class="line">    `menu_url`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单路由&#x27;</span>,</span><br><span class="line">    `status`         tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态 0启用 1禁用&#x27;</span>,</span><br><span class="line">    `<span class="keyword">show</span>`           tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;展示状态 0展示 1隐藏&#x27;</span>,</span><br><span class="line">    `icon`           <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">    `permission_key` <span class="type">varchar</span>(<span class="number">64</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限唯一标识&#x27;</span>,</span><br><span class="line">    `created_by`     <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`   datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`      <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`     <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否被删除 0为删除 1已删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of auth_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `auth_permission`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;新增题目&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;ladiwd/www&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;http://1.png&#x27;</span>, <span class="string">&#x27;subject:add1&#x27;</span>, <span class="string">&#x27;oYA4HtwGJEsLio6pGrhx5Hzv9XD0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2024-02-28 03:20:38&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2023-11-12 16:17:12&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for auth_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `auth_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auth_role`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `role_name`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">    `role_key`     <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色唯一标识&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否被删除 0未删除 1已删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of auth_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `auth_role`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;admin_user&#x27;</span>, <span class="string">&#x27;oYA4HtwGJEsLio6pGrhx5Hzv9XD0&#x27;</span>, <span class="string">&#x27;2024-02-28 03:20:44&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2023-11-12 16:16:07&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `auth_role`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>, <span class="string">&#x27;normal_user&#x27;</span>, <span class="string">&#x27;oYA4HtwGJEsLio6pGrhx5Hzv9XD0&#x27;</span>, <span class="string">&#x27;2024-02-28 03:20:44&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2023-11-12 16:16:10&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for auth_role_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `auth_role_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auth_role_permission`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `role_id`       <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">    `permission_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限id&#x27;</span>,</span><br><span class="line">    `created_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`     <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`   datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`    <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;角色权限关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of auth_role_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for auth_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `auth_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auth_user`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `user_name`    <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称/账号&#x27;</span>,</span><br><span class="line">    `nick_name`    <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    `email`        <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    `phone`        <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    `password`     <span class="type">varchar</span>(<span class="number">64</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `sex`          tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    `avatar`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">    `status`       tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态 0启用 1禁用&#x27;</span>,</span><br><span class="line">    `introduce`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;个人介绍&#x27;</span>,</span><br><span class="line">    `ext_json`     <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;特殊字段&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否被删除 0未删除 1已删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of auth_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for auth_user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `auth_user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auth_user_role`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `user_id`      <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `role_id`      <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">    `created_by`   <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time` datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_by`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `is_deleted`   <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色表&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="鉴权架构设计"><a href="#鉴权架构设计" class="headerlink" title="鉴权架构设计"></a>鉴权架构设计</h4><p><strong>jc-club-auth</strong>：这个服务承载了我们所有的基础数据源。他<strong>不管鉴权，只管数据相关的持久化操作以及业务操作</strong>，提供出各种各样的权限相关的接口。</p><p><strong>nacos：</strong>将 auth 服务以及 subject 服务都注册到上面。内部进行调用，不对外暴露。通过 nacos 实现我们的服务发现。</p><p><strong>gateway（网关）</strong>：网关层会<strong>对外提供服务</strong>，<strong>内部实现路由，鉴权</strong>。整体我们采取 token 的方式来与前端进行交互。由网关来决定当前用户是否可以操作到后面的业务逻辑。</p><p><img src="https://s2.loli.net/2024/07/28/hWNqz4F7CsrRXdg.png" alt="image-20240728144400289.png"></p><p>鉴权、路由等处理都由网关来做。</p><h4 id="鉴权功能设计"><a href="#鉴权功能设计" class="headerlink" title="鉴权功能设计"></a>鉴权功能设计</h4><ol><li><p>用户基础模块 </p><ul><li>新增用户</li><li>修改用户</li><li>删除用户</li><li>用户启用</li><li>用户禁用</li><li>用户密码加密</li></ul></li><li><p>角色基础模块 </p><ul><li>新增角色</li><li>修改角色</li><li>删除角色</li><li>角色与用户的关联</li></ul></li><li><p>权限基础模块 </p><ul><li><p>新增权限</p></li><li><p>修改权限</p></li><li><p>删除权限</p></li><li><p>权限禁用与启用</p></li><li><p>权限的展示与隐藏</p></li><li><p>权限与角色关联</p></li></ul></li><li><p>登录注册模块 </p><ul><li>注册用户与验证</li></ul><ol><li><p>短信的方式，通过向手机号发送验证码，来实现用户的验证并登录（考虑的成本是短信的费用）</p></li><li><p>邮箱的注册登录。</p><p>用户注册的时候，留一个邮箱，我们往邮箱里通过邮箱服务器发送一个链接，用户点击之后，实现一个激活，激活成功之后就完成了注册。（0 成本，坏处这种发送的邮件很容易进垃圾箱）</p></li><li><p>个人公众号模式（个人开发者无公司的，比较适合使用，0 成本）</p><p>用户登录的时候，弹出我们的这个公众号的码。扫码后，用户输入我们提示的验证码。可以随机比如说 nadbuge，通过我们的公众号对接的回调。能拿到一定的信息，用户的 openId。进而记录用户的信息</p></li><li><p>企业的服务号（必须要有营业执照，自己玩的不上线的话，也可以用测试号）</p><p>好处就是不仅打通了各种回调，而且还能拿到用户的信息。</p></li></ol><ul><li>登录功能</li></ul><p>  传统的 pc 形式，都是登录之后，写入 cookie。前端再次请求的时候，带着 cookie 一个身份识别就可以完成认证。</p><p>  坏处是什么？小程序呀，app 呀，其实是没有 cookie 这个概念的。</p><p>  <a href="https://blog.csdn.net/qq_53895518/article/details/136869614">单点登录(SSO)详解——超详细-CSDN博客</a></p><p>  为了更好的扩展，我们就直接选择 <strong>token的模式</strong>。token 放入 header 来实现用户身份的识别与鉴权。</p><ul><li>踢人下线</li></ul><p>  发现风险用户，可以通过后台直接把用户踢掉，禁止其再访问，token 也可以直接置为失效的形式。</p><ul><li>集成 redis （保存token）</li></ul><p>  如果说我们选择了 token，然后不做 token 的保存，服务重启呀，分布式微服务啊，数据是无法共享并且会产生丢失问题，所以用 redis 来存储一些信息，实现共享。</p><ul><li><p>自定义我们的 token 风格和前缀 </p><p>比如正常的 token 可能是 uuid，我们可以选择其他形式。</p><p>然后就是 token 的前端的传递，也可以去定义前缀，固定前缀才生效。</p></li><li><p>记住我</p></li></ul><p>  当我们去勾选记住我的时候，下次登录就自动实现了。</p><p>  前后端分离，没有 token 的时候，必然会产生无法实现的问题，我们就选择在前端的 localstorage 来做。</p></li><li><p>网关统一鉴权 </p><p>校验权限，校验用户的角色等等的东西，就放在网关里面统一去做。</p><p>不放在网关，导致每个微服务，全要引入的鉴权的框架，不断的去写重复的代码。</p><p>数据的权限获取产生问题：</p><ol><li>网关直接对接数据库，实现查询。</li><li>redis 中获取数据，获取不到的时候还是要像第一种一样去数据库里查。</li><li>redis 中获取缓存，没有的话，从 auth 服务里面获取相关的信息。</li><li>直接从 redis 读取。</li></ol></li></ol><h4 id="auth模块配置"><a href="#auth模块配置" class="headerlink" title="auth模块配置"></a>auth模块配置</h4><p><code>jc-club-auth-application/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //用于 Spring Cloud 项目中，通过 Feign 客户端简化 HTTP 客户端的调用。</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //用于 Spring Cloud 项目中，提供客户端负载均衡功能。</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //自动生成 getter、setter、构造函数等。</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-auth-application-controller/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sa-token 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.37.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-auth-starter/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //nacos</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-auth-domain/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>jc-club-auth-infra/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbcStarter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- druid连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatisplus --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="登录-详情在用户模块"><a href="#登录-详情在用户模块" class="headerlink" title="登录(详情在用户模块)"></a>登录(详情在用户模块)</h4><p>注意openid就是username</p><p><strong>Sa-token</strong></p><p><a href="https://sa-token.cc/doc.html#/up/not-cookie">前后端分离 (sa-token.cc)</a></p><p>在auth模块中的<code>UserController.java</code>中实现</p><p><code>jc-club-auth: UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;doLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SaTokenInfo&gt; <span class="title function_">doLogin</span><span class="params">(<span class="meta">@RequestParam(&quot;validCode&quot;)</span> String validCode)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(!StringUtils.isBlank(validCode), <span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(authUserDomainService.doLogin(validCode));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;UserController.doLogin.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jc-club-auth:AuthUserDomainServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SaTokenInfo <span class="title function_">doLogin</span><span class="params">(String validCode)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, validCode);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> redisUtil.get(loginKey);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    authUserBO.setUserName(openId);</span><br><span class="line">    <span class="built_in">this</span>.register(authUserBO);</span><br><span class="line">    StpUtil.login(openId);</span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">    <span class="keyword">return</span> tokenInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="微服务注册到nacos"><a href="#微服务注册到nacos" class="headerlink" title="微服务注册到nacos"></a>微服务注册到nacos</h4><p>阿里云脚手架用于组件&#x2F;版本的选择兼容，非常方便: <a href="">start.aliyun.com</a></p><h5 id="oss服务-nacos"><a href="#oss服务-nacos" class="headerlink" title="oss服务-&gt;nacos"></a>oss服务-&gt;nacos</h5><p><img src="https://s2.loli.net/2024/07/29/zDoegrTpUiBQHu5.png" alt="image-20240729102012839.png"></p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //构建 Web 应用程序所需的 Spring MVC 和 Tomcat。</span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //不会包含默认的日志框架</span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> //用于与 Minio 对象存储服务进行交互的客户端库。</span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> //</span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //减少样板代码，自动生成 getter、setter 等。</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //用于集成 Nacos 配置中心，提供配置管理功能。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //替换默认的日志框架，使用 Log4j2 作为日志记录器。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //用于 Spring Cloud 应用的引导类，帮助应用启动时加载配置(bootstrap.yaml)。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //用于集成 Nacos 服务发现，提供服务注册与发现功能。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里要用到<code>bootstrap.yaml</code>去在nacos中注册:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jc-club-oss-dev</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span> <span class="string">//部署有nacos的云服务器的地址</span></span><br></pre></td></tr></table></figure><p>启动程序就注册上去了</p><h5 id="（gateway-nacos）Spring-Cloud-Gateway搭建及路由配置"><a href="#（gateway-nacos）Spring-Cloud-Gateway搭建及路由配置" class="headerlink" title="（gateway-&gt;nacos）Spring Cloud Gateway搭建及路由配置"></a>（gateway-&gt;nacos）Spring Cloud Gateway搭建及路由配置</h5><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jc-club-gateway-dev</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p><code>application.yaml</code>，用于路由转发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oss</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-oss-dev</span> <span class="string">//使用</span> <span class="string">lb://</span> <span class="string">前缀表示这是一个负载均衡器的调用。jc-club-oss-dev</span> <span class="string">是服务名，Spring</span> <span class="string">Cloud</span> <span class="string">Gateway</span> <span class="string">将通过服务发现找到对应的实例。</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oss/**</span> <span class="string">//路由匹配条件</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="string">//过滤器用于从请求路径中去除前缀。</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-auth-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">subject</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-subject-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/subject/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>运行及注册到nacos中，并且可以通过网关进行路由转发到对应的微服务上。</p><h5 id="鉴权-刷题-nacos"><a href="#鉴权-刷题-nacos" class="headerlink" title="鉴权+刷题-&gt;nacos"></a>鉴权+刷题-&gt;nacos</h5><p><strong>auth:</strong></p><p><code>starter/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jc-club-gateway-dev</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p><strong>subject：</strong></p><p><code>starter/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application-controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-application-mq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-infra<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jc-club-subject-dev</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><h4 id="Sa-Token集成Redis"><a href="#Sa-Token集成Redis" class="headerlink" title="Sa-Token集成Redis"></a>Sa-Token集成Redis</h4><p><a href="https://sa-token.cc/doc.html#/up/integ-redis">集成 Redis (sa-token.cc)</a></p><p><a href="https://sa-token.cc/doc.html#/up/integ-redis">redis.io&#x2F;docs&#x2F;management&#x2F;config</a></p><h4 id="gateway网关（sa-token）基于redis实现分布式会话鉴权"><a href="#gateway网关（sa-token）基于redis实现分布式会话鉴权" class="headerlink" title="gateway网关（sa-token）基于redis实现分布式会话鉴权"></a>gateway网关（sa-token）基于redis实现分布式会话鉴权</h4><p><strong>gateway 集成 redis 及 refactor 鉴权</strong></p><p><strong>pom文件写入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略了之前的部分，下面的是新增的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Sa-Token 权限认证（Reactor响应式集成）, 在线文档：https://sa-token.cc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-reactor-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.37.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sa-Token 整合 Redis （使用 jackson 序列化方式） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-redis-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.37.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>gateway的<code>applicaiton.yaml</code>,修改网关配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oss</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-oss-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oss/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-auth-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">subject</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-subject-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/subject/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">practice</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-practice-dev</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/practice/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">circle</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-circle</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/circle/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">interview</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://jc-club-interview</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/interview/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span></span><br><span class="line">    <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">jichi1234</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">2s</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token 名称（同时也是 cookie 名称）</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">satoken</span></span><br><span class="line">  <span class="comment"># token 有效期（单位：秒） 默认30天，-1 代表永久有效</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">random-32</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">token-prefix:</span> <span class="string">jichi</span></span><br></pre></td></tr></table></figure><p><code>jc-club-auth-starter/application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3011</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">qvQP7MBvSkbyGzLzlRaPp9swmOmkqdVkVgBNPQF7pMlImathGYopQcWR2CuZMZAkL1xrDHwut9Hbr2TZ4qmr2Q==</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://117.72.14.166:3306/jc-club?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">config.decrypt=true;config.decrypt.key=$&#123;publicKey&#125;;</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span></span><br><span class="line">    <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">jichi1234</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">2s</span></span><br><span class="line">    <span class="attr">lettuce:</span> <span class="comment">#lettuce连接池</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">publicKey:</span> <span class="string">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMJzo9TiSuOGAMR2Zma25lWdtR1oxq6RcZYnWE9vcYLNKxUOkBlvSfMrbS25KtlJi+hIzikfCoyTDB0VI5gB3Q8CAwEAAQ==</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log4j2-spring.xml</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token 名称（同时也是 cookie 名称）</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">satoken</span></span><br><span class="line">  <span class="comment"># token 有效期（单位：秒） 默认30天，-1 代表永久有效</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">random-32</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">token-prefix:</span> <span class="string">jichi</span></span><br></pre></td></tr></table></figure><p><strong>网关自定义权限接口扩展</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">StpInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authPermissionPrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.permission&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authRolePrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authPermissionPrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authRolePrefix);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>jc-club-gateway:SaTokenConfigure</code>，satoken配置。</p><p>这个配置类的主要作用是：</p><ul><li>拦截所有请求。</li><li>根据请求的路径，执行不同的权限校验逻辑，确保只有具有相应权限的用户才能访问特定的资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaTokenConfigure</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SaReactorFilter <span class="title function_">getSaReactorFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SaReactorFilter</span>()</span><br><span class="line">                <span class="comment">// 拦截地址</span></span><br><span class="line">                .addInclude(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 鉴权方法：每次访问进入</span></span><br><span class="line">                .setAuth(obj -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;-------- 前端访问path：&quot;</span> + SaHolder.getRequest().getRequestPath());</span><br><span class="line">                    <span class="comment">// 登录校验 -- 拦截所有路由，并排除/user/doLogin 用于开放登录</span></span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/auth/**&quot;</span>, <span class="string">&quot;/auth/user/doLogin&quot;</span>, r -&gt; StpUtil.checkRole(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/oss/**&quot;</span>, r -&gt; StpUtil.checkLogin());</span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/subject/subject/add&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;subject:add&quot;</span>));</span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/subject/**&quot;</span>, r -&gt; StpUtil.checkLogin());</span><br><span class="line">                &#125;)</span><br><span class="line">                ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网关全局异常处理（sa-token-mono）"><a href="#网关全局异常处理（sa-token-mono）" class="headerlink" title="网关全局异常处理（sa-token mono）"></a>网关全局异常处理（sa-token mono）</h4><p>Sa-token 提供的示例，适用于单体项目的全局异常捕获。我们选择了微服务架构，则就要变为通过网关来进行全局异常的处理，我们希望，权限发生异常的时候，可以统一做 401 的返回，前端进行跳转登录。</p><p><img src="https://s2.loli.net/2024/08/06/FqMnKyZGQum9sSr.png" alt="image-20240729142433511.png"></p><p><code>GatewayExceptionHandler.java</code></p><p>这个全局异常处理器的主要作用是：</p><ul><li>捕获并处理网关中的异常。</li><li>根据异常类型返回不同的状态码和消息。</li><li>将异常信息序列化为 JSON 格式，并设置正确的 <code>Content-Type</code> 发送回客户端。</li></ul><p><a href="https://blog.csdn.net/aofengdaxia/article/details/129265983?ops_request_misc=%7B%22request_id%22:%22172223483416800182161820%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172223483416800182161820&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129265983-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=ErrorWebExceptionHandler&spm=1018.2226.3001.4187">深入学习ErrorWebExceptionHandler-CSDN博客</a></p><p><a href="https://blog.csdn.net/crazymakercircle/article/details/124120506?ops_request_misc=%7B%22request_id%22:%22172223509816800186538079%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172223509816800186538079&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124120506-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mono&spm=1018.2226.3001.4187">Flux、Mono、Reactor 实战（史上最全）_reactor mono-CSDN博客</a></p><p>[响应式编程二Mono，Flux简单介绍_flux mono-CSDN博客](<a href="https://blog.csdn.net/lsdstone/article/details/134983206?ops_request_misc=&request_id=&biz_id=102&utm_term=mono">https://blog.csdn.net/lsdstone/article/details/134983206?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=mono</a> java响应式&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-2-134983206.142^v100^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">ErrorWebExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(); <span class="comment">//创建了一个ObjectMapper实例，用于将Java对象转换为JSON格式。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> &#123; <span class="comment">//处理异常的方法，返回一个Mono&lt;Void&gt;类型，表示异步操作的完成。</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> serverWebExchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> serverWebExchange.getResponse();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> SaTokenException) &#123;</span><br><span class="line">            code = <span class="number">401</span>;</span><br><span class="line">            message = <span class="string">&quot;用户无权限&quot;</span>;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            code = <span class="number">500</span>;</span><br><span class="line">            message = <span class="string">&quot;系统繁忙&quot;</span>;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.fail(code, message);</span><br><span class="line">        response.getHeaders().setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.fromSupplier(() -&gt; &#123;</span><br><span class="line">            <span class="comment">/*使用response.writeWith方法，结合Mono.fromSupplier来异步写入响应体。</span></span><br><span class="line"><span class="comment">在Mono.fromSupplier中：</span></span><br><span class="line"><span class="comment">使用objectMapper.writeValueAsBytes(result)将Result对象序列化为JSON格式的字节数组。</span></span><br><span class="line"><span class="comment">使用DataBufferFactory.wrap(bytes)将字节数组包装成数据缓冲区，以便写入响应体*/</span></span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bytes = objectMapper.writeValueAsBytes(result); <span class="comment">//json格式字节数组</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dataBufferFactory.wrap(bytes); <span class="comment">//包装成数据缓冲区</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ResultCodeEnum.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    FAIL(<span class="number">500</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String desc;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(<span class="type">int</span> code, String desc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultCodeEnum <span class="title function_">getByCode</span><span class="params">(<span class="type">int</span> codeVal)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ResultCodeEnum resultCodeEnum : ResultCodeEnum.values())&#123;</span><br><span class="line">            <span class="keyword">if</span>(resultCodeEnum.code == codeVal)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultCodeEnum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Result.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.SUCCESS.getDesc());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.SUCCESS.getDesc());</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.FAIL.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.FAIL.getDesc());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result <span class="title function_">fail</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(ResultCodeEnum.FAIL.getCode());</span><br><span class="line">        result.setMessage(ResultCodeEnum.FAIL.getDesc());</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">(Integer code,String message)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="gateway实现redis权限数据拉取-gateway"><a href="#gateway实现redis权限数据拉取-gateway" class="headerlink" title="gateway实现redis权限数据拉取(gateway)"></a>gateway实现redis权限数据拉取(gateway)</h4><p><strong>RedisTemplate-&gt;RedisConfig(重写序列化，@Bean创建RedisTemplate bean)-&gt;RedisUtil(封装对redis的操作，具体是用redistemplate来操作的)</strong></p><p>为什么重写redistemplate?</p><ul><li>这里不重新他的一个序列化会造成一个乱码的问题，重写了RedisTemplate:<ul><li>objectMapper-&gt;Jackson2jsonRedisSerializer-&gt;redisTemplate，注意@Bean注入</li></ul></li></ul><p>网关读取权限内容有三种形式。</p><p>1、网关层直接与数据库交互</p><p>2、网关层与 redis 进行交互</p><p>3、网关层与 redis 进行交互，redis 没有，则通过 feign 调用 auth 服务获取。</p><p>选择第二种形式，完全信任缓存，同时引出数据库与缓存数据一致性的方案。</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义获取权限改为从 redis:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.club.gateway.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dev33.satoken.stp.StpInterface;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.cloud.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.club.gateway.entity.AuthPermission;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.club.gateway.entity.AuthRole;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.club.gateway.redis.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">StpInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authPermissionPrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.permission&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authRolePrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authPermissionPrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authRolePrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getAuth</span><span class="params">(String loginId, String prefix)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authKey</span> <span class="operator">=</span> redisUtil.buildKey(prefix, loginId.toString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">authValue</span> <span class="operator">=</span> redisUtil.get(authKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(authValue)) &#123; <span class="comment">//若空返回空</span></span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; authList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (authRolePrefix.equals(prefix)) &#123;</span><br><span class="line">            List&lt;AuthRole&gt; roleList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(authValue, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthRole&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">            authList = roleList.stream().map(AuthRole::getRoleKey).collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (authPermissionPrefix.equals(prefix)) &#123;</span><br><span class="line">            List&lt;AuthPermission&gt; permissionList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(authValue, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthPermission&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">            authList = permissionList.stream().map(AuthPermission::getPermissionKey).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisTemplate 重写优化：原生 redis 的 template 的序列化器会产生乱码问题，重写改为 jackson。</p><p><a href="https://blog.csdn.net/qq_42623400/article/details/115791984?ops_request_misc=%7B%22request_id%22:%22172225253916800225574987%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=172225253916800225574987&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115791984-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=redistemplate%E5%92%8Cjackson&spm=1018.2226.3001.4187">Spring date-redis中RedisTemplate的Jackson序列化设置_redistemplate序列化时date带有类型信息-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.club.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">   <span class="comment">/*总结来说，通过在RedisConfig类中使用@Bean注解定义redisTemplate方法，Spring容器会在启动时创建并注册这个RedisTemplate Bean。之后，应用程序的其他部分可以通过@Autowired或@Resource注解来自动获取并使用这个Bean。*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title function_">jackson2JsonRedisSerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class); </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); <span class="comment">//设置 ObjectMapper 的访问级别，使其能够序列化所有字段，无论它们是否有 public 访问权限。</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,<span class="literal">false</span>);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(objectMapper); <span class="comment">//将配置好的 ObjectMapper 设置到 Jackson2JsonRedisSerializer 中。</span></span><br><span class="line">        <span class="keyword">return</span> jsonRedisSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisUtil 的封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.club.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisUtil工具类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate; <span class="comment">//通过DI拿到被RedisConfig改后的RedisTemplate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_KEY_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建缓存key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">buildKey</span><span class="params">(String... strObjs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(strObjs).collect(Collectors.joining(CACHE_KEY_SEPARATOR));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNx</span><span class="params">(String key, String value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">zAdd</span><span class="params">(String key, String value, Long score)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, value, Double.valueOf(String.valueOf(score)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">countZset</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">rangeZset</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">removeZset</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeZsetList</span><span class="params">(String key, Set&lt;String&gt; value)</span> &#123;</span><br><span class="line">        value.stream().forEach((val) -&gt; redisTemplate.opsForZSet().remove(key, val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">score</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">rangeByScore</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, Double.valueOf(String.valueOf(start)), Double.valueOf(String.valueOf(end)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">addScore</span><span class="params">(String key, Object obj, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, obj, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">rank</span><span class="params">(String key, Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rank(key, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户模块开发-auth-user"><a href="#用户模块开发-auth-user" class="headerlink" title="用户模块开发(auth_user)"></a>用户模块开发(auth_user)</h4><p>依然有从DTO-&gt;BO-&gt;entity的converter，此部分忽略掉描述</p><h5 id="controller包"><a href="#controller包" class="headerlink" title="controller包"></a>controller包</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthUserDomainService authUserDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.register.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            checkUserInfo(authUserDTO);</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authUserDomainService.register(authUserBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.register.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;注册用户失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            checkUserInfo(authUserDTO);</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authUserDomainService.update(authUserBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getUserInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;AuthUserDTO&gt; <span class="title function_">getUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.getUserInfo.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(authUserDTO.getUserName()), <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">userInfo</span> <span class="operator">=</span> authUserDomainService.getUserInfo(authUserBO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(AuthUserDTOConverter.INSTANCE.convertBOToDTO(userInfo));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量获取用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;listByIds&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;AuthUserDTO&gt;&gt; <span class="title function_">listUserInfoByIds</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; userNameList)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.listUserInfoByIds.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(userNameList));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!CollectionUtils.isEmpty(userNameList), <span class="string">&quot;id集合不能为空&quot;</span>);</span><br><span class="line">            List&lt;AuthUserBO&gt; userInfos = authUserDomainService.listUserInfoByIds(userNameList);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(AuthUserDTOConverter.INSTANCE.convertBOToDTO(userInfos));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.listUserInfoByIds.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;批量获取用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户退出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;logOut&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">logOut</span><span class="params">(<span class="meta">@RequestParam</span> String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;UserController.logOut.userName:&#123;&#125;&quot;</span>, userName);</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(userName), <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">            StpUtil.logout(userName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.logOut.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户登出失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authUserDomainService.update(authUserBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(!StringUtils.isBlank(authUserDTO.getUserName()), <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户启用/禁用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;changeStatus&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;UserController.changeStatus.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authUserDTO.getStatus(), <span class="string">&quot;用户状态不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authUserDomainService.update(authUserBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.changeStatus.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;启用/禁用用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;SaTokenInfo&gt; <span class="title function_">doLogin</span><span class="params">(<span class="meta">@RequestParam(&quot;validCode&quot;)</span> String validCode)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(validCode), <span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authUserDomainService.doLogin(validCode));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.doLogin.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询登录状态，浏览器访问： http://localhost:8081/user/isLogin</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;isLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">isLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前会话是否登录：&quot;</span> + StpUtil.isLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="domain包"><a href="#domain包" class="headerlink" title="domain包"></a>domain包</h5><p><code>AuthUserDomainServiceImpl.java（用户注册、更新、删除、登录和信息查询，redis）</code></p><ol><li>资源注入</li></ol><ul><li><code>@Resource</code>：用于自动注入Spring管理的Bean，如各种服务（<code>Service</code>）和<code>RedisUtil</code>。</li></ul><ol start="2"><li>成员变量</li></ol><ul><li>定义了用于构建Redis键的前缀、盐值（<code>salt</code>）、登录验证码前缀（<code>LOGIN_PREFIX</code>）。</li></ul><ol start="3"><li>注册方法</li></ol><ul><li><code>@Override</code>：覆盖接口中定义的方法。</li><li><code>@SneakyThrows</code>：使用Lombok注解来隐藏抛出的异常。</li><li><code>@Transactional</code>：声明事务支持，指定异常回滚。</li><li><code>public Boolean register(AuthUserBO authUserBO)</code>：注册用户的方法。</li></ul><ol start="4"><li>注册逻辑</li></ol><ul><li>检查用户是否存在。</li><li>密码加密存储。（md5+salt）</li><li>设置默认头像和昵称。</li><li>插入用户数据到数据库。</li><li>建立用户与角色的关联。</li><li>将角色和权限信息存储到Redis。</li></ul><ol start="5"><li>更新和删除方法</li></ol><ul><li><code>public Boolean update(AuthUserBO authUserBO)</code>：更新用户信息的方法。</li><li><code>public Boolean delete(AuthUserBO authUserBO)</code>：逻辑删除用户的方法，同时更新Redis中的缓存。</li></ul><ol start="6"><li>登录和获取用户信息方法</li></ol><ul><li><code>public SaTokenInfo doLogin(String validCode)</code>：处理用户登录的方法，使用<code>Sa-Token</code>进行认证。</li><li><code>public AuthUserBO getUserInfo(AuthUserBO authUserBO)</code>：根据用户名获取用户信息的方法。</li></ul><ol start="7"><li>批量获取用户信息方法</li></ol><ul><li><code>public List&lt;AuthUserBO&gt; listUserInfoByIds(List&lt;String&gt; userNameList)</code>：根据用户ID列表批量获取用户信息的方法。</li></ul><ol start="8"><li>事务和异常处理</li></ol><ul><li>注册、更新和删除方法使用<code>@Transactional</code>注解，确保操作的原子性。</li><li>使用<code>@SneakyThrows</code>来处理可能抛出的异常，避免显式声明异常。</li></ul><ol start="9"><li>日志记录</li></ol><ul><li><code>log</code>变量用于记录日志信息。</li></ul><ol start="10"><li>缓存操作</li></ol><ul><li>使用<code>RedisUtil</code>进行Redis的读写操作，如存储用户的角色和权限信息。</li></ul><ol start="11"><li>密码安全</li></ol><ul><li>使用<code>SaSecureUtil.md5BySalt</code>方法对用户密码进行MD5加盐加密。</li></ul><ol start="12"><li>默认资源</li></ol><ul><li>为新用户设置了默认的头像和昵称。</li></ul><ol start="13"><li>服务交互</li></ol><ul><li>通过调用<code>AuthUserService</code>、<code>AuthUserRoleService</code>等的方法，实现业务逻辑。</li></ul><p>这个<code>AuthUserDomainServiceImpl</code>类通过实现<code>AuthUserDomainService</code>接口，提供了用户注册、更新、删除、登录和信息查询等服务，同时与Redis缓存进行交互，以提高系统的响应速度和性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthUserDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthUserDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthUserService authUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthUserRoleService authUserRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthPermissionService authPermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRolePermissionService authRolePermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRoleService authRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> <span class="string">&quot;chicken&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authPermissionPrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.permission&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authRolePrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;loginCode&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">register</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">        <span class="comment">//校验用户是否存在</span></span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">existAuthUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">        existAuthUser.setUserName(authUserBO.getUserName());</span><br><span class="line">        List&lt;AuthUser&gt; existUser = authUserService.queryByCondition(existAuthUser);</span><br><span class="line">        <span class="keyword">if</span> (existUser.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> AuthUserBOConverter.INSTANCE.convertBOToEntity(authUserBO);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(authUser.getPassword())) &#123;</span><br><span class="line">            authUser.setPassword(SaSecureUtil.md5BySalt(authUser.getPassword(), salt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(authUser.getAvatar())) &#123;</span><br><span class="line">            authUser.setAvatar(<span class="string">&quot;http://117.72.10.84:9000/user/icon/微信图片_20231203153718(1).png&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(authUser.getNickName())) &#123;</span><br><span class="line">            authUser.setNickName(<span class="string">&quot;lzrj&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        authUser.setStatus(AuthUserStatusEnum.OPEN.getCode());</span><br><span class="line">        authUser.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authUserService.insert(authUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立一个初步的角色的关联</span></span><br><span class="line">        <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRole</span>();</span><br><span class="line">        authRole.setRoleKey(AuthConstant.NORMAL_USER);</span><br><span class="line">        <span class="type">AuthRole</span> <span class="variable">roleResult</span> <span class="operator">=</span> authRoleService.queryByCondition(authRole);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">roleId</span> <span class="operator">=</span> roleResult.getId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> authUser.getId();</span><br><span class="line">        <span class="type">AuthUserRole</span> <span class="variable">authUserRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserRole</span>();</span><br><span class="line">        authUserRole.setUserId(userId);</span><br><span class="line">        authUserRole.setRoleId(roleId);</span><br><span class="line">        authUserRole.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        authUserRoleService.insert(authUserRole);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">roleKey</span> <span class="operator">=</span> redisUtil.buildKey(authRolePrefix, authUser.getUserName());</span><br><span class="line">        List&lt;AuthRole&gt; roleList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        roleList.add(authRole);</span><br><span class="line">        redisUtil.set(roleKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(roleList));</span><br><span class="line"></span><br><span class="line">        <span class="type">AuthRolePermission</span> <span class="variable">authRolePermission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRolePermission</span>();</span><br><span class="line">        authRolePermission.setRoleId(roleId);</span><br><span class="line">        List&lt;AuthRolePermission&gt; rolePermissionList = authRolePermissionService.</span><br><span class="line">                queryByCondition(authRolePermission);</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; permissionIdList = rolePermissionList.stream()</span><br><span class="line">                .map(AuthRolePermission::getPermissionId).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//根据roleId查权限</span></span><br><span class="line">        List&lt;AuthPermission&gt; permissionList = authPermissionService.queryByRoleList(permissionIdList);</span><br><span class="line">        <span class="type">String</span> <span class="variable">permissionKey</span> <span class="operator">=</span> redisUtil.buildKey(authPermissionPrefix, authUser.getUserName());</span><br><span class="line">        redisUtil.set(permissionKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(permissionList));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> AuthUserBOConverter.INSTANCE.convertBOToEntity(authUserBO);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authUserService.updateByUserName(authUser);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">        authUser.setId(authUserBO.getId());</span><br><span class="line">        authUser.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authUserService.update(authUser);</span><br><span class="line">        <span class="comment">//有任何的更新，都要与缓存进行同步的修改</span></span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SaTokenInfo <span class="title function_">doLogin</span><span class="params">(String validCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, validCode);</span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> redisUtil.get(loginKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">        authUserBO.setUserName(openId);</span><br><span class="line">        <span class="built_in">this</span>.register(authUserBO);</span><br><span class="line">        StpUtil.login(openId);</span><br><span class="line">        <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">        <span class="keyword">return</span> tokenInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthUserBO <span class="title function_">getUserInfo</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">        authUser.setUserName(authUserBO.getUserName());</span><br><span class="line">        List&lt;AuthUser&gt; userList = authUserService.queryByCondition(authUser);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthUser</span> <span class="variable">user</span> <span class="operator">=</span> userList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> AuthUserBOConverter.INSTANCE.convertEntityToBO(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AuthUserBO&gt; <span class="title function_">listUserInfoByIds</span><span class="params">(List&lt;String&gt; userNameList)</span> &#123;</span><br><span class="line">        List&lt;AuthUser&gt; userList = authUserService.listUserInfoByIds(userNameList);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> AuthUserBOConverter.INSTANCE.convertEntityToBO(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="infra层"><a href="#infra层" class="headerlink" title="infra层"></a>infra层</h5><p><img src="https://s2.loli.net/2024/07/28/ERumTNky47Z1xAK.jpg" alt="4aaca7492044e3e4d3c9d55c9b05c39.jpg"></p><p>对这五张表的增删查改</p><h5 id="常见加密-密码加密"><a href="#常见加密-密码加密" class="headerlink" title="常见加密&amp;密码加密"></a>常见加密&amp;密码加密</h5><p><strong>前言</strong></p><p>数据库如果说存储明文的密码是非常的危险的，一旦被攻击啊，或者数据泄漏，用户的信息疯狂的暴露出去，黑客什么都能干，这是非常不行，所以我们要做加密，让黑客即使拿到了密码信息， 也不知道原始的密码，就登录不成功。</p><p><strong>加密的方式</strong></p><ol><li><p>摘要加密</p><p>md5，sha1，sha256</p><p>摘要主要就是哈希值，通过我们的散列的算法。摘要的概念主要是验证完整性和唯一性，不管我们的密码是多长啊，或者多复杂的啊，得到的值都是固定长度。</p><p>摘要加密有一定的风险。123456 用 md5 加密。他其实是固定的，大家也可以到一些网站有反解密。</p></li><li><p>对称加密</p><p>我们约定了一个密钥。这个密钥一定要好好保存，不能泄漏，一旦泄漏就可以进行想你想的解密了。</p><p>加密的过程：密码+密钥 生成</p><p>解密的过程：密文+密钥 反解</p><p>密钥一定一定要做好其中的保存。</p><p>常见的对称加密的算法：AES，DES，3DESC，SM4</p></li><li><p>非对称加密</p><p>一个公钥，一个私钥。</p><p>公钥去加密，私钥去解密。</p><p>私钥去加密，公钥去解密。</p><p>常见的算法：RSA，ECC，国密的 SM2</p><p>算法的时性能上，差一点，加密的数量没有对称加密快。</p></li></ol><p><strong>加盐？是做饭吗？</strong></p><p>摘要算法比如 md5，光加密 123456，结果都是一样的，如果是破解的库里正好有这个 md5 就很容易知道逆向是 123456。来一手加盐。盐是随机的字符串，他来与原密码进行一波二次加密。这样获取到的很难破解出来。如果不加盐，简单密码很容易撞库的。</p><p><code>AuthUserDomainServiceImpl.java</code>，satoken:md5+salt，这里的salt是一个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">register</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="comment">//校验用户是否存在</span></span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">existAuthUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    existAuthUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; existUser = authUserService.queryByCondition(existAuthUser);</span><br><span class="line">    <span class="keyword">if</span> (existUser.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> AuthUserBOConverter.INSTANCE.convertBOToEntity(authUserBO);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(authUser.getPassword())) &#123;</span><br><span class="line">        authUser.setPassword(SaSecureUtil.md5BySalt(authUser.getPassword(), salt)); <span class="comment">//satoken:md5+salt，这里的salt是一个字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(authUser.getAvatar())) &#123;</span><br><span class="line">        authUser.setAvatar(<span class="string">&quot;http://117.72.10.84:9000/user/icon/微信图片_20231203153718(1).png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="角色模块开发-auth-role"><a href="#角色模块开发-auth-role" class="headerlink" title="角色模块开发(auth_role)"></a>角色模块开发(auth_role)</h4><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><p><code>RolePermissionController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.auth.application.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.convert.AuthRolePermissionDTOConverter;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.dto.AuthRolePermissionDTO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.entity.AuthRolePermissionBO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.service.AuthRolePermissionDomainService;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.entity.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色权限controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/11/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rolePermission/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolePermissionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRolePermissionDomainService authRolePermissionDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色权限关联关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AuthRolePermissionDTO authRolePermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;RolePermissionController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authRolePermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!CollectionUtils.isEmpty(authRolePermissionDTO.getPermissionIdList()),<span class="string">&quot;权限关联不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(authRolePermissionDTO.getRoleId(),<span class="string">&quot;角色不能为空!&quot;</span>);</span><br><span class="line">            <span class="type">AuthRolePermissionBO</span> <span class="variable">rolePermissionBO</span> <span class="operator">=</span> AuthRolePermissionDTOConverter.INSTANCE.convertDTOToBO(authRolePermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authRolePermissionDomainService.add(rolePermissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增角色权限失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RoleController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.auth.application.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.convert.AuthRoleDTOConverter;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.dto.AuthRoleDTO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.entity.AuthRoleBO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.service.AuthRoleDomainService;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.entity.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/11/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRoleDomainService authRoleDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AuthRoleDTO authRoleDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;RoleController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authRoleDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(authRoleDTO.getRoleKey()), <span class="string">&quot;角色key不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(authRoleDTO.getRoleName()), <span class="string">&quot;角色名称不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthRoleBO</span> <span class="variable">authRoleBO</span> <span class="operator">=</span> AuthRoleDTOConverter.INSTANCE.convertDTOToBO(authRoleDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authRoleDomainService.add(authRoleBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;UserController.register.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增角色失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AuthRoleDTO authRoleDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;RoleController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authRoleDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authRoleDTO.getId(), <span class="string">&quot;角色id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthRoleBO</span> <span class="variable">authRoleBO</span> <span class="operator">=</span> AuthRoleDTOConverter.INSTANCE.convertDTOToBO(authRoleDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authRoleDomainService.update(authRoleBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;RoleController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新角色信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> AuthRoleDTO authRoleDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;RoleController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authRoleDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">AuthRoleBO</span> <span class="variable">authRoleBO</span> <span class="operator">=</span> AuthRoleDTOConverter.INSTANCE.convertDTOToBO(authRoleDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authRoleDomainService.delete(authRoleBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;RoleController.delete.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除角色信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PermissionController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.auth.application.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.convert.AuthPermissionDTOConverter;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.application.dto.AuthPermissionDTO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.entity.AuthPermissionBO;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.domain.service.AuthPermissionDomainService;</span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.auth.entity.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ChickenWing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/11/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/permission/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthPermissionDomainService authPermissionDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(authPermissionDTO.getName()), <span class="string">&quot;权限名称不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getParentId(), <span class="string">&quot;权限父id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.add(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增权限失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getId(), <span class="string">&quot;权限id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.update(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getId(), <span class="string">&quot;权限id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.delete(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.delete.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getPermission&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">getPermission</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;PermissionController.getPermission.userName:&#123;&#125;&quot;</span>,userName);</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(userName), <span class="string">&quot;用户id不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.getPermission(userName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.getPermission.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询用户权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h5><p><code>AuthPermissionDomainServiceImpl.java</code>(权限)</p><ol><li>业务方法实现</li></ol><ul><li><code>@Override</code>：覆盖接口中定义的方法。</li><li><code>public Boolean add(AuthPermissionBO authPermissionBO)</code>：添加权限的方法，将业务对象（BO）转换为实体对象（Entity），设置未删除标志，并插入数据库。</li><li><code>public Boolean update(AuthPermissionBO authPermissionBO)</code>：更新权限的方法，将BO转换为Entity，并更新数据库。</li><li><code>public Boolean delete(AuthPermissionBO authPermissionBO)</code>：逻辑删除权限的方法，更新删除标志。</li></ul><ol start="2"><li>权限获取方法</li></ol><ul><li><pre><code class="java">public List&lt;String&gt; getPermission(String userName)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：根据用户名获取权限列表的方法。</span><br><span class="line"></span><br><span class="line">  - 使用`RedisUtil`构建权限的Redis键。</span><br><span class="line">  - 从Redis中获取权限的JSON字符串。</span><br><span class="line">  - 如果Redis中没有数据，则返回空列表。</span><br><span class="line">  - 使用Gson反序列化JSON字符串为`AuthPermission`列表。</span><br><span class="line">  - 从权限列表中提取权限键（Permission Key）。</span><br><span class="line"></span><br><span class="line">3. 日志记录</span><br><span class="line"></span><br><span class="line">- `log`变量用于记录日志信息。</span><br><span class="line"></span><br><span class="line">4. 缓存操作</span><br><span class="line"></span><br><span class="line">- 使用`RedisUtil`进行Redis的读写操作，如获取用户权限信息。</span><br><span class="line"></span><br><span class="line">5. 数据转换</span><br><span class="line"></span><br><span class="line">- 使用`AuthPermissionBOConverter`将业务对象（BO）转换为数据库实体（Entity）。</span><br><span class="line"></span><br><span class="line">6. 逻辑删除</span><br><span class="line"></span><br><span class="line">- 设置`IsDeletedFlagEnum.UN_DELETED.getCode()`和`IsDeletedFlagEnum.DELETED.getCode()`来标记记录的删除状态。</span><br><span class="line"></span><br><span class="line">这个`AuthPermissionDomainServiceImpl`类通过实现`AuthPermissionDomainService`接口，提供了权限的增删改以及根据用户名获取权限列表的服务。它利用了Redis缓存来提高获取权限列表的性能，并采用了逻辑删除的方式来管理权限数据。通过这种方式，应用程序可以灵活地进行权限控制和验证。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class AuthPermissionDomainServiceImpl implements AuthPermissionDomainService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AuthPermissionService authPermissionService;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    private String authPermissionPrefix = &quot;auth.permission&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean add(AuthPermissionBO authPermissionBO) &#123;</span><br><span class="line">        AuthPermission authPermission = AuthPermissionBOConverter.INSTANCE.convertBOToEntity(authPermissionBO);</span><br><span class="line">        authPermission.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        Integer count = authPermissionService.insert(authPermission);</span><br><span class="line">        return count &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean update(AuthPermissionBO authPermissionBO) &#123;</span><br><span class="line">        AuthPermission authPermission = AuthPermissionBOConverter.INSTANCE.convertBOToEntity(authPermissionBO);</span><br><span class="line">        Integer count = authPermissionService.update(authPermission);</span><br><span class="line">        return count &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean delete(AuthPermissionBO authPermissionBO) &#123;</span><br><span class="line">        AuthPermission authPermission = new AuthPermission();</span><br><span class="line">        authPermission.setId(authPermissionBO.getId());</span><br><span class="line">        authPermission.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode());</span><br><span class="line">        Integer count = authPermissionService.update(authPermission);</span><br><span class="line">        return count &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; getPermission(String userName) &#123;</span><br><span class="line">        String permissionKey = redisUtil.buildKey(authPermissionPrefix, userName);</span><br><span class="line">        String permissionValue = redisUtil.get(permissionKey);</span><br><span class="line">        if (StringUtils.isBlank(permissionValue)) &#123;</span><br><span class="line">            return Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;AuthPermission&gt; permissionList = new Gson().fromJson(permissionValue,</span><br><span class="line">                new TypeToken&lt;List&lt;AuthPermission&gt;&gt;() &#123;</span><br><span class="line">                &#125;.getType());</span><br><span class="line">        List&lt;String&gt; authList = permissionList.stream().map(AuthPermission::getPermissionKey).collect(Collectors.toList());</span><br><span class="line">        return authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><code>AuthRoleDomainServiceImpl</code>（角色）</p><ol><li>业务方法实现@Override：覆盖接口中定义的方法。</li><li>添加角色方法public Boolean add(AuthRoleBO authRoleBO)：<ul><li>添加角色的方法。<ul><li>使用 AuthRoleBOConverter 将业务对象（BO）转换为实体对象（Entity）。</li><li>设置角色未删除标志。</li><li>调用 authRoleService 的 insert 方法将实体插入数据库。</li><li>返回操作影响的行数是否大于0。</li></ul></li></ul></li><li>更新角色方法public Boolean update(AuthRoleBO authRoleBO)：<ul><li>更新角色的方法。<ul><li>类似于添加方法，但调用 update 方法更新数据库中的实体。</li></ul></li></ul></li><li>删除角色方法public Boolean delete(AuthRoleBO authRoleBO)：<ul><li>逻辑删除角色的方法。<ul><li>创建一个新的 AuthRole 实体，设置ID和逻辑删除标志。</li><li>调用 authRoleService 的 update 方法更新数据库中的实体。8.</li></ul></li></ul></li><li>日志记录log <ul><li>变量用于记录日志信息。</li></ul></li><li>逻辑删除设置 <ul><li>IsDeletedFlagEnum.UN_DELETED.getCode() 和 IsDeletedFlagEnum.DELETED.getCode() 来标记记录的删除状态。</li></ul></li></ol><p>这个 AuthRoleDomainServiceImpl 类通过实现 AuthRoleDomainService 接口，提供了角色的增删改服务。它利用了逻辑删除的方式来管理角色数据，通过这种方式，应用程序可以灵活地进行角色管理和权限分配。注意，代码中没有显示具体的日志输出语句，但 @Slf4j 注解会在类中添加日志变量，可以在方法中使用 log 进行日志记录。此外，@SneakyThrows 注解未在此代码片段中使用，如果存在，它通常用于隐藏方法抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRoleDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthRoleDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRoleService authRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">add</span><span class="params">(AuthRoleBO authRoleBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> AuthRoleBOConverter.INSTANCE.convertBOToEntity(authRoleBO);</span><br><span class="line">        authRole.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authRoleService.insert(authRole);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(AuthRoleBO authRoleBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> AuthRoleBOConverter.INSTANCE.convertBOToEntity(authRoleBO);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authRoleService.update(authRole);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(AuthRoleBO authRoleBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRole</span>();</span><br><span class="line">        authRole.setId(authRoleBO.getId());</span><br><span class="line">        authRole.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authRoleService.update(authRole);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthRolePermissionDomainServiceImpl.java</code>(角色权限关联)</p><p>添加角色权限关联方法</p><ul><li><pre><code>public Boolean add(AuthRolePermissionBO authRolePermissionBO)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：添加角色与权限关联的方法。</span><br><span class="line"></span><br><span class="line">  - 首先创建一个`AuthRolePermission`列表，用于存储多个角色权限关联对象。</span><br><span class="line">  - 通过`authRolePermissionBO`获取角色ID。</span><br><span class="line">  - 遍历`authRolePermissionBO`中的权限ID列表。</span><br><span class="line">  - 对于每个权限ID，创建一个新的`AuthRolePermission`实体，设置角色ID、权限ID和未删除标志。</span><br><span class="line">  - 将创建的实体添加到列表中。</span><br><span class="line">  - 使用`authRolePermissionService`的`batchInsert`方法批量插入关联数据到数据库。</span><br><span class="line">  - 返回操作影响的行数是否大于0。</span><br><span class="line"></span><br><span class="line">这个`AuthRolePermissionDomainServiceImpl`类通过实现`AuthRolePermissionDomainService`接口，提供了添加角色与权限关联的服务。它允许一个角色与多个权限进行关联，通过批量插入的方式提高数据存储的效率。使用逻辑删除来管理角色权限关联数据，使得数据不会从数据库中真正删除，便于进行数据恢复或审计。注意，代码中没有提供删除或更新角色权限关联的实现，这可能是因为这些功能要么不需要实现，要么在其他部分的代码中实现。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class AuthRolePermissionDomainServiceImpl implements AuthRolePermissionDomainService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AuthRolePermissionService authRolePermissionService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Boolean add(AuthRolePermissionBO authRolePermissionBO) &#123;</span><br><span class="line">        List&lt;AuthRolePermission&gt; rolePermissionList = new LinkedList&lt;&gt;();</span><br><span class="line">        Long roleId = authRolePermissionBO.getRoleId();</span><br><span class="line">        authRolePermissionBO.getPermissionIdList().forEach(permissionId -&gt; &#123;</span><br><span class="line">            AuthRolePermission authRolePermission = new AuthRolePermission();</span><br><span class="line">            authRolePermission.setRoleId(roleId);</span><br><span class="line">            authRolePermission.setPermissionId(permissionId);</span><br><span class="line">            authRolePermission.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">            rolePermissionList.add(authRolePermission);</span><br><span class="line">        &#125;);</span><br><span class="line">        int count = authRolePermissionService.batchInsert(rolePermissionList);</span><br><span class="line">        return count &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h5 id="infra层-1"><a href="#infra层-1" class="headerlink" title="infra层"></a>infra层</h5><p><img src="https://s2.loli.net/2024/07/28/ERumTNky47Z1xAK.jpg" alt="4aaca7492044e3e4d3c9d55c9b05c39.jpg"></p><h4 id="用户角色关联-user-role-这里主要是infra层的东西"><a href="#用户角色关联-user-role-这里主要是infra层的东西" class="headerlink" title="用户角色关联(user_role,这里主要是infra层的东西)"></a>用户角色关联(user_role,这里主要是infra层的东西)</h4><h5 id="controller（UserController的注册模块）"><a href="#controller（UserController的注册模块）" class="headerlink" title="controller（UserController的注册模块）"></a>controller（UserController的注册模块）</h5><p>其实就是UserController，在进行register等相关操作时会进行与默认角色的关联</p><h5 id="domain-1"><a href="#domain-1" class="headerlink" title="domain"></a>domain</h5><p><code>AuthUserRoleDomainServiceImpl.java</code></p><ol><li><strong>用户存在性检查</strong>：首先检查要注册的用户是否已存在。如果存在，则返回<code>true</code>。</li><li><strong>用户BO转换</strong>：将<code>AuthUserBO</code>（业务对象）转换为<code>AuthUser</code>实体。</li><li><strong>密码加密</strong>：如果用户密码不为空，则使用MD5加盐的方式加密密码。</li><li><strong>默认头像和昵称</strong>：如果用户没有提供头像或昵称，则设置默认值。</li><li><strong>用户状态设置</strong>：设置用户状态为开启（<code>AuthUserStatusEnum.OPEN</code>）和未删除（<code>IsDeletedFlagEnum.UN_DELETED</code>）。</li><li><strong>用户插入数据库</strong>：将用户实体插入数据库，并检查插入操作是否成功。</li><li><strong>角色关联</strong>：为新用户分配一个默认角色（普通用户），并将角色与用户关联。</li><li><strong>Redis缓存角色信息</strong>：使用Redis缓存用户的角色信息，以便快速检索。</li><li><strong>权限查询与缓存</strong>：查询角色拥有的权限，并将权限信息缓存到Redis。</li><li><strong>事务管理</strong>：使用<code>@Transactional</code>注解确保方法在出现异常时可以回滚。（也可以用TransactionnalTemplate）</li><li><strong>异常处理</strong>：使用<code>@SneakyThrows</code>注解来重新抛出检查型异常。</li><li><strong>返回结果</strong>：如果用户插入成功，则返回<code>true</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//事务</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">register</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="comment">//校验用户是否存在</span></span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">existAuthUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    existAuthUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; existUser = authUserService.queryByCondition(existAuthUser);</span><br><span class="line">    <span class="keyword">if</span> (existUser.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> AuthUserBOConverter.INSTANCE.convertBOToEntity(authUserBO);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(authUser.getPassword())) &#123;</span><br><span class="line">        authUser.setPassword(SaSecureUtil.md5BySalt(authUser.getPassword(), salt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(authUser.getAvatar())) &#123;</span><br><span class="line">        authUser.setAvatar(<span class="string">&quot;http://117.72.10.84:9000/user/icon/微信图片_20231203153718(1).png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(authUser.getNickName())) &#123;</span><br><span class="line">        authUser.setNickName(<span class="string">&quot;lzrj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    authUser.setStatus(AuthUserStatusEnum.OPEN.getCode());</span><br><span class="line">    authUser.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authUserService.insert(authUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立一个初步的角色的关联</span></span><br><span class="line">    <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRole</span>();</span><br><span class="line">    authRole.setRoleKey(AuthConstant.NORMAL_USER);</span><br><span class="line">    <span class="type">AuthRole</span> <span class="variable">roleResult</span> <span class="operator">=</span> authRoleService.queryByCondition(authRole);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">roleId</span> <span class="operator">=</span> roleResult.getId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> authUser.getId();</span><br><span class="line">    <span class="type">AuthUserRole</span> <span class="variable">authUserRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserRole</span>();</span><br><span class="line">    authUserRole.setUserId(userId);</span><br><span class="line">    authUserRole.setRoleId(roleId);</span><br><span class="line">    authUserRole.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    authUserRoleService.insert(authUserRole);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">roleKey</span> <span class="operator">=</span> redisUtil.buildKey(authRolePrefix, authUser.getUserName());</span><br><span class="line">    List&lt;AuthRole&gt; roleList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    roleList.add(authRole);</span><br><span class="line">    redisUtil.set(roleKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(roleList));</span><br><span class="line"></span><br><span class="line">    <span class="type">AuthRolePermission</span> <span class="variable">authRolePermission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRolePermission</span>();</span><br><span class="line">    authRolePermission.setRoleId(roleId);</span><br><span class="line">    List&lt;AuthRolePermission&gt; rolePermissionList = authRolePermissionService.</span><br><span class="line">            queryByCondition(authRolePermission);</span><br><span class="line"></span><br><span class="line">    List&lt;Long&gt; permissionIdList = rolePermissionList.stream()</span><br><span class="line">            .map(AuthRolePermission::getPermissionId).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//根据roleId查权限</span></span><br><span class="line">    List&lt;AuthPermission&gt; permissionList = authPermissionService.queryByRoleList(permissionIdList);</span><br><span class="line">    <span class="type">String</span> <span class="variable">permissionKey</span> <span class="operator">=</span> redisUtil.buildKey(authPermissionPrefix, authUser.getUserName());</span><br><span class="line">    redisUtil.set(permissionKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(permissionList));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这里遇到@Transactional注解：<a href="https://blog.csdn.net/minghao0508/article/details/124374637?ops_request_misc=%7B%22request_id%22:%22172243354616800175766334%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172243354616800175766334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124374637-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=@Transactional&spm=1018.2226.3001.4187">Spring——事务注解@Transactional【建议收藏】-CSDN博客</a></p><p><code>@Transactional</code> 注解在 Java 应用程序中，尤其是在使用 Spring 框架时，是一个非常重要的特性。这个注解通常用于声明方法在执行时应该被视为一个事务的边界。以下是使用 <code>@Transactional</code> 注解的一些主要原因：</p><ol><li><strong>确保数据一致性</strong>：在涉及数据库操作的方法中，<code>@Transactional</code> 确保方法执行过程中的所有数据库操作要么全部成功，要么在遇到异常时全部撤销，以保持数据的一致性。</li><li><strong>简化代码</strong>：使用 <code>@Transactional</code> 注解可以避免在每个数据库操作后手动管理事务的开始和提交，简化了代码。</li><li><strong>声明式事务管理</strong>：Spring 支持声明式事务管理，<code>@Transactional</code> 注解就是这一概念的实现之一，它允许将事务管理逻辑从业务逻辑代码中分离出来。</li><li><strong>回滚策略</strong>：通过 <code>@Transactional</code> 注解，可以定义哪些异常会导致事务回滚。在您提供的代码中，<code>rollbackFor = Exception.class</code> 表示如果抛出任何类型的异常，事务都会回滚。</li><li><strong>支持嵌套事务</strong>：当一个事务方法调用另一个带有 <code>@Transactional</code> 注解的方法时，Spring 会处理这些方法之间的事务嵌套。</li><li><strong>提高性能</strong>：Spring 事务管理器可以针对不同的事务策略进行优化，比如懒加载事务、使用适当的隔离级别等，以提高应用程序性能。</li><li><strong>可伸缩性</strong>：随着应用程序的扩展，<code>@Transactional</code> 注解可以很容易地应用于新的方法或类，而不需要对现有代码进行大量修改。</li></ol><p>在您的代码示例中，<code>@Transactional</code> 注解应用于注册用户的方法上，这意味着从检查用户是否存在到用户信息写入数据库、角色和权限信息缓存到 Redis 的整个过程被视为一个单一的事务。如果在这个过程的任何地方发生异常，整个操作将回滚，以确保用户信息和相关的角色、权限设置要么完全应用，要么完全不应用，避免数据不一致的问题。</p><p><code>auth-domain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.auth.domain.constants;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * auth服务常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_USER</span> <span class="operator">=</span> <span class="string">&quot;normal_user&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="infra层-2"><a href="#infra层-2" class="headerlink" title="infra层"></a>infra层</h5><p><img src="https://s2.loli.net/2024/07/28/ERumTNky47Z1xAK.jpg" alt="4aaca7492044e3e4d3c9d55c9b05c39.jpg"></p><p>接下来回到gateway模块，在用户登录时做好与redis的交互就可以打通了。</p><h4 id="权限模块开发-auth-permission"><a href="#权限模块开发-auth-permission" class="headerlink" title="权限模块开发(auth_permission)"></a>权限模块开发(auth_permission)</h4><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><p><code>PermissionController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/permission/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthPermissionDomainService authPermissionDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(authPermissionDTO.getName()), <span class="string">&quot;权限名称不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getParentId(), <span class="string">&quot;权限父id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.add(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增权限失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.update.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getId(), <span class="string">&quot;权限id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.update(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> AuthPermissionDTO authPermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;PermissionController.delete.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authPermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkNotNull(authPermissionDTO.getId(), <span class="string">&quot;权限id不能为空&quot;</span>);</span><br><span class="line">            <span class="type">AuthPermissionBO</span> <span class="variable">permissionBO</span> <span class="operator">=</span> AuthPermissionDTOConverter.INSTANCE.convertDTOToBO(authPermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.delete(permissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.delete.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getPermission&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">getPermission</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;PermissionController.getPermission.userName:&#123;&#125;&quot;</span>,userName);</span><br><span class="line">            Preconditions.checkArgument(!StringUtils.isBlank(userName), <span class="string">&quot;用户id不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authPermissionDomainService.getPermission(userName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.getPermission.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询用户权限信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionDTO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthPermissionDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String menuUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer show;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String permissionKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionDTOConverter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthPermissionDTOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">AuthPermissionDTOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(AuthPermissionDTOConverter.class);</span><br><span class="line"></span><br><span class="line">    AuthPermissionBO <span class="title function_">convertDTOToBO</span><span class="params">(AuthPermissionDTO authPermissionDTO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="domain层"><a href="#domain层" class="headerlink" title="domain层"></a>domain层</h5><p><code>AuthPermissionBOConverter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthPermissionBOConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">AuthPermissionBOConverter</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(AuthPermissionBOConverter.class);</span><br><span class="line"></span><br><span class="line">    AuthPermission <span class="title function_">convertBOToEntity</span><span class="params">(AuthPermissionBO authPermissionBO)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionBO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthPermissionBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String menuUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer show;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String permissionKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthPermissionDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthPermissionDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthPermissionService authPermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authPermissionPrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.permission&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">add</span><span class="params">(AuthPermissionBO authPermissionBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthPermission</span> <span class="variable">authPermission</span> <span class="operator">=</span> AuthPermissionBOConverter.INSTANCE.convertBOToEntity(authPermissionBO);</span><br><span class="line">        authPermission.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authPermissionService.insert(authPermission);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(AuthPermissionBO authPermissionBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthPermission</span> <span class="variable">authPermission</span> <span class="operator">=</span> AuthPermissionBOConverter.INSTANCE.convertBOToEntity(authPermissionBO);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authPermissionService.update(authPermission);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(AuthPermissionBO authPermissionBO)</span> &#123;</span><br><span class="line">        <span class="type">AuthPermission</span> <span class="variable">authPermission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthPermission</span>();</span><br><span class="line">        authPermission.setId(authPermissionBO.getId());</span><br><span class="line">        authPermission.setIsDeleted(IsDeletedFlagEnum.DELETED.getCode());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authPermissionService.update(authPermission);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermission</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">permissionKey</span> <span class="operator">=</span> redisUtil.buildKey(authPermissionPrefix, userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">permissionValue</span> <span class="operator">=</span> redisUtil.get(permissionKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(permissionValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;AuthPermission&gt; permissionList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(permissionValue,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthPermission&gt;&gt;() &#123;</span><br><span class="line">                &#125;.getType());</span><br><span class="line">        List&lt;String&gt; authList = permissionList.stream().map(AuthPermission::getPermissionKey).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="infra层-3"><a href="#infra层-3" class="headerlink" title="infra层"></a>infra层</h5><p><code>AuthPermission.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthPermission</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">56518358607843924L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String menuUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer show;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String permissionKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getParentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParentId</span><span class="params">(Long parentId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMenuUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMenuUrl</span><span class="params">(String menuUrl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.menuUrl = menuUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> show;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setShow</span><span class="params">(Integer show)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.show = show;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIcon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> icon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIcon</span><span class="params">(String icon)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.icon = icon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPermissionKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> permissionKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPermissionKey</span><span class="params">(String permissionKey)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.permissionKey = permissionKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreatedBy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedBy</span><span class="params">(String createdBy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdBy = createdBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreatedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedTime</span><span class="params">(Date createdTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdTime = createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUpdateBy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateBy</span><span class="params">(String updateBy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateBy = updateBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateTime</span><span class="params">(Date updateTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getIsDeleted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDeleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsDeleted</span><span class="params">(Integer isDeleted)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDeleted = isDeleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionDao.xml</code></p><ul><li><code>type</code>, <code>show</code>：这些列名使用了反引号，因为 <code>type</code> 和 <code>show</code> 是 MySQL 的保留字。在 SQL 中，保留字是具有特定意义的关键字，如果用作列名或表名，需要用反引号括起来，以避免语法错误。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增所有列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    insert into auth_permission(name, parent_id, `type`, menu_url, status, `show`, icon, permission_key, created_by, created_time, update_by, update_time, is_deleted)</span><br><span class="line">    values (#&#123;name&#125;, #&#123;parentId&#125;, #&#123;type&#125;, #&#123;menuUrl&#125;, #&#123;status&#125;, #&#123;show&#125;, #&#123;icon&#125;, #&#123;permissionKey&#125;, #&#123;createdBy&#125;, #&#123;createdTime&#125;, #&#123;updateBy&#125;, #&#123;updateTime&#125;, #&#123;isDeleted&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>AuthPermissionServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;authPermissionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthPermissionServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthPermissionService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthPermissionDao authPermissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthPermission <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authPermissionDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authPermission 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(AuthPermission authPermission)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authPermissionDao.insert(authPermission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authPermission 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(AuthPermission authPermission)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authPermissionDao.update(authPermission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authPermissionDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AuthPermission&gt; <span class="title function_">queryByRoleList</span><span class="params">(List&lt;Long&gt; roleIdList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authPermissionDao.queryByRoleList(roleIdList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="角色权限关联开发（auth-role-permission）"><a href="#角色权限关联开发（auth-role-permission）" class="headerlink" title="角色权限关联开发（auth_role_permission）"></a>角色权限关联开发（auth_role_permission）</h4><h5 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h5><p><code>RolePermissionController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rolePermission/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolePermissionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRolePermissionDomainService authRolePermissionDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增角色权限关联关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AuthRolePermissionDTO authRolePermissionDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;RolePermissionController.add.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authRolePermissionDTO));</span><br><span class="line">            &#125;</span><br><span class="line">            Preconditions.checkArgument(!CollectionUtils.isEmpty(authRolePermissionDTO.getPermissionIdList()),<span class="string">&quot;权限关联不能为空&quot;</span>);</span><br><span class="line">            Preconditions.checkNotNull(authRolePermissionDTO.getRoleId(),<span class="string">&quot;角色不能为空!&quot;</span>);</span><br><span class="line">            <span class="type">AuthRolePermissionBO</span> <span class="variable">rolePermissionBO</span> <span class="operator">=</span> AuthRolePermissionDTOConverter.INSTANCE.convertDTOToBO(authRolePermissionDTO);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(authRolePermissionDomainService.add(rolePermissionBO));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PermissionController.add.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增角色权限失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthRolePermissionDTO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRolePermissionDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">459343371709166261L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long permissionId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; permissionIdList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="domain层-1"><a href="#domain层-1" class="headerlink" title="domain层"></a>domain层</h5><p><code>AuthRolePermissionDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRolePermissionDomainServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthRolePermissionDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRolePermissionService authRolePermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">add</span><span class="params">(AuthRolePermissionBO authRolePermissionBO)</span> &#123;</span><br><span class="line">        List&lt;AuthRolePermission&gt; rolePermissionList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">roleId</span> <span class="operator">=</span> authRolePermissionBO.getRoleId();</span><br><span class="line">        authRolePermissionBO.getPermissionIdList().forEach(permissionId -&gt; &#123;</span><br><span class="line">            <span class="type">AuthRolePermission</span> <span class="variable">authRolePermission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRolePermission</span>();</span><br><span class="line">            authRolePermission.setRoleId(roleId);</span><br><span class="line">            authRolePermission.setPermissionId(permissionId);</span><br><span class="line">            authRolePermission.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">            rolePermissionList.add(authRolePermission);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> authRolePermissionService.batchInsert(rolePermissionList);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthRolePermissionBO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRolePermissionBO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">459343371709166261L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long permissionId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; permissionIdList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="infra层-4"><a href="#infra层-4" class="headerlink" title="infra层"></a>infra层</h5><p><code>AuthRolePermissionServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;authRolePermissionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRolePermissionServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthRolePermissionService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthRolePermissionDao authRolePermissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthRolePermission <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authRolePermissionDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authRolePermission 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthRolePermission <span class="title function_">insert</span><span class="params">(AuthRolePermission authRolePermission)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authRolePermissionDao.insert(authRolePermission);</span><br><span class="line">        <span class="keyword">return</span> authRolePermission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">batchInsert</span><span class="params">(List&lt;AuthRolePermission&gt; authRolePermissionList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authRolePermissionDao.insertBatch(authRolePermissionList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authRolePermission 实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthRolePermission <span class="title function_">update</span><span class="params">(AuthRolePermission authRolePermission)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authRolePermissionDao.update(authRolePermission);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.queryById(authRolePermission.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authRolePermissionDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AuthRolePermission&gt; <span class="title function_">queryByCondition</span><span class="params">(AuthRolePermission authRolePermission)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authRolePermissionDao.queryAllByLimit(authRolePermission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthRolePermission.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthRolePermission</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">459343371709166261L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long permissionId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getRoleId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoleId</span><span class="params">(Long roleId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPermissionId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> permissionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPermissionId</span><span class="params">(Long permissionId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.permissionId = permissionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreatedBy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedBy</span><span class="params">(String createdBy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdBy = createdBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreatedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedTime</span><span class="params">(Date createdTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdTime = createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUpdateBy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateBy</span><span class="params">(String updateBy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateBy = updateBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateTime</span><span class="params">(Date updateTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getIsDeleted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDeleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsDeleted</span><span class="params">(Integer isDeleted)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDeleted = isDeleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存与数据一致性问题（延迟双删）"><a href="#缓存与数据一致性问题（延迟双删）" class="headerlink" title="缓存与数据一致性问题（延迟双删）"></a>缓存与数据一致性问题（延迟双删）</h4><p><img src="https://s2.loli.net/2024/08/02/vgMZ7Fy3fRPnJj6.jpg" alt="1699108963209-2ec4047e-03ee-4f39-99ed-9210e4efc363[1].jpeg"></p><p>根据以上的流程没有问题，但是当数据变更的时候，如何把缓存变到最新，使我们下面要讨论的问题。</p><ol><li><p>更新了数据库，再更新缓存</p><p>假设数据库更新成功，缓存更新失败，在缓存失效和过期的时候，读取到的都是老数据缓存。</p></li><li><p>更新缓存，更新数据库</p><p>缓存更新成功了，数据库更新失败，是不是读取的缓存的都是错误的。</p></li></ol><p>以上两种，全都不推荐。</p><ol start="3"><li><p>先删除缓存，再更新数据库</p><p>有一定的使用量。即使数据库更新失败。缓存也可以会刷。</p><p>存在的问题是什么？</p><p>高并发情况下！！</p><p>比如说有两个线程，一个是 A 线程，一个是 B 线程。</p><p>A 线程把数据删了，正在更新数据库，这个时候 B 线程来了，发现缓存没了，又查数据，又放入缓存。缓存里面存的就一直是老数据了。</p></li></ol><p><strong>延迟双删：</strong>:star:</p><ul><li>**延时是确保 **修改数据库 -&gt; 清空缓存前，其他事务的更改缓存操作已经执行完。<a href="https://blog.csdn.net/qq_35890572/article/details/108538712?ops_request_misc=%7B%22request_id%22:%22172258242116800222864858%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172258242116800222864858&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108538712-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BC%93%E5%AD%98%E5%8F%8C%E5%88%A0&spm=1018.2226.3001.4187&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=&ydreferer=aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/c3BtPTEwMDAuMjExNS4zMDAxLjQ0OTgmcT0lRTclQkMlOTMlRTUlQUQlOTglRTUlOEYlOEMlRTUlODglQTAmdD0mdT0=">redis缓存为什么要延时双删-CSDN博客</a></li></ul><p><strong>扩展思路</strong></p><ol><li><p>消息队列补偿</p><p>删除失败的缓存，作为消息打入 mq，mq 消费者进行监听，再次进行重试刷缓存。</p></li><li><p>canal</p><p>监听数据库的变化，做一个公共服务，专门来对接缓存刷新。优点业务解耦，业务太多冗余代码复杂度。</p></li></ol><h4 id="网关与auth微服务缓存打通"><a href="#网关与auth微服务缓存打通" class="headerlink" title="网关与auth微服务缓存打通"></a>网关与auth微服务缓存打通</h4><p>主要跟注册有关</p><p><code>AuthUserDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">register</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="comment">//校验用户是否存在</span></span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">existAuthUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    existAuthUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; existUser = authUserService.queryByCondition(existAuthUser);</span><br><span class="line">    <span class="keyword">if</span> (existUser.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> AuthUserBOConverter.INSTANCE.convertBOToEntity(authUserBO);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(authUser.getPassword())) &#123;</span><br><span class="line">        authUser.setPassword(SaSecureUtil.md5BySalt(authUser.getPassword(), salt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(authUser.getAvatar())) &#123;</span><br><span class="line">        authUser.setAvatar(<span class="string">&quot;http://117.72.10.84:9000/user/icon/微信图片_20231203153718(1).png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(authUser.getNickName())) &#123;</span><br><span class="line">        authUser.setNickName(<span class="string">&quot;别名&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    authUser.setStatus(AuthUserStatusEnum.OPEN.getCode());</span><br><span class="line">    authUser.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> authUserService.insert(authUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立一个初步的角色的关联</span></span><br><span class="line">    <span class="type">AuthRole</span> <span class="variable">authRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRole</span>();</span><br><span class="line">    authRole.setRoleKey(AuthConstant.NORMAL_USER); <span class="comment">//普通角色</span></span><br><span class="line">    <span class="type">AuthRole</span> <span class="variable">roleResult</span> <span class="operator">=</span> authRoleService.queryByCondition(authRole); <span class="comment">//查到对应的角色返回结果，这里主要是拿角色的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">roleId</span> <span class="operator">=</span> roleResult.getId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> authUser.getId();</span><br><span class="line">    <span class="type">AuthUserRole</span> <span class="variable">authUserRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserRole</span>();</span><br><span class="line">    authUserRole.setUserId(userId); <span class="comment">//用户角色 设置 userId</span></span><br><span class="line">    authUserRole.setRoleId(roleId); <span class="comment">//用户角色 设置 roleId</span></span><br><span class="line">    authUserRole.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    authUserRoleService.insert(authUserRole);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">roleKey</span> <span class="operator">=</span> redisUtil.buildKey(authRolePrefix, authUser.getUserName()); <span class="comment">//key:角色前缀+用户名</span></span><br><span class="line">    List&lt;AuthRole&gt; roleList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    roleList.add(authRole);</span><br><span class="line">    redisUtil.set(roleKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(roleList)); <span class="comment">//key:角色前缀+用户名 value:列表形式的role，在这里只有普通用户</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AuthRolePermission</span> <span class="variable">authRolePermission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthRolePermission</span>();</span><br><span class="line">    authRolePermission.setRoleId(roleId); <span class="comment">//给角色权限设置roleId</span></span><br><span class="line">    List&lt;AuthRolePermission&gt; rolePermissionList = authRolePermissionService.</span><br><span class="line">            queryByCondition(authRolePermission); <span class="comment">//查询到权限list</span></span><br><span class="line"></span><br><span class="line">    List&lt;Long&gt; permissionIdList = rolePermissionList.stream()  <span class="comment">//拿到角色list对应的权限id list</span></span><br><span class="line">            .map(AuthRolePermission::getPermissionId).collect(Collectors.toList());</span><br><span class="line">    List&lt;AuthPermission&gt; permissionList = authPermissionService.queryByRoleList(permissionIdList);<span class="comment">//根据权限id list查询权限本身list</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">permissionKey</span> <span class="operator">=</span> redisUtil.buildKey(authPermissionPrefix, authUser.getUserName());<span class="comment">//key:权限前缀+用户名</span></span><br><span class="line">    redisUtil.set(permissionKey, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(permissionList));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;AuthPermission&gt; <span class="title function_">queryByRoleList</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span> List&lt;Long&gt; roleIdList)</span>;</span><br></pre></td></tr></table></figure><p><code>AuthPermissionDao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByRoleList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AuthPermissionMap&quot;</span>&gt;</span></span><br><span class="line">    select * from auth_permission</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[mybatis中resultMap的理解_result map-CSDN博客](<a href="https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request_id%22:%22172259150816800178584486%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172259150816800178584486&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=mybatic">https://blog.csdn.net/u012843873/article/details/80198185?ops_request_misc=%7B%22request%5Fid%22%3A%22172259150816800178584486%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172259150816800178584486&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80198185-null-null.142^v100^pc_search_result_base8&amp;utm_term=mybatic</a> resultmap&amp;spm&#x3D;1018.2226.3001.4187)</p><p>回到网关层</p><p><code>StpInterfaceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">StpInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authPermissionPrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.permission&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">authRolePrefix</span> <span class="operator">=</span> <span class="string">&quot;auth.role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authPermissionPrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleList</span><span class="params">(Object loginId, String loginType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAuth(loginId.toString(), authRolePrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getAuth</span><span class="params">(String loginId, String prefix)</span> &#123; <span class="comment">//根据register过程中创建的Redis key进行查询，包含角色和权限两种</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authKey</span> <span class="operator">=</span> redisUtil.buildKey(prefix, loginId.toString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">authValue</span> <span class="operator">=</span> redisUtil.get(authKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(authValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; authList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (authRolePrefix.equals(prefix)) &#123; <span class="comment">//角色List</span></span><br><span class="line">            List&lt;AuthRole&gt; roleList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(authValue, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthRole&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">            authList = roleList.stream().map(AuthRole::getRoleKey).collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (authPermissionPrefix.equals(prefix)) &#123; <span class="comment">//权限List </span></span><br><span class="line">            List&lt;AuthPermission&gt; permissionList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(authValue, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthPermission&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">            authList = permissionList.stream().map(AuthPermission::getPermissionKey).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在登录后就会拿到token，在redis中存放有k v，保存有登录状态。在网关层会有拦截器根据路由进行对应的拦截，验证是否登录&#x2F;有权限。</p><p>拿到token之后，就可以通过isLogin去验证是否登录了（在请求header中带有isLogin）</p><p><a href="https://sa-token.cc/doc.html#/use/jur-auth">权限认证 (sa-token.cc)</a></p><h4 id="登录开发（微信公众号，测试号）"><a href="#登录开发（微信公众号，测试号）" class="headerlink" title="登录开发（微信公众号，测试号）"></a>登录开发（微信公众号，测试号）</h4><p>全流程：扫码微信-&gt;微信发送消息到服务器，校验签名确保来自微信（get）-&gt;服务器再把消息进行包装， 通过前缀+验证码（一个随机数）作为redis key，fromUserName(openId)作为value存到redis，并把包含验证码的消息发送到微信-&gt;用户验证码（微信）,从redis拿到openId（即用户名）-&gt;用satoken用openId进行登录，然后利用satoken返回一个token，后续登录就会带上这个token</p><p>这里用的是测试号，并不会生成真正的验证码到手机上，只是为了开发接口。</p><p>登录注册模块 </p><ul><li><p>注册用户与验证 </p><ol><li><p>短信的方式，通过向手机号发送验证码，来实现用户的验证并登录（考虑的成本是短信的费用）</p></li><li><p>邮箱的注册登录。</p><p>用户注册的时候，留一个邮箱，我们往邮箱里通过邮箱服务器发送一个链接，用户点击之后，实现一个激活，激活成功之后就完成了注册。（0 成本，坏处这种发送的邮件很容易进垃圾箱）</p></li><li><p>个人公众号模式（个人开发者无公司的，比较适合使用，0 成本）</p><p>用户登录的时候，弹出我们的这个公众号的码。扫码后，用户输入我们提示的验证码。可以随机比如说 nadbuge，通过我们的公众号对接的回调。能拿到一定的信息，用户的 openId。进而记录用户的信息</p></li><li><p>企业的服务号（必须要有营业执照，自己玩的不上线的话，也可以用测试号）</p><p>好处就是不仅打通了各种回调，而且还能拿到用户的信息。</p></li></ol></li><li><p>登录功能 </p><p>传统的 pc 形式，都是登录之后，写入 cookie。前端再次请求的时候，带着 cookie 一个身份识别就可以完成认证。</p><p>坏处是什么？小程序呀，app 呀，其实是没有 cookie 这个概念的。</p><p><a href="https://blog.csdn.net/qq_53895518/article/details/136869614">单点登录(SSO)详解——超详细-CSDN博客</a></p><p>为了更好的扩展，我们就直接选择 <strong>token的模式</strong>。token 放入 header 来实现用户身份的识别与鉴权。</p></li><li><p>踢人下线 </p><p>发现风险用户，可以通过后台直接把用户踢掉，禁止其再访问，token 也可以直接置为失效的形式。</p></li><li><p>集成 redis （保存token）</p><p>如果说我们选择了 token，然后不做 token 的保存，服务重启呀，分布式微服务啊，数据是无法共享并且会产生丢失问题，所以用 redis 来存储一些信息，实现共享。</p></li><li><p>自定义我们的 token 风格和前缀 </p><p>比如正常的 token 可能是 uuid，我们可以选择其他形式。</p><p>然后就是 token 的前端的传递，也可以去定义前缀，固定前缀才生效。</p></li><li><p>记住我 </p><p>当我们去勾选记住我的时候，下次登录就自动实现了。</p><p>前后端分离，没有 token 的时候，必然会产生无法实现的问题，我们就选择在前端的 localstorage 来做。</p></li></ul><h5 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h5><p>整体采取个人号的登录模式，选取某信号的 openId 作为用户的唯一标识！</p><p><img src="https://s2.loli.net/2024/08/03/31axL8tWMH9CJKG.png" alt="image-20240803115222050.png"></p><p>整体流程：</p><ol><li><p>用户扫公众号码。然后发一条消息：验证码。</p></li><li><p>通过 api 回复一个随机的验证码。存入 redis</p><ul><li>key: 前缀+验证码</li><li>value: fromUsername(也就是openId)</li></ul></li><li><p>用户在验证码框输入之后，点击登录，进入我们的注册模块，同时关联角色和权限。就实现了网关的统一鉴权。</p></li><li><p>用户就可以进行操作，用户可以根据个人的 openId 来维护个人信息。</p></li><li><p>用户登录成功之后，返回 token，前端的所有请求都带着 token 就可以访问了。</p></li></ol><h5 id="服务设计"><a href="#服务设计" class="headerlink" title="服务设计"></a>服务设计</h5><ol><li><p>开一个新的服务，叫我们的 jc-club-wechat。专门用于对接微信的 api 和微信的消息的回调。</p><ul><li>回调：关注公众号，发送验证码</li></ul></li><li><p>通过 nacos 注册中心来调用我们的 auth 服务，来实现用户的注册。</p></li><li><p>另一种扩展方案，wechat 和 auth 不直接交互。</p><ul><li>通过 mq 来做。wechat 接收回调后，反向发出 mq。自身的 auth 来订阅 mq 进行消费。</li></ul></li></ol><h5 id="公众号开发文档"><a href="#公众号开发文档" class="headerlink" title="公众号开发文档"></a>公众号开发文档</h5><p><strong>里面的例子只有python的没有java的</strong></p><p>测试号地址：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p><p>公众号开发文档：<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html</a></p><p>回调消息接入指南：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html</a></p><p>接收公众号消息体文档：<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html">https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html</a></p><p><img src="https://s2.loli.net/2024/08/03/MTJeu7qvbZUz6Gj.png" alt="image-20240803115835247.png"></p><h5 id="公众号验签开发"><a href="#公众号验签开发" class="headerlink" title="公众号验签开发"></a>公众号验签开发</h5><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html"></a></p><p>用户向公众号发送消息时，公众号方收到的消息发送者是一个OpenID，是使用用户微信号加密后的结果，每个用户对每个公众号有一个唯一的OpenID。</p><p><img src="https://s2.loli.net/2024/08/03/eoJgcICb9mVwtAU.png" alt="image-20240803120538428.png"></p><ol><li><p><strong>填写服务器配置：</strong></p><p>登录微信公众平台官网后，在公众平台官网的开发-基本设置页面，勾选协议成为开发者，点击“修改配置”按钮，填写服务器地址（URL）、Token和EncodingAESKey，其中URL是开发者用来接收微信消息和事件的接口URL。Token可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。</p><p>同时，开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。模式的选择与服务器配置在提交后都会立即生效，请开发者谨慎填写及选择。加解密方式的默认状态为明文模式，选择兼容模式和安全模式需要提前配置好相关加解密代码，<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Message_encryption_and_decryption_instructions.html">详情请参考消息体签名及加解密部分的文档</a> 。</p><p><img src="https://s2.loli.net/2024/08/03/gGtxFwBLzdaubWE.png" alt="image-20240803122144007.png"></p></li><li><p>验证消息的确来自微信服务器</p><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带参数如下表所示：</p><p><img src="https://s2.loli.net/2024/08/03/bQCGk9zgyfWIvw6.png" alt="image-20240803122337758.png"></p><p><code>CallBackController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;callback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callback</span><span class="params">(<span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;echostr&quot;)</span> String echostr)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;get验签请求参数：signature:&#123;&#125;，timestamp:&#123;&#125;，nonce:&#123;&#125;，echostr:&#123;&#125;&quot;</span>,</span><br><span class="line">            signature, timestamp, nonce, echostr);</span><br><span class="line">    <span class="type">String</span> <span class="variable">shaStr</span> <span class="operator">=</span> SHA1.getSHA1(token, timestamp, nonce, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (signature.equals(shaStr)) &#123;</span><br><span class="line">        <span class="keyword">return</span> echostr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里signature是微信根据传入的token、timestamp、nonce根据sha1计算生成的，是微信回调来的。</p></li></ol><h5 id="内网穿透（natapp）"><a href="#内网穿透（natapp）" class="headerlink" title="内网穿透（natapp）"></a>内网穿透（natapp）</h5><p>不同电脑下载地址：<a href="https://natapp.cn/#download">https://natapp.cn/#download</a></p><p>内网穿透使用指南：</p><p><a href="https://natapp.cn/article/natapp_newbie">https://natapp.cn/article/natapp_newbie</a></p><p>windows 启动方式：</p><p>进到目录下，运行exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start natapp -authtoken=xxxx</span><br></pre></td></tr></table></figure><p>配置内网穿透：</p><p><img src="https://s2.loli.net/2024/08/03/jQLXpdPHckq6bOv.png" alt="image-20240803122710792.png"></p><p>会生成一个公网的分配的地址，从本地地址-&gt;公网地址，实现穿透</p><h5 id="监听用户行为-自动回复消息-消息事件监听-策略模式实现解耦"><a href="#监听用户行为-自动回复消息-消息事件监听-策略模式实现解耦" class="headerlink" title="监听用户行为&amp;自动回复消息(消息事件监听+策略模式实现解耦)"></a>监听用户行为&amp;自动回复消息(消息事件监听+策略模式实现解耦)</h5><h6 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h6><p><strong>解释关键点</strong></p><ul><li>**<code>MessageUtil.parseXml</code>**：这是一个自定义方法，用于将 XML 格式的字符串解析成 <code>Map&lt;String, String&gt;</code>。</li><li>**<code>WxChatMsgHandler</code> 和 <code>wxChatMsgFactory</code>**：<code>WxChatMsgHandler</code> 是一个处理微信消息的接口或类，<code>wxChatMsgFactory</code> 是一个工厂类，用于根据消息类型获取对应的消息处理器。</li><li>**<code>msgTypeKey</code>**：这个字符串键值用于标识不同的消息类型，例如 “text”、”image”、”event.subscribe” 等。</li></ul><p><strong>主要逻辑流程</strong></p><ol><li>接收并记录微信发送的消息。</li><li>将 XML 格式的消息解析成 <code>Map</code>。</li><li>提取消息类型和事件类型。</li><li>构建消息类型键值，并根据键值从工厂中获取对应的消息处理器。<ul><li>subscribe消息</li><li>text消息</li></ul></li><li>使用消息处理器处理消息，返回处理结果。</li></ol><p><code>CallBackController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;adwidhaidwoaid&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> WxChatMsgFactory wxChatMsgFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;callback&quot;, produces = &quot;application/xml;charset=UTF-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callback</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestBody</span> String requestBody,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;msg_signature&quot;, required = false)</span> String msgSignature)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到微信消息：requestBody：&#123;&#125;&quot;</span>, requestBody);</span><br><span class="line">    Map&lt;String, String&gt; messageMap = MessageUtil.parseXml(requestBody);</span><br><span class="line">    <span class="type">String</span> <span class="variable">msgType</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;MsgType&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">event</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;Event&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : messageMap.get(<span class="string">&quot;Event&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;msgType:&#123;&#125;,event:&#123;&#125;&quot;</span>, msgType, event);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(msgType);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(event)) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        sb.append(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msgTypeKey</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">    <span class="type">WxChatMsgHandler</span> <span class="variable">wxChatMsgHandler</span> <span class="operator">=</span> wxChatMsgFactory.getHandlerByMsgType(msgTypeKey);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(wxChatMsgHandler)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">replyContent</span> <span class="operator">=</span> wxChatMsgHandler.dealMsg(messageMap);</span><br><span class="line">    log.info(<span class="string">&quot;replyContent:&#123;&#125;&quot;</span>, replyContent);</span><br><span class="line">    <span class="keyword">return</span> replyContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h6><p><code>MessageUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析微信发来的请求（String-&gt;XML）.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">parseXml</span><span class="params">(<span class="keyword">final</span> String msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 将解析结果存储在HashMap中</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从request中取得输入流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(msg.getBytes(StandardCharsets.UTF_8.name()))) &#123;</span><br><span class="line">            <span class="comment">// 读取输入流</span></span><br><span class="line">            <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>(); <span class="comment">//saxreader</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(inputStream);</span><br><span class="line">            <span class="comment">// 得到xml根元素</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">            <span class="comment">// 得到根元素的所有子节点</span></span><br><span class="line">            List&lt;Element&gt; elementList = root.elements();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有子节点</span></span><br><span class="line">            <span class="keyword">for</span> (Element e : elementList) &#123;</span><br><span class="line">                map.put(e.getName(), e.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h6><p><code>WxChatMsgHandler.java</code></p><p>有两个类继承它：</p><ul><li><p><code>SubscribeMsgHandler.java</code></p></li><li><p><code>ReceiveTextMsgHandler.java</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WxChatMsgHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    WxChatMsgTypeEnum <span class="title function_">getMsgType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">dealMsg</span><span class="params">(Map&lt;String, String&gt; messageMap)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.wx.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jingdianjichi.wx.redis.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveTextMsgHandler</span> <span class="keyword">implements</span> <span class="title class_">WxChatMsgHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_WORD</span> <span class="operator">=</span> <span class="string">&quot;验证码&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;loginCode&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WxChatMsgTypeEnum <span class="title function_">getMsgType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WxChatMsgTypeEnum.TEXT_MSG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealMsg</span><span class="params">(Map&lt;String, String&gt; messageMap)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到文本消息事件&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!KEY_WORD.equals(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUserName</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;FromUserName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">toUserName</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;ToUserName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">numKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, String.valueOf(num));</span><br><span class="line">        redisUtil.setNx(numKey, fromUserName, <span class="number">5L</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="type">String</span> <span class="variable">numContent</span> <span class="operator">=</span> <span class="string">&quot;您当前的验证码是：&quot;</span> + num + <span class="string">&quot;！ 5分钟内有效&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">replyContent</span> <span class="operator">=</span> <span class="string">&quot;&lt;xml&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;ToUserName&gt;&lt;![CDATA[&quot;</span> + fromUserName + <span class="string">&quot;]]&gt;&lt;/ToUserName&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;FromUserName&gt;&lt;![CDATA[&quot;</span> + toUserName + <span class="string">&quot;]]&gt;&lt;/FromUserName&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;Content&gt;&lt;![CDATA[&quot;</span> + numContent + <span class="string">&quot;]]&gt;&lt;/Content&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/xml&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jingdianjichi.wx.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubscribeMsgHandler</span> <span class="keyword">implements</span> <span class="title class_">WxChatMsgHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WxChatMsgTypeEnum <span class="title function_">getMsgType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WxChatMsgTypeEnum.SUBSCRIBE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dealMsg</span><span class="params">(Map&lt;String, String&gt; messageMap)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;触发用户关注事件！&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUserName</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;FromUserName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">toUserName</span> <span class="operator">=</span> messageMap.get(<span class="string">&quot;ToUserName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">subscribeContent</span> <span class="operator">=</span> <span class="string">&quot;感谢您的关注&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&lt;xml&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;ToUserName&gt;&lt;![CDATA[&quot;</span> + fromUserName + <span class="string">&quot;]]&gt;&lt;/ToUserName&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;FromUserName&gt;&lt;![CDATA[&quot;</span> + toUserName + <span class="string">&quot;]]&gt;&lt;/FromUserName&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;Content&gt;&lt;![CDATA[&quot;</span> + subscribeContent + <span class="string">&quot;]]&gt;&lt;/Content&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/xml&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h6><p>这里也用到了<code>RedisUtil.java</code>，和gateway模块的一致，所以后续思路可以把这部分提取出来当成common模块的。</p><p><code>ReceiveTextMsgHandler.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">numKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, String.valueOf(num));</span><br><span class="line">        redisUtil.setNx(numKey, fromUserName, <span class="number">5L</span>, TimeUnit.MINUTES); <span class="comment">//key为登录的前缀（字符串）+验证码（validCode）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">numContent</span> <span class="operator">=</span> <span class="string">&quot;您当前的验证码是：&quot;</span> + num + <span class="string">&quot;！ 5分钟内有效&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="公众号登录验证码逻辑"><a href="#公众号登录验证码逻辑" class="headerlink" title="公众号登录验证码逻辑"></a>公众号登录验证码逻辑</h5><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;doLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SaTokenInfo&gt; <span class="title function_">doLogin</span><span class="params">(<span class="meta">@RequestParam(&quot;validCode&quot;)</span> String validCode)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(!StringUtils.isBlank(validCode), <span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(authUserDomainService.doLogin(validCode));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;UserController.doLogin.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthUserDomainServiceImpl.java</code></p><p>通过前缀+验证码-&gt;从redis拿到openId（即用户名），用satoken用openId进行登录，然后利用satoken返回一个token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SaTokenInfo <span class="title function_">doLogin</span><span class="params">(String validCode)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, validCode);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> redisUtil.get(loginKey);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    authUserBO.setUserName(openId);</span><br><span class="line">    <span class="built_in">this</span>.register(authUserBO); <span class="comment">//校验是否存在，存在直接返回，不存在就注册</span></span><br><span class="line">    StpUtil.login(openId);</span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">    <span class="keyword">return</span> tokenInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="前后端部署"><a href="#前后端部署" class="headerlink" title="前后端部署"></a>前后端部署</h3><p>前端：</p><p>下好node.js，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure><p>下载好依赖。</p><p><img src="https://s2.loli.net/2024/08/03/FmTDQI2UK3zPi1k.png" alt="image-20240803195320973.png"></p><p>后端：</p><p>如果服务器没那么大空间，Jenkins跑起来有点困难，可以就配置好相关配置后install打好jar包，扔到服务器上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar ***.jar</span><br></pre></td></tr></table></figure><h3 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h3><p>1、分类和标签的性能优化，一次性查询出来，组装成树结构</p><p>2、去出题的按钮的权限交互。用户登录成功后，返回给前端，当前用户的相关权限。前端存到本地 localstorage 里面，进行按钮级别的前端交互。对于一些敏感的写操作，后端也应该提供一些权限接口</p><p>3、退出功能，token 失效的功能</p><p>4、个人信息页面的查询功能。</p><p>5、上传头像的功能。</p><p>6、每次注册的时候，相同的 openId 要做校验。</p><h4 id="1-避免重复注册"><a href="#1-避免重复注册" class="headerlink" title="1. 避免重复注册"></a>1. 避免重复注册</h4><p><code>AuthUserDomainServiceImpl.java</code></p><p>注意这里调了register的接口：登录—&gt;注册（如果已经注册了就返回，没有注册就注册）-&gt;返回satoken提供了的tokenInfo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SaTokenInfo <span class="title function_">doLogin</span><span class="params">(String validCode)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginKey</span> <span class="operator">=</span> redisUtil.buildKey(LOGIN_PREFIX, validCode);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> redisUtil.get(loginKey);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    authUserBO.setUserName(openId);</span><br><span class="line">    <span class="built_in">this</span>.register(authUserBO);</span><br><span class="line">    StpUtil.login(openId);</span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">    <span class="keyword">return</span> tokenInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthUserDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">register</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="comment">//校验用户是否存在</span></span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">existAuthUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    existAuthUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; existUser = authUserService.queryByCondition(existAuthUser);</span><br><span class="line">    <span class="keyword">if</span> (existUser.size() &gt; <span class="number">0</span>) &#123; <span class="comment">//这里如果已经注册过了，就直接返回了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-个人信息查询"><a href="#2-个人信息查询" class="headerlink" title="2.个人信息查询"></a>2.个人信息查询</h4><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AuthUserDTO&gt; <span class="title function_">getUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;UserController.getUserInfo.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(authUserDTO));</span><br><span class="line">        &#125;</span><br><span class="line">        Preconditions.checkArgument(!StringUtils.isBlank(authUserDTO.getUserName()), <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        <span class="type">AuthUserBO</span> <span class="variable">authUserBO</span> <span class="operator">=</span> AuthUserDTOConverter.INSTANCE.convertDTOToBO(authUserDTO);</span><br><span class="line">        <span class="type">AuthUserBO</span> <span class="variable">userInfo</span> <span class="operator">=</span> authUserDomainService.getUserInfo(authUserBO);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(AuthUserDTOConverter.INSTANCE.convertBOToDTO(userInfo));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;UserController.update.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;更新用户信息失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>authUserDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthUserBO <span class="title function_">getUserInfo</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    authUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; userList = authUserService.queryByCondition(authUser);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">user</span> <span class="operator">=</span> userList.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> AuthUserBOConverter.INSTANCE.convertEntityToBO(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>authUserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;AuthUser&gt; <span class="title function_">queryByCondition</span><span class="params">(AuthUser authUser)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.authUserDao.queryAllByLimit(authUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-用户退出"><a href="#3-用户退出" class="headerlink" title="3.用户退出"></a>3.用户退出</h4><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;logOut&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">logOut</span><span class="params">(<span class="meta">@RequestParam</span> String userName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;UserController.logOut.userName:&#123;&#125;&quot;</span>, userName);</span><br><span class="line">        Preconditions.checkArgument(!StringUtils.isBlank(userName), <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        StpUtil.logout(userName);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;UserController.logOut.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户登出失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-用户上传头像"><a href="#4-用户上传头像" class="headerlink" title="4. 用户上传头像"></a>4. 用户上传头像</h4><p><code>oss</code>模块下的<code>FileController.java</code></p><p><strong>接口定义</strong>：<code>/upload</code> 是一个 HTTP 请求映射，用于接收文件上传请求。</p><p><strong>参数</strong>：<code>MultipartFile uploadFile</code> 是上传的文件，<code>String bucket</code> 是桶的名称，<code>String objectName</code> 是对象名称（文件路径）。</p><p><strong>调用服务</strong>：调用 <code>fileService.uploadFile</code> 方法上传文件，并获取文件的 URL。</p><p><strong>返回结果</strong>：使用 <code>Result.ok(url)</code> 返回上传后的文件 URL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> fileService.uploadFile(uploadFile, bucket, objectName);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fileService.java</code></p><p><strong>调用适配器</strong>：调用 <code>storageAdapter.uploadFile</code> 方法，将文件上传到指定的桶和对象名称。</p><p><strong>更新对象名称</strong>：将 <code>objectName</code> 更新为 <code>objectName + &quot;/&quot; + uploadFile.getOriginalFilename()</code>，这一步是为了构建文件的完整路径。</p><p><strong>获取 URL</strong>：调用 <code>storageAdapter.getUrl</code> 方法，获取文件的访问 URL 并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span>&#123;</span><br><span class="line">    storageAdapter.uploadFile(uploadFile,bucket,objectName);</span><br><span class="line">    objectName = objectName + <span class="string">&quot;/&quot;</span> + uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="keyword">return</span> storageAdapter.getUrl(bucket, objectName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MinioStorageAdapter.java</code></p><p><strong>创建桶</strong>：调用 <code>minioUtil.createBucket(bucket)</code> 方法，确保桶存在。如果桶不存在则创建。</p><p><strong>上传文件</strong>：根据 <code>objectName</code> 是否为空，决定文件上传的路径。如果 <code>objectName</code> 不为空，则将文件上传到 <code>objectName + &quot;/&quot; + uploadFile.getOriginalFilename()</code>。如果为空，则上传到 <code>uploadFile.getOriginalFilename()</code>。</p><p><strong>获取 URL</strong>：构建并返回文件的 URL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile uploadFile, String bucket, String objectName)</span> &#123;</span><br><span class="line">    minioUtil.createBucket(bucket);</span><br><span class="line">    <span class="keyword">if</span> (objectName != <span class="literal">null</span>) &#123;</span><br><span class="line">        minioUtil.uploadFile(uploadFile.getInputStream(), bucket, objectName + <span class="string">&quot;/&quot;</span> + uploadFile.getOriginalFilename());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        minioUtil.uploadFile(uploadFile.getInputStream(), bucket, uploadFile.getOriginalFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> url + <span class="string">&quot;/&quot;</span> + bucket + <span class="string">&quot;/&quot;</span> + objectName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-分类题目数量更新"><a href="#5-分类题目数量更新" class="headerlink" title="5.分类题目数量更新"></a>5.分类题目数量更新</h4><p><code>SubjectCategoryController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/queryPrimaryCategory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;SubjectCategoryDTO&gt;&gt; <span class="title function_">queryPrimaryCategory</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">        List&lt;SubjectCategoryBO&gt; subjectCategoryBOList = subjectCategoryDomainService.queryCategory(subjectCategoryBO);</span><br><span class="line">        List&lt;SubjectCategoryDTO&gt; subjectCategoryDTOList = SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                convertBoToCategoryDTOList(subjectCategoryBOList);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(subjectCategoryDTOList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectCategoryDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">    <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> SubjectCategoryConverter.INSTANCE</span><br><span class="line">            .convertBoToCategory(subjectCategoryBO);</span><br><span class="line">    subjectCategory.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    List&lt;SubjectCategory&gt; subjectCategoryList = subjectCategoryService.queryCategory(subjectCategory);</span><br><span class="line">    List&lt;SubjectCategoryBO&gt; boList = SubjectCategoryConverter.INSTANCE</span><br><span class="line">            .convertBoToCategory(subjectCategoryList);</span><br><span class="line">    <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.boList:&#123;&#125;&quot;</span>,</span><br><span class="line">                JSON.toJSONString(boList));</span><br><span class="line">    &#125;</span><br><span class="line">    boList.forEach(bo -&gt; &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">subjectCount</span> <span class="operator">=</span> subjectCategoryService.querySubjectCount(bo.getId());</span><br><span class="line">        bo.setCount(subjectCount);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> boList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectCategoryServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SubjectCategory&gt; <span class="title function_">queryCategory</span><span class="params">(SubjectCategory subjectCategory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.queryCategory(subjectCategory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">querySubjectCount</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subjectCategoryDao.querySubjectCount(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>SubjectCategoryDao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySubjectCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    select count(distinct subject_id)</span><br><span class="line">    from subject_mapping a,</span><br><span class="line">         subject_label b</span><br><span class="line">    where a.label_id = b.id</span><br><span class="line">    and b.category_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-分类标签性能优化-star"><a href="#6-分类标签性能优化-star" class="headerlink" title="6. 分类标签性能优化:star:"></a>6. 分类标签性能优化:star:</h4><p><code>SubjectCategoryDomainServiceImpl.java</code>核心是使用<code>CompletableFuture</code>和Java流来并行处理任务：</p><ol><li>对每个<code>category</code>，启动一个异步任务来获取标签列表，并将任务结果以<code>CompletableFuture</code>的形式收集到列表中。</li><li>遍历<code>completableFutureList</code>，获取每个任务的结果，并将非空结果合并到<code>map</code>中。 <a href="https://blog.csdn.net/qq_45721579/article/details/131384231?ops_request_misc=&request_id=&biz_id=102&utm_term=CompletableFuture.supplyAsync&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-131384231.nonecase&spm=1018.2226.3001.4187">【Java 8 新特性】Java CompletableFuture supplyAsync()详解_completablefuture.supplyasync-CSDN博客</a></li><li>通过这种方式，可以并行处理多个任务，提高了程序的效率。</li></ol><p><code>SubjectCategoryController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询分类及标签一次性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/queryCategoryAndLabel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;SubjectCategoryDTO&gt;&gt; <span class="title function_">queryCategoryAndLabel</span><span class="params">(<span class="meta">@RequestBody</span> SubjectCategoryDTO subjectCategoryDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectCategoryController.queryCategoryAndLabel.dto:&#123;&#125;&quot;</span></span><br><span class="line">                    , JSON.toJSONString(subjectCategoryDTO));</span><br><span class="line">        &#125;</span><br><span class="line">        Preconditions.checkNotNull(subjectCategoryDTO.getId(), <span class="string">&quot;分类id不能为空&quot;</span>);</span><br><span class="line">        <span class="type">SubjectCategoryBO</span> <span class="variable">subjectCategoryBO</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.</span><br><span class="line">                convertDtoToCategoryBO(subjectCategoryDTO);</span><br><span class="line">        List&lt;SubjectCategoryBO&gt; subjectCategoryBOList = subjectCategoryDomainService.queryCategoryAndLabel(subjectCategoryBO); <span class="comment">//查种类和标签</span></span><br><span class="line">        List&lt;SubjectCategoryDTO&gt; dtoList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        subjectCategoryBOList.forEach(bo -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectCategoryDTO</span> <span class="variable">dto</span> <span class="operator">=</span> SubjectCategoryDTOConverter.INSTANCE.convertBoToCategoryDTO(bo);</span><br><span class="line">            List&lt;SubjectLabelDTO&gt; labelDTOList = SubjectLabelDTOConverter.INSTANCE.convertBOToLabelDTOList(bo.getLabelBOList());</span><br><span class="line">            dto.setLabelDTOList(labelDTOList);</span><br><span class="line">            dtoList.add(dto);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(dtoList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;SubjectCategoryController.queryPrimaryCategory.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义线程工厂：</strong></p><p><code>CustomNameThreadFactory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入所需的类和接口。</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomNameThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 用于生成线程池编号的静态原子类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">poolNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 线程所属的线程组。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="comment">// 用于生成线程编号的原子类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 线程名称的前缀。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，接受一个字符串参数来设置线程名称的前缀。</span></span><br><span class="line">    CustomNameThreadFactory(String name) &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="comment">// 如果存在安全管理器，则使用安全管理器的线程组，否则使用当前线程的线程组。</span></span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="comment">// 如果传入的名称为空或空白，则默认使用 &quot;pool&quot; 作为名称。</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">            name = <span class="string">&quot;pool&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造线程名称的前缀，包括线程池编号和 &quot;-thread-&quot;。</span></span><br><span class="line">        namePrefix = name + <span class="string">&quot;-&quot;</span> + poolNumber.getAndIncrement() + <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 ThreadFactory 接口的 newThread 方法，用于创建新的线程。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的线程，使用 group 作为线程组，r 作为要执行的任务。</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,</span><br><span class="line">                <span class="comment">// 线程名称由前缀、线程编号和递增后的编号组成。</span></span><br><span class="line">                namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 如果线程是守护线程，则将其设置为非守护线程。</span></span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())&#123;</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果线程的优先级不是普通优先级，则将其设置为普通优先级。</span></span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)&#123;</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回新创建的线程。</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectCategoryDomainServiceImpl.java</code></p><p><strong>创建并初始化<code>SubjectCategory</code>对象</strong>：</p><ul><li>设置<code>ParentId</code>为<code>categoryId</code>。</li><li>设置<code>IsDeleted</code>为未删除状态。</li></ul><p><strong>查询类别列表</strong>：</p><ul><li>调用<code>subjectCategoryService.queryCategory</code>方法查询类别列表。</li></ul><p><strong>日志记录</strong>：</p><ul><li>记录查询结果的日志。</li></ul><p><strong>转换类别列表</strong>：</p><ul><li>使用<code>SubjectCategoryConverter</code>将<code>SubjectCategory</code>列表转换为<code>SubjectCategoryBO</code>列表。</li></ul><p><strong>并行处理标签列表</strong>：</p><ul><li>为每个类别创建一个异步任务，调用<code>getLabelBOList</code>方法获取标签列表。</li><li>使用<code>CompletableFuture</code>并行处理这些任务。</li></ul><p><strong>收集并合并结果</strong>：</p><ul><li>等待所有异步任务完成，并将结果合并到一个<code>Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt;</code>中。</li></ul><p><strong>设置标签列表</strong>：</p><ul><li>为每个<code>SubjectCategoryBO</code>对象设置对应的标签列表。</li></ul><p><strong>返回结果</strong>：</p><ul><li>返回包含标签列表的<code>SubjectCategoryBO</code>列表。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolExecutor labelThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategoryAndLabel</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> subjectCategoryBO.getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="string">&quot;categoryAndLabel.&quot;</span> + subjectCategoryBO.getId();</span><br><span class="line">    List&lt;SubjectCategoryBO&gt; subjectCategoryBOS = cacheUtil.getResult(cacheKey,</span><br><span class="line">            SubjectCategoryBO.class, (key) -&gt; getSubjectCategoryBOS(id));</span><br><span class="line">    <span class="keyword">return</span> subjectCategoryBOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;SubjectCategoryBO&gt; <span class="title function_">getSubjectCategoryBOS</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">        <span class="type">SubjectCategory</span> <span class="variable">subjectCategory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectCategory</span>();</span><br><span class="line">        subjectCategory.setParentId(categoryId);</span><br><span class="line">        subjectCategory.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        List&lt;SubjectCategory&gt; subjectCategoryList = subjectCategoryService.queryCategory(subjectCategory);</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectCategoryController.queryCategoryAndLabel.subjectCategoryList:&#123;&#125;&quot;</span>,</span><br><span class="line">                    JSON.toJSONString(subjectCategoryList));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;SubjectCategoryBO&gt; categoryBOList = SubjectCategoryConverter.INSTANCE.convertBoToCategory(subjectCategoryList);</span><br><span class="line">        Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;CompletableFuture&lt;Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt;&gt;&gt; completableFutureList = categoryBOList.stream().map(category -&gt;</span><br><span class="line">                CompletableFuture.supplyAsync(() -&gt; getLabelBOList(category), labelThreadPool).collect(Collectors.toList()); <span class="comment">//对于每个category，调用异步的CompletableFuture.supplyAsync()执行getLabelBOList方法和ThreadPoolExecutor作为Executor去多线程+异步的获取labelBOList</span></span><br><span class="line">        completableFutureList.forEach(future -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt; resultMap = future.get();</span><br><span class="line">                <span class="keyword">if</span> (!MapUtils.isEmpty(resultMap)) &#123;</span><br><span class="line">                    map.putAll(resultMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        categoryBOList.forEach(categoryBO -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(map.get(categoryBO.getId()))) &#123;</span><br><span class="line">                categoryBO.setLabelBOList(map.get(categoryBO.getId()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> categoryBOList;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//通过Category查找对应的labelList</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt; <span class="title function_">getLabelBOList</span><span class="params">(SubjectCategoryBO category)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;getLabelBOList:&#123;&#125;&quot;</span>, JSON.toJSONString(category));</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Long, List&lt;SubjectLabelBO&gt;&gt; labelMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">        subjectMapping.setCategoryId(category.getId());</span><br><span class="line">        List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(mappingList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Long&gt; labelIdList = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">        List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIdList);</span><br><span class="line">        List&lt;SubjectLabelBO&gt; labelBOList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        labelList.forEach(label -&gt; &#123;</span><br><span class="line">            <span class="type">SubjectLabelBO</span> <span class="variable">subjectLabelBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectLabelBO</span>();</span><br><span class="line">            subjectLabelBO.setId(label.getId());</span><br><span class="line">            subjectLabelBO.setLabelName(label.getLabelName());</span><br><span class="line">            subjectLabelBO.setCategoryId(label.getCategoryId());</span><br><span class="line">            subjectLabelBO.setSortNum(label.getSortNum());</span><br><span class="line">            labelBOList.add(subjectLabelBO);</span><br><span class="line">        &#125;);</span><br><span class="line">        labelMap.put(category.getId(), labelBOList);</span><br><span class="line">        <span class="keyword">return</span> labelMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的核心是使用<code>CompletableFuture</code>和Java流来并行处理任务：</p><ol><li>对每个<code>category</code>，启动一个异步任务来获取标签列表，并将任务结果以<code>CompletableFuture</code>的形式收集到列表中。</li><li>遍历<code>completableFutureList</code>，获取每个任务的结果，并将非空结果合并到<code>map</code>中。 <a href="https://blog.csdn.net/qq_45721579/article/details/131384231?ops_request_misc=&request_id=&biz_id=102&utm_term=CompletableFuture.supplyAsync&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-131384231.nonecase&spm=1018.2226.3001.4187">【Java 8 新特性】Java CompletableFuture supplyAsync()详解_completablefuture.supplyasync-CSDN博客</a></li><li>通过这种方式，可以并行处理多个任务，提高了程序的效率。</li></ol><h4 id="7-用户权限获取"><a href="#7-用户权限获取" class="headerlink" title="7. 用户权限获取"></a>7. 用户权限获取</h4><p><code>AuthPermissionDomainServiceImpl.java</code></p><p>将存储在Redis中的权限数据转换为一个易于使用的权限键列表，以便在应用程序中进行权限检查。如果Redis中没有找到用户的权限数据，则返回一个空列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermission</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">permissionKey</span> <span class="operator">=</span> redisUtil.buildKey(authPermissionPrefix, userName);</span><br><span class="line">    <span class="type">String</span> <span class="variable">permissionValue</span> <span class="operator">=</span> redisUtil.get(permissionKey);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(permissionValue)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;AuthPermission&gt; permissionList = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(permissionValue,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;AuthPermission&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType()); <span class="comment">//使用Google的Gson库将权限字符串反序列化为AuthPermission对象的列表。TypeToken用于指定泛型类型。</span></span><br><span class="line">    List&lt;String&gt; authList = permissionList.stream().map(AuthPermission::getPermissionKey).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> authList; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-利用minio-mc突破图片7天权限"><a href="#8-利用minio-mc突破图片7天权限" class="headerlink" title="8. 利用minio&#x2F;mc突破图片7天权限"></a>8. 利用minio&#x2F;mc突破图片7天权限</h4><p><img src="https://s2.loli.net/2024/08/06/iTOqVzkRdl74BUm.jpg" alt="93d2be17b7b8562a08d456c5484f684.jpg"></p><p>有两个问题：</p><ol><li>minio上传头像只能保存7天</li><li>生成的url很长，需要简化</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/mc</span><br><span class="line"></span><br><span class="line">docker run -it --entrypoint=/bin/sh minio/mc</span><br><span class="line"></span><br><span class="line">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br><span class="line"></span><br><span class="line">mc config host add minio http://xxx.xx.xx.xxx:9000 GrVCPXySKgGoJiGgXmtv 0xlqSI9GXvnBOtp0GwUj5OshKNBk9JgwoexotbVV</span><br><span class="line"></span><br><span class="line">mc ls minio</span><br><span class="line"></span><br><span class="line">mc anonymous //可以设置什么</span><br><span class="line"></span><br><span class="line">mc anonymous set download minio/jichi</span><br></pre></td></tr></table></figure><p>url: bucket+name</p><p><code>FileController.java</code></p><p><img src="https://s2.loli.net/2024/08/06/QEXLm8GRkTVxA9D.png" alt="image-20240806154518945.png"></p><p><code>MinioStorageAdapter.java</code></p><p><img src="https://s2.loli.net/2024/08/06/XORypnF7lIDZNE1.png" alt="image-20240806154356089.png"></p><p><code>FileController.java</code></p><p><img src="https://s2.loli.net/2024/08/06/jVz5AyCNiQKt9EG.png" alt="image-20240806154533525.png"></p><p><code>MinioStorageAdapter.java</code></p><p><img src="https://s2.loli.net/2024/08/06/1F5kzqREVeBYw4m.png" alt="image-20240806154622450.png"></p><h3 id="功能规划"><a href="#功能规划" class="headerlink" title="功能规划"></a>功能规划</h3><h4 id="搜索功能（完成）"><a href="#搜索功能（完成）" class="headerlink" title="搜索功能（完成）"></a>搜索功能（完成）</h4><p>全文检索，技术选型 es。</p><p>安装 es。</p><p>xxl-job 定时任务，去做一个数据同步，全量数据导入</p><p>es 全文检索，做高亮</p><h4 id="点赞（完成）"><a href="#点赞（完成）" class="headerlink" title="点赞（完成）"></a>点赞（完成）</h4><p>自己点赞过的，这里肯定要有一个点赞过的 icon 的一个标识</p><p>后面的数量，意味着这道题目被多少个人点过赞。</p><p>如何去防刷点赞。疯狂的点赞，取消点赞。前端配合防抖，后端的点赞数量放到 redis 里面。数据库的持久化，可以通过定时任务来定时的刷新同步。</p><p><img src="https://s2.loli.net/2024/08/03/gHmp6AnyT9C8jsZ.png" alt="image-20240803193709660.png"></p><h4 id="我的点赞（完成）"><a href="#我的点赞（完成）" class="headerlink" title="我的点赞（完成）"></a>我的点赞（完成）</h4><p>展示，我们当前当过赞的所有的数据，来进行一波展示。</p><p><img src="https://s2.loli.net/2024/08/03/wI1p4UvNideb9cR.png" alt="image-20240803193658610.png"></p><h4 id="收藏（完成）"><a href="#收藏（完成）" class="headerlink" title="收藏（完成）"></a>收藏（完成）</h4><p><img src="https://s2.loli.net/2024/08/03/eUzZPhtopQYduEB.png" alt="image-20240803193734357.png"></p><h4 id="我的收藏（完成）"><a href="#我的收藏（完成）" class="headerlink" title="我的收藏（完成）"></a>我的收藏（完成）</h4><p><img src="https://s2.loli.net/2024/08/03/ChN7JM9nvoSWVbL.png" alt="image-20240803193755102.png"></p><h4 id="纠错（完成）"><a href="#纠错（完成）" class="headerlink" title="纠错（完成）"></a>纠错（完成）</h4><p>纠错当用户发现题目有问题，错误的话，就可以通过这个方式，来进行反馈。</p><p><img src="https://s2.loli.net/2024/08/03/BNAG4PQK8wgXjxV.png" alt="image-20240803193910438.png"></p><h4 id="快速刷题（完成）"><a href="#快速刷题（完成）" class="headerlink" title="快速刷题（完成）"></a>快速刷题（完成）</h4><p><img src="https://s2.loli.net/2024/08/03/CzO3mXaAthjT6cF.png" alt="image-20240803193936006.png"></p><p>在这个位置去加一个上一题，下一题。</p><h4 id="贡献榜（完成）"><a href="#贡献榜（完成）" class="headerlink" title="贡献榜（完成）"></a>贡献榜（完成）</h4><p>按照我的周维度，月维度，来做数据的存储。zset。和 redis 做大量的交互。</p><h4 id="feign-的微服务间调用（完成）"><a href="#feign-的微服务间调用（完成）" class="headerlink" title="feign 的微服务间调用（完成）"></a>feign 的微服务间调用（完成）</h4><p>会涉及到微服务之间的逻辑调用。这个就用 feign 了。</p><h4 id="打通用户上下文（完成）"><a href="#打通用户上下文（完成）" class="headerlink" title="打通用户上下文（完成）"></a>打通用户上下文（完成）</h4><p>配合 threadlocal，基于 token 来实现用户信息的上下文传递。</p><h4 id="二级缓存的使用（完成）"><a href="#二级缓存的使用（完成）" class="headerlink" title="二级缓存的使用（完成）"></a>二级缓存的使用（完成）</h4><p>点赞里面。</p><h3 id="用户上下文打通"><a href="#用户上下文打通" class="headerlink" title="用户上下文打通"></a>用户上下文打通</h3><p>链路流程：</p><p><img src="https://s2.loli.net/2024/08/12/jRBZS5OvlwY3xzC.png" alt="image-20240812140358717.png"></p><p>详细设计：</p><p><img src="https://s2.loli.net/2024/08/12/6veaby7irSgQWqo.png" alt="image-20240812140516313.png"></p><p><code>Loginfilter</code>(实现<code>Globalfilter接口</code>，通过filter拿到token，解析出<strong>loginId</strong>，然后传到后面的过滤链中)</p><p>-&gt;<code>LoginInterceptor</code>(实现<code>HandlerInterceptor</code>，检验<strong>loginId</strong>是否存在且非空，如果存在，将其保存到自定义的线程局部变量上下文<code>LoginContextHolder</code>中，通过<code>InheritableThreadLocal</code>来实现)</p><p>以上都不拦截doLogin操作</p><h4 id="gateway网关自定义拦截header"><a href="#gateway网关自定义拦截header" class="headerlink" title="gateway网关自定义拦截header"></a>gateway网关自定义拦截header</h4><p><code>LoginFilter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Spring组件注解，标识这是一个Spring组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 使用lombok的@Slf4j注解自动为类生成日志对象</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现GlobalFilter接口的filter方法，该方法会在请求被路由之前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 使用@SneakyThrows注解来避免显式声明异常，简化代码</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求和响应对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建请求的构建器，用于修改请求头信息</span></span><br><span class="line">        ServerHttpRequest.<span class="type">Builder</span> <span class="variable">mutate</span> <span class="operator">=</span> request.mutate();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取请求的URL路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录请求的URL到日志</span></span><br><span class="line">        log.info(<span class="string">&quot;LoginFilter.filter.url:&#123;&#125;&quot;</span>, url);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果请求的URL是&quot;/user/doLogin&quot;，则直接放行，不进行拦截</span></span><br><span class="line">        <span class="keyword">if</span> (url.equals(<span class="string">&quot;/user/doLogin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试获取当前请求的token信息，这里使用了SaToken框架</span></span><br><span class="line">        <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将token信息记录到日志中，这里使用了Gson库来将对象转换为JSON字符串</span></span><br><span class="line">        log.info(<span class="string">&quot;LoginFilter.filter.url:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(tokenInfo));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从token信息中获取登录用户的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> (String) tokenInfo.getLoginId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将登录用户的ID添加到请求头中</span></span><br><span class="line">        mutate.header(<span class="string">&quot;loginId&quot;</span>, loginId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将修改后的请求和原始的响应以及过滤器链一起构建成一个新的ServerWebExchange对象</span></span><br><span class="line">        <span class="comment">// 并调用chain.filter方法继续过滤链的执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange.mutate().request(mutate.build()).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过filter拿到token，解析出loginId，然后传到后面的过滤链中。</p><h4 id="基于threadLocal实现上下文传递"><a href="#基于threadLocal实现上下文传递" class="headerlink" title="基于threadLocal实现上下文传递"></a>基于threadLocal实现上下文传递</h4><p>mvc的全局处理：<code>GlobalConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记这个类是一个Spring配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖configureMessageConverters方法来添加自定义的消息转换器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">// 首先调用父类的configureMessageConverters方法</span></span><br><span class="line">        <span class="built_in">super</span>.configureMessageConverters(converters);</span><br><span class="line">        <span class="comment">// 添加一个MappingJackson2HttpMessageConverter到转换器列表中</span></span><br><span class="line">        converters.add(mappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖addInterceptors方法来添加自定义的拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一个自定义的拦截器LoginInterceptor</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                <span class="comment">// 拦截所有路径</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 排除/user/doLogin路径，不对登录请求进行拦截</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/doLogin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的MappingJackson2HttpMessageConverter实现</span></span><br><span class="line"><span class="comment">     * 目前实现的功能：</span></span><br><span class="line"><span class="comment">     * - 忽略空值，即使对象的字段为null也不会在JSON中出现</span></span><br><span class="line"><span class="comment">     * - 只序列化非空字段，空字段不会被序列化到JSON中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建ObjectMapper实例</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 配置ObjectMapper，当对象的字段为null时不抛出异常</span></span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置序列化时包含非空字段</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">// 创建MappingJackson2HttpMessageConverter并使用自定义的ObjectMapper</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录拦截器：<code>LoginInterceptor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在请求处理之前执行的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从请求头中获取loginId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;loginId&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断loginId是否存在且非空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(loginId)) &#123;</span><br><span class="line">            <span class="comment">// 如果存在，将其保存到自定义的线程局部变量上下文LoginContextHolder中</span></span><br><span class="line">            LoginContextHolder.set(<span class="string">&quot;loginId&quot;</span>, loginId);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回true表示继续执行拦截器链中的下一个拦截器或处理器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求处理完成后执行的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从上下文中移除loginId，清理线程局部变量</span></span><br><span class="line">        LoginContextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录上下文对象: <code>LoginContextHolder</code></p><p><a href="https://blog.csdn.net/yexiguafu/article/details/103900568?ops_request_misc=%7B%22request_id%22:%22172344903416800207094300%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172344903416800207094300&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103900568-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=inheritablethreadlocal&spm=1018.2226.3001.4187">InheritableThreadLocal详解-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginContextHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用InheritableThreadLocal来创建线程局部变量，允许子线程继承父线程的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InheritableThreadLocal&lt;Map&lt;String, Object&gt;&gt; THREAD_LOCAL =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将键值对放入线程局部变量中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object val)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = getThreadLocalMap();</span><br><span class="line">        map.put(key, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据键从线程局部变量中获取值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; threadLocalMap = getThreadLocalMap();</span><br><span class="line">        <span class="keyword">return</span> threadLocalMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 专门用于获取loginId的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLoginId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) getThreadLocalMap().get(<span class="string">&quot;loginId&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除线程局部变量中的所有数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线程局部变量中存储的Map，如果Map不存在，则创建一个新的Map</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">getThreadLocalMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(map)) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(); <span class="comment">// 使用线程安全的ConcurrentHashMap</span></span><br><span class="line">            THREAD_LOCAL.set(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以根据这个上下文，封装一下，去拿loginId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLoginId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LoginContextHolder.getLoginId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="微服务之间的Feign调用"><a href="#微服务之间的Feign调用" class="headerlink" title="微服务之间的Feign调用"></a>微服务之间的Feign调用</h4><p><strong>微服务之间的调用</strong></p><p>openfeign 是 spring cloud 搞出来的一个升级版，netflix 的 feign 这个不维护了。</p><p>openfeign 他就是声明式的 webservice 的客户端，使用 feign，编写调用更加的简单，主要打上注解就可以进行一个调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">responese</span> <span class="operator">=</span> service.hello();</span><br></pre></td></tr></table></figure><p>一行代码直接搞定。</p><p>feign 就帮助我们把 http 的调用编的非常的容易和方便，他整体的实现就是利用了 resttemplate 对 http 的一个封装。</p><p>feign 通过注解的方式配置之后，就可以完成接口的自动绑定，那我们调用 feign 的时候就像调接口一样，内置负载。内部封装了 ribbon。</p><p><strong>实操：</strong></p><p>首先，微服务之间要暴露出提供给其他服务的接口。在这里以<code>auth</code>包中的接口暴露给<code>subject</code>包的接口为例。</p><p><strong>auth:</strong></p><p><code>jc-club-auth-api</code>包中的<code>UserFeignService</code>接口，这里注意<code>@FeignClient</code>注解后面的<code>&quot;jc-club-auth-dev&quot;</code>实则是在<code>starter</code>包中对应的<code>bootstrap.yaml</code>中的服务名称（这个东西是注册到nacos上面的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;jc-club-auth-dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用该接口实则是调用的对应的domainService</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/getUserInfo&quot;)</span></span><br><span class="line">    Result&lt;AuthUserDTO&gt; <span class="title function_">getUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> AuthUserDTO authUserDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/listByIds&quot;)</span></span><br><span class="line">    Result&lt;List&lt;AuthUserDTO&gt;&gt; <span class="title function_">listUserInfoByIds</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; userNameList)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应的domainService</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthUserBO <span class="title function_">getUserInfo</span><span class="params">(AuthUserBO authUserBO)</span> &#123;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">authUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUser</span>();</span><br><span class="line">    authUser.setUserName(authUserBO.getUserName());</span><br><span class="line">    List&lt;AuthUser&gt; userList = authUserService.queryByCondition(authUser);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthUserBO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AuthUser</span> <span class="variable">user</span> <span class="operator">=</span> userList.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> AuthUserBOConverter.INSTANCE.convertEntityToBO(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;AuthUserBO&gt; <span class="title function_">listUserInfoByIds</span><span class="params">(List&lt;String&gt; userNameList)</span> &#123;</span><br><span class="line">    List&lt;AuthUser&gt; userList = authUserService.listUserInfoByIds(userNameList);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AuthUserBOConverter.INSTANCE.convertEntityToBO(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>jc-club-auth-application-controller</code>包中的<code>pom.xml</code>文件中，添加对该api包的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>subject:</strong></p><p>在<code>jc-club-subject</code>的<code>infra</code>包中的<code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jingdianjichi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jc-club-auth-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>jc-club-subject</code>的<code>infra</code>包中添加<code>UserRpc.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRpc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//auth-api模块中的UserFeignService接口</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignService userFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">getUserInfo</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">AuthUserDTO</span> <span class="variable">authUserDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserDTO</span>();</span><br><span class="line">        authUserDTO.setUserName(userName);</span><br><span class="line">        <span class="comment">//调用UserFeignService中暴露的接口</span></span><br><span class="line">        Result&lt;AuthUserDTO&gt; result = userFeignService.getUserInfo(authUserDTO);</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">        <span class="keyword">if</span> (!result.getSuccess()) &#123;</span><br><span class="line">            <span class="keyword">return</span> userInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthUserDTO</span> <span class="variable">data</span> <span class="operator">=</span> result.getData();</span><br><span class="line">        userInfo.setUserName(data.getUserName());</span><br><span class="line">        userInfo.setNickName(data.getNickName());</span><br><span class="line">        userInfo.setAvatar(data.getAvatar());</span><br><span class="line">        <span class="keyword">return</span> userInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，能拿到userInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/subject/category&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFeignController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRpc userRpc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;testFeign&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeign</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userRpc.getUserInfo(<span class="string">&quot;lzrj&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;testFeign.userInfo:&#123;&#125;&quot;</span>, userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>openFeign</code>拦截器实现用户上下文打通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Feign拦截器注册为Spring组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现apply方法，该方法将在Feign客户端发出请求之前被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        <span class="comment">// 从RequestContextHolder获取当前的ServletRequestAttributes</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从ServletRequestAttributes中获取HttpServletRequest对象</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查HttpServletRequest是否非空</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(request)) &#123;</span><br><span class="line">            <span class="comment">// 从HttpServletRequest的请求头中获取loginId</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;loginId&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查loginId是否非空且非仅包含空白字符</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(loginId)) &#123;</span><br><span class="line">                <span class="comment">// 如果loginId存在，将其添加到Feign请求模板的请求头中</span></span><br><span class="line">                requestTemplate.header(<span class="string">&quot;loginId&quot;</span>, loginId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">requestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FeignRequestInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>FeignRequestInterceptor</code>在调用微服务之前，就可以把相关请求的loginId封装到请求中，进行跨微服务的loginId的传递：</p><h3 id="guava本地缓存-已经升级成Caffiene"><a href="#guava本地缓存-已经升级成Caffiene" class="headerlink" title="guava本地缓存(已经升级成Caffiene)"></a>guava本地缓存(已经升级成Caffiene)</h3><p>泛型+函数式编程</p><p><strong>guava:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将CacheUtil类标记为Spring组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheUtil</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Guava的CacheBuilder构建一个本地缓存</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String, String&gt; localCache =</span><br><span class="line">            CacheBuilder.newBuilder()</span><br><span class="line">                    <span class="comment">// 设置缓存最大容量为5000</span></span><br><span class="line">                    .maximumSize(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置写入后10秒过期</span></span><br><span class="line">                    .expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据缓存键获取缓存结果，如果缓存未命中则调用function获取数据并缓存结果</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;V&gt; <span class="title function_">getResult</span><span class="params">(String cacheKey, Class&lt;V&gt; clazz,</span></span><br><span class="line"><span class="params">                             Function&lt;String, List&lt;V&gt;&gt; function)</span> &#123;</span><br><span class="line">        List&lt;V&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 尝试从缓存中获取内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> localCache.getIfPresent(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(content)) &#123;</span><br><span class="line">            <span class="comment">// 如果缓存中有数据，解析JSON字符串到List中</span></span><br><span class="line">            resultList = JSON.parseArray(content, clazz);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果缓存未命中，调用function获取数据</span></span><br><span class="line">            resultList = function.apply(cacheKey);</span><br><span class="line">            <span class="comment">// 如果获取的数据不为空，则将数据序列化为JSON字符串并缓存</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(resultList)) &#123;</span><br><span class="line">                localCache.put(cacheKey, JSON.toJSONString(resultList));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据缓存键获取Map类型的缓存结果，如果缓存未命中则调用function获取数据并缓存结果</span></span><br><span class="line">    <span class="comment">// 注意：此方法的实现目前为空，需要根据具体需求进行实现</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;K, V&gt; <span class="title function_">getMapResult</span><span class="params">(String cacheKey, Class&lt;V&gt; clazz,</span></span><br><span class="line"><span class="params">                                  Function&lt;String, Map&lt;K, V&gt;&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这用到了<code>queryCategoryAndLabel</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectCategoryBO&gt; <span class="title function_">queryCategoryAndLabel</span><span class="params">(SubjectCategoryBO subjectCategoryBO)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> subjectCategoryBO.getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="string">&quot;categoryAndLabel.&quot;</span> + subjectCategoryBO.getId();</span><br><span class="line">    <span class="comment">// 调用本地缓存</span></span><br><span class="line">    List&lt;SubjectCategoryBO&gt; subjectCategoryBOS = cacheUtil.getResult(cacheKey,</span><br><span class="line">            SubjectCategoryBO.class, (key) -&gt; getSubjectCategoryBOS(id)); <span class="comment">//如果本地缓存没有 就调用getSubjectCategoryBOS</span></span><br><span class="line">    <span class="keyword">return</span> subjectCategoryBOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全文检索功能"><a href="#全文检索功能" class="headerlink" title="全文检索功能"></a>全文检索功能</h3><p><a href="https://blog.csdn.net/JENREY/article/details/81290535?ops_request_misc=%7B%22request_id%22:%22172354172816800222897865%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172354172816800222897865&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81290535-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=elasticsearch&spm=1018.2226.3001.4187">ElasticSearch从入门到精通，史上最全（持续更新，未完待续，每天一点点）_elasticsearch从入门到精通,史上最全-CSDN博客</a></p><h4 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h4><p><img src="https://s2.loli.net/2024/08/13/JGn2mjVoUIRkDYg.png" alt="image-20240813172543714.png"></p><p>技术选型：elasticsearch。</p><p>目的是，网站现在整体的题目预计会到好几百，方便快速的搜索到自己想看的内容。</p><p>实现形式：</p><ul><li><p>同步：新增题目-&gt;MYSQL-&gt;es</p><p><img src="https://s2.loli.net/2024/08/13/SyGl8MZvtJxaC46.png" alt="image-20240813172750581.png"></p></li><li><p>异步：mysql 存储完后，发送 mq</p><p><img src="https://s2.loli.net/2024/08/13/8AlqQE3mfD6evGH.png" alt="image-20240813172810340.png"></p></li><li><p>异步canal：监听 mysql 变更的 binlog，实现 es 的存储</p><p><img src="https://s2.loli.net/2024/08/13/zlsu95tIUGHRw7D.png" alt="image-20240813172928624.png"></p></li></ul><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><p>[通过HTTP的方式操作ES-CSDN博客](<a href="https://blog.csdn.net/sss294438204/article/details/122884953?ops_request_misc=%7B%22request_id%22:%22172355571716800211536069%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172355571716800211536069&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122884953-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=es">https://blog.csdn.net/sss294438204/article/details/122884953?ops_request_misc=%7B%22request%5Fid%22%3A%22172355571716800211536069%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172355571716800211536069&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-122884953-null-null.142^v100^pc_search_result_base8&amp;utm_term=es</a> http&amp;spm&#x3D;1018.2226.3001.4187)</p><p>接口：</p><p><img src="https://s2.loli.net/2024/08/13/kIjp4gbOqEHxtJC.png" alt="image-20240813212925046.png"></p><h4 id="es分词问题"><a href="#es分词问题" class="headerlink" title="es分词问题"></a>es分词问题</h4><p>原生的不太行，用这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.3.1/elasticsearch-analysis-ik-7.3.1.zip</span><br></pre></td></tr></table></figure><p>解压后，上传到服务器 的 ik 文件夹下面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir /soft/ik</span><br><span class="line"></span><br><span class="line">进入容器内部</span><br><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line">cd plugins</span><br><span class="line">mkdir ik</span><br><span class="line"></span><br><span class="line">回到外部</span><br><span class="line">docker cp /soft/ik/. 73438a827b55:/usr/share/elasticsearch/plugins/ik</span><br><span class="line"></span><br><span class="line">重启es</span><br><span class="line">docker restart 73438a827b55</span><br></pre></td></tr></table></figure><h4 id="编码-试手"><a href="#编码-试手" class="headerlink" title="编码: 试手"></a>编码: 试手</h4><p><code>subject-infra</code>层<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TestFeignController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testCreateIndex&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> &#123;</span><br><span class="line">       subjectEsService.createIndex();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;addDocs&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDocs</span><span class="params">()</span> &#123;</span><br><span class="line">       subjectEsService.addDoc();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;find&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span> &#123;</span><br><span class="line">       subjectEsService.find();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;search&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">()</span> &#123;</span><br><span class="line">       subjectEsService.search();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>实体类：<code>SubjectInfoEs.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;subject_index&quot;, createIndex = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoEs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Long)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Date, index = false)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectEsRepository.java</code>，继承自<code>ElasticsearchRepository</code>。这个接口是Spring Data Elasticsearch的一部分，用于提供对Elasticsearch的访问和操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectEsRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;SubjectInfoEs, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectEsService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addDoc</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">search</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectEsServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectEsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectEsRepository subjectEsRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">IndexOperations</span> <span class="variable">indexOperations</span> <span class="operator">=</span></span><br><span class="line">                elasticsearchRestTemplate.indexOps(SubjectInfoEs.class);</span><br><span class="line">        indexOperations.create();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">mapping</span> <span class="operator">=</span> indexOperations.createMapping(SubjectInfoEs.class);</span><br><span class="line">        indexOperations.putMapping(mapping);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDoc</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SubjectInfoEs&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>(<span class="number">1L</span>,<span class="string">&quot;redis是什么&quot;</span>,<span class="string">&quot;redis是一个缓存&quot;</span>,<span class="string">&quot;鸡翅&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>(<span class="number">2L</span>,<span class="string">&quot;mysql是什么&quot;</span>,<span class="string">&quot;mysql是数据库&quot;</span>,<span class="string">&quot;鸡翅&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        subjectEsRepository.saveAll(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterable&lt;SubjectInfoEs&gt; all = subjectEsRepository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (SubjectInfoEs subjectInfoEs : all)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;subjectInfoEs:&#123;&#125;&quot;</span>,JSON.toJSONString(subjectInfoEs));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">NativeSearchQuery</span> <span class="variable">nativeSearchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">                .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;subjectName&quot;</span>,<span class="string">&quot;redis&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        SearchHits&lt;SubjectInfoEs&gt; search = elasticsearchRestTemplate.</span><br><span class="line">                search(nativeSearchQuery, SubjectInfoEs.class);</span><br><span class="line">        List&lt;SearchHit&lt;SubjectInfoEs&gt;&gt; searchHits = search.getSearchHits();</span><br><span class="line">        log.info(<span class="string">&quot;searchHits:&#123;&#125;&quot;</span>, JSON.toJSONString(searchHits));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subject-starter</code>中的<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line"> <span class="attr">rest:</span></span><br><span class="line">  <span class="string">uris:http://172.72.14.166:9200</span></span><br></pre></td></tr></table></figure><h4 id="编码：自定义封装es集群连接统一管理"><a href="#编码：自定义封装es集群连接统一管理" class="headerlink" title="编码：自定义封装es集群连接统一管理"></a>编码：自定义封装es集群连接统一管理</h4><p>希望的一个目的</p><ol><li>有自己的封装好的工具</li><li>集群，索引等等都要兼容的配置的概念</li><li>不想用 data 的这种方式，不够扩展</li></ol><p><img src="https://s2.loli.net/2024/08/14/IyEW14MJOe8gP9w.png" alt="image-20240814112513230.png"></p><p>配置类：读取配置文件自定义的属性，支持集群，节点等等一些信息</p><ol><li>@Configuration + @ConfigurationProperties + @Data（必须提供set方法）</li><li>@Configuration +  @Value</li></ol><p>集群类：集群的名称、集群的节点</p><p>索引类：集群名称、索引名称</p><p>封装的请求类：查询条件、查询字段、页数、条数、快照、快照缓存时间、排序字段、排序类型、高亮</p><p>封装的返回类：文档id（保证唯一）、所有跟restClient交互的封装成一个Map</p><p>自定义工具类：目的就是为了提供一个RestHighLevelClient，在原生client的基础上封装一些好用的api</p><p>整体基于 es 的原生的 client 来去做。</p><p><code>subject-infra</code>层<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>es集群类<code>EsClusterConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsClusterConfig</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nodes;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EsConfigProperties.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;es.cluster&quot;)</span> <span class="comment">//这部分是跟application.yaml中的对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsConfigProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;EsClusterConfig&gt; esConfigs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;EsClusterConfig&gt; <span class="title function_">getEsConfigs</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> esConfigs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEsConfigs</span><span class="params">(List&lt;EsClusterConfig&gt; esConfigs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.esConfigs = esConfigs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subject-starter</code>中的<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">es:</span></span><br><span class="line">  <span class="attr">cluster:</span></span><br><span class="line">    <span class="string">esConfigs[0]:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">73438a827b55</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">117.72</span><span class="number">.14</span><span class="number">.166</span><span class="string">:9200</span></span><br></pre></td></tr></table></figure><p><code>EsIndexInfo.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsIndexInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String clusterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String indexName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EsSearchRequest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsSearchRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BoolQueryBuilder bq;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] fields;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要快照</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean needScroll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快照缓存时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long minutes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SortOrder sortOrder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮builder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HighlightBuilder highlightBuilder;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EsSourceData.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsSourceData</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String docId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EsRestClient.java</code></p><p>这个类封装了与Elasticsearch集群交互的常见操作</p><ol><li><strong>类定义和日志记录</strong>：使用<code>@Component</code>注解表明这是一个Spring组件，使用<code>@Slf4j</code>来引入日志记录功能。</li><li><strong>客户端映射</strong>：<code>clientMap</code>是一个静态的<code>HashMap</code>，用于存储不同Elasticsearch集群的<code>RestHighLevelClient</code>实例。</li><li><strong>配置属性注入</strong>：通过<code>@Resource</code>注解注入<code>EsConfigProperties</code>，这是一个配置属性类，用于获取Elasticsearch集群的配置信息。</li><li><strong>请求选项</strong>：定义了一个静态的<code>RequestOptions</code>对象<code>COMMON_OPTIONS</code>，用于后续的请求。</li><li><strong>初始化方法</strong>：<code>initialize</code>方法在组件初始化时被调用，用于根据配置创建和初始化<code>RestHighLevelClient</code>实例。</li><li><strong>创建客户端方法</strong>：<code>initRestClient</code>是一个私有方法，用于根据给定的集群配置创建<code>RestHighLevelClient</code>实例。</li><li><strong>获取客户端方法</strong>：<code>getClient</code>是一个静态方法，用于根据集群名称获取对应的<code>RestHighLevelClient</code>实例。</li><li><strong>文档操作</strong>：类中定义了一系列的静态方法，用于执行Elasticsearch中的文档操作，如插入(<code>insertDoc</code>)、更新(<code>updateDoc</code>)、批量更新(<code>batchUpdateDoc</code>)、删除(<code>delete</code>和<code>deleteDoc</code>)、检查文档是否存在(<code>isExistDocById</code>)、获取文档(<code>getDocById</code>)等。</li><li><strong>搜索功能</strong>：<code>searchWithTermQuery</code>方法用于执行基于布尔查询构建器的搜索请求，并支持高亮显示、排序和滚动(scroll)。</li><li><strong>批量插入</strong>：<code>batchInsertDoc</code>方法用于批量插入文档。</li><li><strong>更新查询</strong>：<code>updateByQuery</code>方法允许执行基于查询的更新操作。</li><li><strong>分词功能</strong>：<code>getAnalyze</code>方法提供了一个分词功能，可以对输入的文本进行分词。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsRestClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, RestHighLevelClient&gt; clientMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> EsConfigProperties esConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;EsClusterConfig&gt; esConfigs = esConfigProperties.getEsConfigs();</span><br><span class="line">        <span class="keyword">for</span> (EsClusterConfig esConfig : esConfigs) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;initialize.config.name:&#123;&#125;,node:&#123;&#125;&quot;</span>, esConfig.getName(), esConfig.getNodes());</span><br><span class="line">            <span class="type">RestHighLevelClient</span> <span class="variable">restHighLevelClient</span> <span class="operator">=</span> initRestClient(esConfig);</span><br><span class="line">            <span class="keyword">if</span> (restHighLevelClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                clientMap.put(esConfig.getName(), restHighLevelClient);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;config.name:&#123;&#125;,node:&#123;&#125;.initError&quot;</span>, esConfig.getName(), esConfig.getNodes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient <span class="title function_">initRestClient</span><span class="params">(EsClusterConfig esClusterConfig)</span> &#123;</span><br><span class="line">        String[] ipPortArr = esClusterConfig.getNodes().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;HttpHost&gt; httpHostList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(ipPortArr.length);</span><br><span class="line">        <span class="keyword">for</span> (String ipPort : ipPortArr) &#123;</span><br><span class="line">            String[] ipPortInfo = ipPort.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ipPortInfo.length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">HttpHost</span> <span class="variable">httpHost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(ipPortInfo[<span class="number">0</span>], NumberUtils.toInt(ipPortInfo[<span class="number">1</span>]));</span><br><span class="line">                httpHostList.add(httpHost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpHost[] httpHosts = <span class="keyword">new</span> <span class="title class_">HttpHost</span>[httpHostList.size()];</span><br><span class="line">        httpHostList.toArray(httpHosts);</span><br><span class="line"></span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(httpHosts);</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">restHighLevelClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回集群名称对应的RestHighLevelClient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestHighLevelClient <span class="title function_">getClient</span><span class="params">(String clusterName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clientMap.get(clusterName);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//新增文档</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">insertDoc</span><span class="params">(EsIndexInfo esIndexInfo, EsSourceData esSourceData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            indexRequest.source(esSourceData.getData());</span><br><span class="line">            indexRequest.id(esSourceData.getDocId());</span><br><span class="line">            getClient(esIndexInfo.getClusterName()).index(indexRequest, COMMON_OPTIONS);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;insertDoc.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">updateDoc</span><span class="params">(EsIndexInfo esIndexInfo, EsSourceData esSourceData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>();</span><br><span class="line">            updateRequest.index(esIndexInfo.getIndexName());</span><br><span class="line">            updateRequest.id(esSourceData.getDocId());</span><br><span class="line">            updateRequest.doc(esSourceData.getData());</span><br><span class="line">            getClient(esIndexInfo.getClusterName()).update(updateRequest, COMMON_OPTIONS);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;updateDoc.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">batchUpdateDoc</span><span class="params">(EsIndexInfo esIndexInfo,</span></span><br><span class="line"><span class="params">                                         List&lt;EsSourceData&gt; esSourceDataList)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">            <span class="keyword">for</span> (EsSourceData esSourceData : esSourceDataList) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">docId</span> <span class="operator">=</span> esSourceData.getDocId();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(docId)) &#123;</span><br><span class="line">                    <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>();</span><br><span class="line">                    updateRequest.index(esIndexInfo.getIndexName());</span><br><span class="line">                    updateRequest.id(esSourceData.getDocId());</span><br><span class="line">                    updateRequest.doc(esSourceData.getData());</span><br><span class="line">                    bulkRequest.add(updateRequest);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).bulk(bulkRequest, COMMON_OPTIONS);</span><br><span class="line">                <span class="keyword">if</span> (bulk.hasFailures()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;batchUpdateDoc.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(EsIndexInfo esIndexInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DeleteByQueryRequest</span> <span class="variable">deleteByQueryRequest</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">DeleteByQueryRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            deleteByQueryRequest.setQuery(QueryBuilders.matchAllQuery());</span><br><span class="line">            <span class="type">BulkByScrollResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).deleteByQuery(</span><br><span class="line">                    deleteByQueryRequest, COMMON_OPTIONS</span><br><span class="line">            );</span><br><span class="line">            <span class="type">long</span> <span class="variable">deleted</span> <span class="operator">=</span> response.getDeleted();</span><br><span class="line">            log.info(<span class="string">&quot;deleted.size:&#123;&#125;&quot;</span>, deleted);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;delete.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteDoc</span><span class="params">(EsIndexInfo esIndexInfo, String docId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            deleteRequest.id(docId);</span><br><span class="line">            <span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).delete(deleteRequest, COMMON_OPTIONS);</span><br><span class="line">            log.info(<span class="string">&quot;deleteDoc.response:&#123;&#125;&quot;</span>, JSON.toJSONString(response));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;deleteDoc.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isExistDocById</span><span class="params">(EsIndexInfo esIndexInfo, String docId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            getRequest.id(docId);</span><br><span class="line">            <span class="keyword">return</span> getClient(esIndexInfo.getClusterName()).exists(getRequest, COMMON_OPTIONS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;isExistDocById.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">getDocById</span><span class="params">(EsIndexInfo esIndexInfo, String docId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            getRequest.id(docId);</span><br><span class="line">            <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).get(getRequest, COMMON_OPTIONS);</span><br><span class="line">            Map&lt;String, Object&gt; source = response.getSource();</span><br><span class="line">            <span class="keyword">return</span> source;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;isExistDocById.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">getDocById</span><span class="params">(EsIndexInfo esIndexInfo, String docId,</span></span><br><span class="line"><span class="params">                                                 String[] fields)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            getRequest.id(docId);</span><br><span class="line">            <span class="type">FetchSourceContext</span> <span class="variable">fetchSourceContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FetchSourceContext</span>(<span class="literal">true</span>, fields, <span class="literal">null</span>);</span><br><span class="line">            getRequest.fetchSourceContext(fetchSourceContext);</span><br><span class="line">            <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).get(getRequest, COMMON_OPTIONS);</span><br><span class="line">            Map&lt;String, Object&gt; source = response.getSource();</span><br><span class="line">            <span class="keyword">return</span> source;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;isExistDocById.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行Elasticsearch搜索，支持复杂的查询条件、字段选择、高亮显示、排序和滚动搜索。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SearchResponse <span class="title function_">searchWithTermQuery</span><span class="params">(EsIndexInfo esIndexInfo,</span></span><br><span class="line"><span class="params">                                                     EsSearchRequest esSearchRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BoolQueryBuilder</span> <span class="variable">bq</span> <span class="operator">=</span> esSearchRequest.getBq();</span><br><span class="line">            String[] fields = esSearchRequest.getFields();</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> esSearchRequest.getFrom();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> esSearchRequest.getSize();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">minutes</span> <span class="operator">=</span> esSearchRequest.getMinutes();</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">needScroll</span> <span class="operator">=</span> esSearchRequest.getNeedScroll();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sortName</span> <span class="operator">=</span> esSearchRequest.getSortName();</span><br><span class="line">            <span class="type">SortOrder</span> <span class="variable">sortOrder</span> <span class="operator">=</span> esSearchRequest.getSortOrder();</span><br><span class="line"></span><br><span class="line">            <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">            searchSourceBuilder.query(bq);</span><br><span class="line">            searchSourceBuilder.fetchSource(fields, <span class="literal">null</span>).from(from).size(size);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(esSearchRequest.getHighlightBuilder())) &#123;</span><br><span class="line">                searchSourceBuilder.highlighter(esSearchRequest.getHighlightBuilder());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(sortName)) &#123;</span><br><span class="line">                searchSourceBuilder.sort(sortName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            searchSourceBuilder.sort(<span class="keyword">new</span> <span class="title class_">ScoreSortBuilder</span>().order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">            searchRequest.searchType(SearchType.DEFAULT);</span><br><span class="line">            searchRequest.indices(esIndexInfo.getIndexName());</span><br><span class="line">            searchRequest.source(searchSourceBuilder);</span><br><span class="line">            <span class="keyword">if</span> (needScroll) &#123;</span><br><span class="line">                <span class="type">Scroll</span> <span class="variable">scroll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scroll</span>(TimeValue.timeValueMinutes(minutes));</span><br><span class="line">                searchRequest.scroll(scroll);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).search(searchRequest, COMMON_OPTIONS);</span><br><span class="line">            <span class="keyword">return</span> search;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;searchWithTermQuery.exception:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">batchInsertDoc</span><span class="params">(EsIndexInfo esIndexInfo, List&lt;EsSourceData&gt; esSourceDataList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;批量新增ES:&quot;</span> + esSourceDataList.size());</span><br><span class="line">            log.info(<span class="string">&quot;indexName:&quot;</span> + esIndexInfo.getIndexName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (EsSourceData source : esSourceDataList) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">docId</span> <span class="operator">=</span> source.getDocId();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(docId)) &#123;</span><br><span class="line">                    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">                    indexRequest.id(docId);</span><br><span class="line">                    indexRequest.source(source.getData());</span><br><span class="line">                    bulkRequest.add(indexRequest);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="type">BulkResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).bulk(bulkRequest, COMMON_OPTIONS);</span><br><span class="line">                <span class="keyword">if</span> (response.hasFailures()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;batchInsertDoc.error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">updateByQuery</span><span class="params">(EsIndexInfo esIndexInfo, QueryBuilder queryBuilder, Script script, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;updateByQuery.indexName:&quot;</span> + esIndexInfo.getIndexName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UpdateByQueryRequest</span> <span class="variable">updateByQueryRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateByQueryRequest</span>(esIndexInfo.getIndexName());</span><br><span class="line">            updateByQueryRequest.setQuery(queryBuilder);</span><br><span class="line">            updateByQueryRequest.setScript(script);</span><br><span class="line">            updateByQueryRequest.setBatchSize(batchSize);</span><br><span class="line">            updateByQueryRequest.setAbortOnVersionConflict(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">BulkByScrollResponse</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).updateByQuery(updateByQueryRequest, RequestOptions.DEFAULT);</span><br><span class="line">            List&lt;BulkItemResponse.Failure&gt; failures = response.getBulkFailures();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;updateByQuery.error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分词方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getAnalyze</span><span class="params">(EsIndexInfo esIndexInfo, String text)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;_analyze&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        entity.put(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_smart&quot;</span>);</span><br><span class="line">        entity.put(<span class="string">&quot;text&quot;</span>, text);</span><br><span class="line">        request.setJsonEntity(entity.toJSONString());</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> getClient(esIndexInfo.getClusterName()).getLowLevelClient().performRequest(request);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">tokens</span> <span class="operator">=</span> JSONObject.parseObject(EntityUtils.toString(response.getEntity()));</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">arrays</span> <span class="operator">=</span> tokens.getJSONArray(<span class="string">&quot;tokens&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.size(); i++) &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(arrays.getString(i));</span><br><span class="line">            list.add(obj.getString(<span class="string">&quot;token&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新增题目同步到es-带高亮的网站全文搜索"><a href="#新增题目同步到es-带高亮的网站全文搜索" class="headerlink" title="新增题目同步到es+带高亮的网站全文搜索"></a>新增题目同步到es+带高亮的网站全文搜索</h4><p><code>subject-infra</code>的<code>SubjectInfoEs.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectInfoEs</span> <span class="keyword">extends</span> <span class="title class_">PageInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long subjectId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long docId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String subjectAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer subjectType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keyWord;</span><br><span class="line"><span class="comment">//相关性的分数，搜索的结果</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal score;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subject-infra</code>的<code>EsSubjectFields.java</code></p><p>负责与Elasticsearch（ES）的交互，包括数据的插入和查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsSubjectFields</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DOC_ID</span> <span class="operator">=</span> <span class="string">&quot;doc_id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_ID</span> <span class="operator">=</span> <span class="string">&quot;subject_id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_NAME</span> <span class="operator">=</span> <span class="string">&quot;subject_name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_ANSWER</span> <span class="operator">=</span> <span class="string">&quot;subject_answer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;subject_type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_USER</span> <span class="operator">=</span> <span class="string">&quot;create_user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATE_TIME</span> <span class="operator">=</span> <span class="string">&quot;create_time&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] FIELD_QUERY = &#123;</span><br><span class="line">            SUBJECT_ID, SUBJECT_NAME, SUBJECT_ANSWER, SUBJECT_TYPE, DOC_ID, CREATE_USER, CREATE_TIME</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subject-infra</code>的<code>SubjectEsService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubjectEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(SubjectInfoEs subjectInfoEs)</span>;</span><br><span class="line"><span class="comment">//做一个分页的</span></span><br><span class="line">    PageResult&lt;SubjectInfoEs&gt; <span class="title function_">querySubjectList</span><span class="params">(SubjectInfoEs subjectInfoEs)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectEsServiceImpl.java</code></p><ol><li><strong>插入方法</strong>：<code>insert</code>方法实现了将<code>SubjectInfoEs</code>对象转换为ES的文档并插入到ES中。它首先调用<code>convert2EsSourceData</code>方法将<code>SubjectInfoEs</code>对象转换为ES的源数据格式，然后使用<code>EsRestClient</code>的<code>insertDoc</code>方法执行插入操作。</li><li><strong>转换方法</strong>：<code>convert2EsSourceData</code>是一个私有方法，用于将<code>SubjectInfoEs</code>对象的属性转换为一个Map，这个Map将作为ES文档的数据部分。</li><li><strong>查询方法</strong>：<code>querySubjectList</code>方法实现了分页查询ES中的数据。它首先创建一个<code>EsSearchRequest</code>查询请求，然后使用<code>EsRestClient</code>的<code>searchWithTermQuery</code>方法执行查询，并将结果转换为<code>PageResult&lt;SubjectInfoEs&gt;</code>对象。</li><li><strong>结果转换方法</strong>：<code>convertResult</code>是一个私有方法，用于将ES查询结果的<code>SearchHit</code>转换为<code>SubjectInfoEs</code>对象。它还处理了高亮显示查询关键字的功能。</li><li><strong>查询构建方法</strong>：<code>createSearchListQuery</code>是一个私有方法，用于构建查询请求。它使用<code>BoolQueryBuilder</code>来构建查询条件，并设置了高亮显示的配置。</li><li><strong>获取ES索引信息方法</strong>：<code>getEsIndexInfo</code>是一个私有方法，用于获取ES的索引信息，包括集群名称和索引名称。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectEsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SubjectEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(SubjectInfoEs subjectInfoEs)</span> &#123;</span><br><span class="line">        <span class="type">EsSourceData</span> <span class="variable">esSourceData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsSourceData</span>();</span><br><span class="line">        Map&lt;String, Object&gt; data = convert2EsSourceData(subjectInfoEs);</span><br><span class="line">        esSourceData.setDocId(subjectInfoEs.getDocId().toString());</span><br><span class="line">        esSourceData.setData(data);</span><br><span class="line">        <span class="keyword">return</span> EsRestClient.insertDoc(getEsIndexInfo(), esSourceData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">convert2EsSourceData</span><span class="params">(SubjectInfoEs subjectInfoEs)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(EsSubjectFields.SUBJECT_ID, subjectInfoEs.getSubjectId());</span><br><span class="line">        data.put(EsSubjectFields.DOC_ID, subjectInfoEs.getDocId());</span><br><span class="line">        data.put(EsSubjectFields.SUBJECT_NAME, subjectInfoEs.getSubjectName());</span><br><span class="line">        data.put(EsSubjectFields.SUBJECT_ANSWER, subjectInfoEs.getSubjectAnswer());</span><br><span class="line">        data.put(EsSubjectFields.SUBJECT_TYPE, subjectInfoEs.getSubjectType());</span><br><span class="line">        data.put(EsSubjectFields.CREATE_USER, subjectInfoEs.getCreateUser());</span><br><span class="line">        data.put(EsSubjectFields.CREATE_TIME, subjectInfoEs.getCreateTime());</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//带高亮的网站全文搜索</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;SubjectInfoEs&gt; <span class="title function_">querySubjectList</span><span class="params">(SubjectInfoEs req)</span> &#123;</span><br><span class="line">        PageResult&lt;SubjectInfoEs&gt; pageResult = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;();</span><br><span class="line">        <span class="type">EsSearchRequest</span> <span class="variable">esSearchRequest</span> <span class="operator">=</span> createSearchListQuery(req);</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> EsRestClient.searchWithTermQuery(getEsIndexInfo(), esSearchRequest);</span><br><span class="line"></span><br><span class="line">        List&lt;SubjectInfoEs&gt; subjectInfoEsList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">        <span class="keyword">if</span> (searchHits == <span class="literal">null</span> || searchHits.getHits() == <span class="literal">null</span>) &#123;</span><br><span class="line">            pageResult.setPageNo(req.getPageNo());</span><br><span class="line">            pageResult.setPageSize(req.getPageSize());</span><br><span class="line">            pageResult.setRecords(subjectInfoEsList);</span><br><span class="line">            pageResult.setTotal(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> pageResult;</span><br><span class="line">        &#125;</span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="type">SubjectInfoEs</span> <span class="variable">subjectInfoEs</span> <span class="operator">=</span> convertResult(hit);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(subjectInfoEs)) &#123;</span><br><span class="line">                subjectInfoEsList.add(subjectInfoEs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pageResult.setPageNo(req.getPageNo());</span><br><span class="line">        pageResult.setPageSize(req.getPageSize());</span><br><span class="line">        pageResult.setRecords(subjectInfoEsList);</span><br><span class="line">        pageResult.setTotal(Long.valueOf(searchHits.getTotalHits().value).intValue());</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将Elasticsearch搜索结果的SearchHit对象转换为SubjectInfoEs对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hit Elasticsearch返回的搜索结果条目。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 转换后的SubjectInfoEs对象，如果结果为空则返回null。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> SubjectInfoEs <span class="title function_">convertResult</span><span class="params">(SearchHit hit)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取搜索结果的源数据映射。</span></span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">    <span class="comment">// 如果源数据映射为空，则返回null。</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceAsMap)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建SubjectInfoEs对象用于存储转换结果。</span></span><br><span class="line">    <span class="type">SubjectInfoEs</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从源数据映射中获取题目ID，并设置到result对象。</span></span><br><span class="line">    result.setSubjectId(MapUtils.getLong(sourceAsMap, EsSubjectFields.SUBJECT_ID));</span><br><span class="line">    <span class="comment">// 从源数据映射中获取题目名称，并设置到result对象。</span></span><br><span class="line">    result.setSubjectName(MapUtils.getString(sourceAsMap, EsSubjectFields.SUBJECT_NAME));</span><br><span class="line">    <span class="comment">// 从源数据映射中获取题目答案，并设置到result对象。</span></span><br><span class="line">    result.setSubjectAnswer(MapUtils.getString(sourceAsMap, EsSubjectFields.SUBJECT_ANSWER));</span><br><span class="line">    <span class="comment">// 从源数据映射中获取文档ID，并设置到result对象。</span></span><br><span class="line">    result.setDocId(MapUtils.getLong(sourceAsMap, EsSubjectFields.DOC_ID));</span><br><span class="line">    <span class="comment">// 从源数据映射中获取题目类型，并设置到result对象。</span></span><br><span class="line">    result.setSubjectType(MapUtils.getInteger(sourceAsMap, EsSubjectFields.SUBJECT_TYPE));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取搜索结果的相关性分数，并转换为百分比形式，设置到result对象。</span></span><br><span class="line">    result.setScore(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(String.valueOf(hit.getScore()))</span><br><span class="line">            .multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100.00&quot;</span>).setScale(<span class="number">2</span>, RoundingMode.HALF_UP)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取高亮字段，处理题目名称的高亮显示。</span></span><br><span class="line">    Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">    <span class="type">HighlightField</span> <span class="variable">subjectNameField</span> <span class="operator">=</span> highlightFields.get(EsSubjectFields.SUBJECT_NAME);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(subjectNameField)) &#123;</span><br><span class="line">        <span class="comment">// 获取题目名称的高亮片段。</span></span><br><span class="line">        Text[] fragments = subjectNameField.getFragments();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">subjectNameBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Text fragment : fragments) &#123;</span><br><span class="line">            <span class="comment">// 拼接高亮片段。</span></span><br><span class="line">            subjectNameBuilder.append(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置处理后的高亮题目名称。</span></span><br><span class="line">        result.setSubjectName(subjectNameBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理题目答案的高亮显示。</span></span><br><span class="line">    <span class="type">HighlightField</span> <span class="variable">subjectAnswerField</span> <span class="operator">=</span> highlightFields.get(EsSubjectFields.SUBJECT_ANSWER);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(subjectAnswerField)) &#123;</span><br><span class="line">        Text[] fragments = subjectAnswerField.getFragments();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">subjectAnswerBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Text fragment : fragments) &#123;</span><br><span class="line">            subjectAnswerBuilder.append(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置处理后的高亮题目答案。</span></span><br><span class="line">        result.setSubjectAnswer(subjectAnswerBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回填充好的SubjectInfoEs对象。</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个用于查询题目列表的EsSearchRequest对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> req 包含查询条件的SubjectInfoEs对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 配置好的EsSearchRequest对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> EsSearchRequest <span class="title function_">createSearchListQuery</span><span class="params">(SubjectInfoEs req)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建EsSearchRequest对象用于存储搜索请求的配置。</span></span><br><span class="line">    <span class="type">EsSearchRequest</span> <span class="variable">esSearchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsSearchRequest</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个布尔查询构造器，用于组合多个查询条件。</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">bq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoolQueryBuilder</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个匹配查询构造器，用于匹配题目名称字段。</span></span><br><span class="line">    <span class="type">MatchQueryBuilder</span> <span class="variable">subjectNameQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.matchQuery(EsSubjectFields.SUBJECT_NAME, req.getKeyWord());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将题目名称的匹配查询添加到布尔查询中，并设置提升因子为2，以提高相关性。</span></span><br><span class="line">    bq.should(subjectNameQueryBuilder);</span><br><span class="line">    subjectNameQueryBuilder.boost(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个匹配查询构造器，用于匹配题目答案字段。</span></span><br><span class="line">    <span class="type">MatchQueryBuilder</span> <span class="variable">subjectAnswerQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.matchQuery(EsSubjectFields.SUBJECT_ANSWER, req.getKeyWord());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将题目答案的匹配查询添加到布尔查询中。</span></span><br><span class="line">    bq.should(subjectAnswerQueryBuilder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个匹配查询构造器，用于匹配题目类型字段，必须是简答题类型。</span></span><br><span class="line">    <span class="type">MatchQueryBuilder</span> <span class="variable">subjectTypeQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.matchQuery(EsSubjectFields.SUBJECT_TYPE, SubjectInfoTypeEnum.BRIEF.getCode());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必须匹配题目类型的查询添加到布尔查询中。</span></span><br><span class="line">    bq.must(subjectTypeQueryBuilder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置至少应该匹配的should子句的数量为1。</span></span><br><span class="line">    bq.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建高亮显示构造器，设置高亮显示的前缀和后缀标签。</span></span><br><span class="line">    <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;*&quot;</span>).requireFieldMatch(<span class="literal">false</span>);</span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style = \&quot;color:red\&quot;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置EsSearchRequest对象的布尔查询构造器。</span></span><br><span class="line">    esSearchRequest.setBq(bq);</span><br><span class="line">    <span class="comment">// 设置高亮显示构造器。</span></span><br><span class="line">    esSearchRequest.setHighlightBuilder(highlightBuilder);</span><br><span class="line">    <span class="comment">// 设置需要返回的字段。</span></span><br><span class="line">    esSearchRequest.setFields(EsSubjectFields.FIELD_QUERY);</span><br><span class="line">    <span class="comment">// 设置从第几个文档开始返回结果，用于分页。</span></span><br><span class="line">    esSearchRequest.setFrom((req.getPageNo() - <span class="number">1</span>) * req.getPageSize());</span><br><span class="line">    <span class="comment">// 设置每页返回的文档数量。</span></span><br><span class="line">    esSearchRequest.setSize(req.getPageSize());</span><br><span class="line">    <span class="comment">// 设置不需要滚动搜索。</span></span><br><span class="line">    esSearchRequest.setNeedScroll(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回配置好的搜索请求对象。</span></span><br><span class="line">    <span class="keyword">return</span> esSearchRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EsIndexInfo <span class="title function_">getEsIndexInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">EsIndexInfo</span> <span class="variable">esIndexInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsIndexInfo</span>();</span><br><span class="line">        esIndexInfo.setClusterName(<span class="string">&quot;73438a827b55&quot;</span>);</span><br><span class="line">        esIndexInfo.setIndexName(<span class="string">&quot;subject_index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> esIndexInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//同步到es</span></span><br><span class="line">    <span class="type">SubjectInfoEs</span> <span class="variable">subjectInfoEs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>();</span><br><span class="line">    subjectInfoEs.setDocId(<span class="keyword">new</span> <span class="title class_">IdWorkerUtil</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>).nextId());</span><br><span class="line">    subjectInfoEs.setSubjectId(subjectInfo.getId());</span><br><span class="line">    subjectInfoEs.setSubjectAnswer(subjectInfoBO.getSubjectAnswer());</span><br><span class="line">    subjectInfoEs.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">    subjectInfoEs.setCreateUser(<span class="string">&quot;lzrj&quot;</span>);</span><br><span class="line">    subjectInfoEs.setSubjectName(subjectInfo.getSubjectName());</span><br><span class="line">    subjectInfoEs.setSubjectType(subjectInfo.getSubjectType());</span><br><span class="line">    subjectEsService.insert(subjectInfoEs);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全文检索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/getSubjectPageBySearch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&lt;SubjectInfoEs&gt;&gt; <span class="title function_">getSubjectPageBySearch</span><span class="params">(<span class="meta">@RequestBody</span> SubjectInfoDTO subjectInfoDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectController.getSubjectPageBySearch.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectInfoDTO));</span><br><span class="line">        &#125;</span><br><span class="line">        Preconditions.checkArgument(StringUtils.isNotBlank(subjectInfoDTO.getKeyWord()), <span class="string">&quot;关键词不能为空&quot;</span>);</span><br><span class="line">        <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> SubjectInfoDTOConverter.INSTANCE.convertDTOToBO(subjectInfoDTO);</span><br><span class="line">        subjectInfoBO.setPageNo(subjectInfoDTO.getPageNo());</span><br><span class="line">        subjectInfoBO.setPageSize(subjectInfoDTO.getPageSize());</span><br><span class="line">        PageResult&lt;SubjectInfoEs&gt; boPageResult = subjectInfoDomainService.getSubjectPageBySearch(subjectInfoBO);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(boPageResult);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;SubjectCategoryController.getSubjectPageBySearch.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;全文检索失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult&lt;SubjectInfoEs&gt; <span class="title function_">getSubjectPageBySearch</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">    <span class="type">SubjectInfoEs</span> <span class="variable">subjectInfoEs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoEs</span>();</span><br><span class="line">    subjectInfoEs.setPageNo(subjectInfoBO.getPageNo());</span><br><span class="line">    subjectInfoEs.setPageSize(subjectInfoBO.getPageSize());</span><br><span class="line">    subjectInfoEs.setKeyWord(subjectInfoBO.getKeyWord());</span><br><span class="line">    <span class="keyword">return</span> subjectEsService.querySubjectList(subjectInfoEs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Mybatis拦截器自动填充数据-方法级别拦截器"><a href="#手写Mybatis拦截器自动填充数据-方法级别拦截器" class="headerlink" title="手写Mybatis拦截器自动填充数据(方法级别拦截器)"></a>手写Mybatis拦截器自动填充数据(方法级别拦截器)</h3><p><code>LoginContextHolder</code>和<code>LoginUtil</code>都放在<code>common</code>层里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 填充createBy, createTime等公共字段的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// 声明拦截器，指定要拦截的Executor类中的update方法，以及该方法的参数类型</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获取拦截方法的参数</span></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">mappedStatement</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">SqlCommandType</span> <span class="variable">sqlCommandType</span> <span class="operator">=</span> mappedStatement.getSqlCommandType();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果参数为空，直接执行原方法</span></span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取当前登录用户的id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginId</span> <span class="operator">=</span> LoginUtil.getLoginId();</span><br><span class="line">        <span class="comment">// 如果没有登录用户，直接执行原方法</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(loginId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据SqlCommandType是INSERT或UPDATE，调用不同的处理方法</span></span><br><span class="line">        <span class="keyword">if</span> (SqlCommandType.INSERT == sqlCommandType || SqlCommandType.UPDATE == sqlCommandType) &#123;</span><br><span class="line">            replaceEntityProperty(parameter, loginId, sqlCommandType);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行原方法</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据不同的参数类型，调用不同的属性替换方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter 拦截方法的参数对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginId 当前登录用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlCommandType SQL命令类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceEntityProperty</span><span class="params">(Object parameter, String loginId, SqlCommandType sqlCommandType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">            replaceMap((Map) parameter, loginId, sqlCommandType);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            replace(parameter, loginId, sqlCommandType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理Map类型的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter Map参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginId 登录用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlCommandType SQL命令类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceMap</span><span class="params">(Map parameter, String loginId, SqlCommandType sqlCommandType)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object val : parameter.values()) &#123;</span><br><span class="line">            replace(val, loginId, sqlCommandType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理普通对象或集合类型的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter 参数对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginId 登录用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlCommandType SQL命令类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(Object parameter, String loginId, SqlCommandType sqlCommandType)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (SqlCommandType.INSERT == sqlCommandType) &#123;</span><br><span class="line">        dealInsert(parameter, loginId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dealUpdate(parameter, loginId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理UPDATE操作的字段替换</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> parameter 参数对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> loginId 登录用户的id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dealUpdate</span><span class="params">(Object parameter, String loginId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取所有字段，包括继承的字段</span></span><br><span class="line">    Field[] fields = getAllFields(parameter);</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 如果字段已经有值，则跳过</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field.get(parameter);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(o)) &#123;</span><br><span class="line">          field.setAccessible(<span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据字段名设置不同的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;updateBy&quot;</span>.equals(field.getName())) &#123;</span><br><span class="line">          field.set(parameter, loginId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;updateTime&quot;</span>.equals(field.getName())) &#123;</span><br><span class="line">          field.set(parameter, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 其他字段不处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        field.setAccessible(<span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;dealUpdate.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理INSERT操作的字段替换</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> parameter 参数对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> loginId 登录用户的id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dealInsert</span><span class="params">(Object parameter, String loginId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取所有字段，包括继承的字段</span></span><br><span class="line">    Field[] fields = getAllFields(parameter);</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 如果字段已经有值，则跳过</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field.get(parameter);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(o)) &#123;</span><br><span class="line">          field.setAccessible(<span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据字段名设置不同的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;isDeleted&quot;</span>.equals(field.getName())) &#123;</span><br><span class="line">          field.set(parameter, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;createdBy&quot;</span>.equals(field.getName())) &#123;</span><br><span class="line">          field.set(parameter, loginId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;createdTime&quot;</span>.equals(field.getName())) &#123;</span><br><span class="line">          field.set(parameter, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 其他字段不处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        field.setAccessible(<span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;dealInsert.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归获取对象所有字段，包括父类的字段</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> object 对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 字段数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Field[] getAllFields(Object object) &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    List&lt;Field&gt; fieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 添加当前类的所有字段到列表</span></span><br><span class="line">      fieldList.addAll(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));</span><br><span class="line">      clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转换列表为数组</span></span><br><span class="line">    Field[] fields = <span class="keyword">new</span> <span class="title class_">Field</span>[fieldList.size()];</span><br><span class="line">    fieldList.toArray(fields);</span><br><span class="line">    <span class="keyword">return</span> fields;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MyBatis插件接口方法，实际使用时会增强目标对象</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于接收MyBatis传入的属性，一般不使用</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目排行榜功能设计"><a href="#题目排行榜功能设计" class="headerlink" title="题目排行榜功能设计"></a>题目排行榜功能设计</h3><p>排行榜一般来说实时的，非实时的。</p><p><strong>实时的方案</strong></p><ol><li><strong>数据库统计</strong></li></ol><p>现在数据库里面的 createby 字段。用户的标识是唯一的，那我直接通过 group by 的形式统计 count。</p><p>select count(1),create_by from subject_info group by create_by limit 0,5;</p><p>数据量比较小，并发也比较小。这种方案是 ok 的。保证可以走到索引，返回速度快，不要产生慢 sql。</p><p>在数据库层面加一层缓存，接受一定的延时性。</p><ol start="2"><li><p><strong>redis 的 sorted set</strong></p><p>有序集合，不允许重复的成员，然后每一个 key 都会包含一个 score 分数的概念。redis 根据分数可以帮助我们做从小到大，和从大到小的一个处理。</p><p>有序集合的 key 不可重复，score 重复。</p><p>它通过我们的一个哈希表来实现的，添加，删除，查找，复杂度 o(1) ，最大数量是 2的32 次方-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zadd</span><br><span class="line"></span><br><span class="line">zrange</span><br><span class="line"></span><br><span class="line">zincrby</span><br><span class="line"></span><br><span class="line">zscore</span><br></pre></td></tr></table></figure><p>这种的好处在于，完全不用和数据库做任何的交互，纯纯的通过缓存来做，速度非常快，要避免一些大 key 的问题。</p></li></ol><p><strong>非实时</strong></p><p>定时任务 xxl-job</p><p>统计数据库的数据形式，帮助我们统计完成后，直接写入缓存。缓存的外部的交互展示。</p><h4 id="传统数据库实现排行榜"><a href="#传统数据库实现排行榜" class="headerlink" title="传统数据库实现排行榜"></a>传统数据库实现排行榜</h4><p><code>SubjectController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取题目贡献榜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/getContributeList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;SubjectInfoDTO&gt;&gt; <span class="title function_">getContributeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;SubjectInfoBO&gt; boList = subjectInfoDomainService.getContributeList();</span><br><span class="line">        List&lt;SubjectInfoDTO&gt; dtoList = SubjectInfoDTOConverter.INSTANCE.convertBOToDTOList(boList);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(dtoList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;SubjectCategoryController.getContributeList.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;获取贡献榜失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SubjectDomainInfoServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectInfoBO&gt; <span class="title function_">getContributeList</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;SubjectInfo&gt; subjectInfoList = subjectInfoService.getContributeCount();</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(subjectInfoList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;SubjectInfoBO&gt; boList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    subjectInfoList.forEach((subjectInfo -&gt; &#123;</span><br><span class="line">        <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoBO</span>();</span><br><span class="line">        subjectInfoBO.setSubjectCount(subjectInfo.getSubjectCount());</span><br><span class="line">        <span class="comment">//这里用到了UserRpc</span></span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userRpc.getUserInfo(subjectInfo.getCreatedBy());</span><br><span class="line">        subjectInfoBO.setCreateUser(userInfo.getNickName());</span><br><span class="line">        subjectInfoBO.setCreateUserAvatar(userInfo.getAvatar());</span><br><span class="line">        boList.add(subjectInfoBO);</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">return</span> boList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserRpc.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRpc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignService userFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">getUserInfo</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">AuthUserDTO</span> <span class="variable">authUserDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthUserDTO</span>();</span><br><span class="line">        authUserDTO.setUserName(userName);</span><br><span class="line">        Result&lt;AuthUserDTO&gt; result = userFeignService.getUserInfo(authUserDTO);</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">        <span class="keyword">if</span> (!result.getSuccess()) &#123;</span><br><span class="line">            <span class="keyword">return</span> userInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthUserDTO</span> <span class="variable">data</span> <span class="operator">=</span> result.getData();</span><br><span class="line">        userInfo.setUserName(data.getUserName());</span><br><span class="line">        userInfo.setNickName(data.getNickName());</span><br><span class="line">        <span class="comment">//新增 设置头像</span></span><br><span class="line">        userInfo.setAvatar(data.getAvatar());</span><br><span class="line">        <span class="keyword">return</span> userInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subjectInfoServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectInfo&gt; <span class="title function_">getContributeCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subjectInfoDao.getContributeCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getContributeCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jingdianjichi.subject.infra.basic.entity.SubjectInfo&quot;</span>&gt;</span></span><br><span class="line">    select count(1) as subjectCount,</span><br><span class="line">           created_by as createdBy</span><br><span class="line">    from subject_info</span><br><span class="line">    where is_deleted = 0</span><br><span class="line">    and created_by is not null</span><br><span class="line">    group by created_by</span><br><span class="line">    limit 0,5</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于redis的zset实现排行榜"><a href="#基于redis的zset实现排行榜" class="headerlink" title="基于redis的zset实现排行榜"></a>基于redis的zset实现排行榜</h4><p><code>subject-domain/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>subject-doamin/RedisUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; rankWithScore(String key, <span class="type">long</span> start, <span class="type">long</span> end) &#123;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; set = redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">    <span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuzhijieabc/article/details/123805608?ops_request_misc=%7B%22request_id%22:%22172447209416800188585058%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172447209416800188585058&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123805608-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=reverseRangeWithScores&spm=1018.2226.3001.4187">redis——Zset有序集合之reverseRangeWithScore函数使用_reverserangewithscores-CSDN博客</a></p><p><code>SubjectInfoDomainServiceImpl.java</code></p><p>排行榜接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RANK_KEY</span> <span class="operator">=</span> <span class="string">&quot;subject_rank&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectInfoBO&gt; <span class="title function_">getContributeList</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = redisUtil.rankWithScore(RANK_KEY, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;getContributeList.typedTuples:&#123;&#125;&quot;</span>, JSON.toJSONString(typedTuples));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(typedTuples)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;SubjectInfoBO&gt; boList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    typedTuples.forEach((rank -&gt; &#123;</span><br><span class="line">        <span class="type">SubjectInfoBO</span> <span class="variable">subjectInfoBO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectInfoBO</span>();</span><br><span class="line">        subjectInfoBO.setSubjectCount(rank.getScore().intValue());</span><br><span class="line">        <span class="comment">// 这个是openId</span></span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userRpc.getUserInfo(rank.getValue());</span><br><span class="line">        subjectInfoBO.setCreateUser(userInfo.getNickName());</span><br><span class="line">        subjectInfoBO.setCreateUserAvatar(userInfo.getAvatar());</span><br><span class="line">        boList.add(subjectInfoBO);</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">// 返回一个包含题目信息的list</span></span><br><span class="line">    <span class="keyword">return</span> boList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点赞和收藏"><a href="#点赞和收藏" class="headerlink" title="点赞和收藏"></a>点赞和收藏</h3><h4 id="点赞和收藏功能设计"><a href="#点赞和收藏功能设计" class="headerlink" title="点赞和收藏功能设计"></a>点赞和收藏功能设计</h4><p>点赞与收藏的逻辑是非常一样的，我们这里就选取点赞功能来给大家做开发。</p><p>按照我们的程序员 club 的设计，点赞业务其实涉及几个方面：</p><ul><li>我们肯定要知道一个题目被多少人点过赞</li><li>还要知道，每个人他点赞了哪些题目。</li></ul><p>点赞的业务特性：频繁。用户一多，时时刻刻都在进行点赞啊，收藏啊等等处理，如果说我们采取传统的数据库的模式啊，这个交互量是非常大的，很难去抗住这个并发问题，所以我们采取 redis 的方式来做。</p><p>查询的数据交互，我们可以和 redis 直接来做，持久化的数据，通过数据库查询即可，这个数据如何去同步到数据库，我们就采取的定时任务 xxl-job 定期来刷数据。</p><p><img src="https://s2.loli.net/2024/08/24/IHPpxkGLXu3adjD.png" alt="image-20240824121946908.png"></p><p>记录的时候三个关键信息，点赞的人，被点赞的题目，点赞的状态。</p><p>我们最终的数据结构就是 hash，string 类型。</p><ul><li>hash，存到一个键里面，键里是一个 map，他又分为 hashkey 和 hashval。<ul><li>谁点赞了哪个题目+状态：hashkey，subjectId:userId，val 就存的是点赞的状态 1 是点赞 0 是不点赞。</li><li>点赞数量：string 类型 key subjectId，val 即使我们的题目被点赞的数量。</li><li>有没有点过赞，key存在说明点过（并非记录状态）：key为string 类型， subjectId:userId。</li></ul></li></ul><p><strong>表结构：</strong></p><p><img src="https://s2.loli.net/2024/08/24/IGp3lt4YMgxVOui.png" alt="image-20240824123024005.png"></p><p><strong>新增点赞</strong></p><p>直接操作 redis</p><p>存 hash，存数量，存点赞的人与题目的 key。</p><p><strong>取消点赞</strong></p><p>上面的反逻辑，数量会-1，hash 里面的状态会更新，点赞人与题目关联的 key 会被删除</p><p><strong>查询当前题目被点赞的数量</strong></p><p>直接与 redis 交互，读题目的被点赞数量的 key</p><p><strong>查询当前题目被当前用户是否点过赞</strong></p><p>直接查 redis 就可以了。</p><p><strong>我的点赞</strong></p><p>直接查数据库做分页逻辑的展示。</p><h4 id="点赞功能开发"><a href="#点赞功能开发" class="headerlink" title="点赞功能开发"></a>点赞功能开发</h4><p><code>RedisUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key可以用来区分这些不同的哈希表。hashKey 则是这些哈希表内部的键</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putHash</span><span class="params">(String key, String hashKey, Object hashVal)</span> &#123;</span><br><span class="line">    redisTemplate.opsForHash().put(key, hashKey, hashVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectLikedDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量，用于作为Redis中存储主题点赞信息的哈希表的键</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_LIKED_KEY</span> <span class="operator">=</span> <span class="string">&quot;subject.liked&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义常量，用于作为Redis中存储主题点赞数量的键</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_LIKED_COUNT_KEY</span> <span class="operator">=</span> <span class="string">&quot;subject.liked.count&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义常量，用于作为Redis中存储主题点赞详细信息的键</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECT_LIKED_DETAIL_KEY</span> <span class="operator">=</span> <span class="string">&quot;subject.liked.detail&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加点赞信息到Redis。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subjectLikedBO 包含点赞操作的业务对象，其中包含主题ID、点赞用户ID和状态。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SubjectLikedBO subjectLikedBO)</span> &#123;</span><br><span class="line">    <span class="comment">// 从业务对象中获取主题ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">subjectId</span> <span class="operator">=</span> subjectLikedBO.getSubjectId();</span><br><span class="line">    <span class="comment">// 从业务对象中获取点赞用户的ID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">likeUserId</span> <span class="operator">=</span> subjectLikedBO.getLikeUserId();</span><br><span class="line">    <span class="comment">// 从业务对象中获取点赞状态</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> subjectLikedBO.getStatus();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建用于存储点赞状态的哈希表的字段名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hashKey</span> <span class="operator">=</span> buildSubjectLikedKey(subjectId.toString(), likeUserId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将点赞状态存储到Redis哈希表中</span></span><br><span class="line">    redisUtil.putHash(SUBJECT_LIKED_KEY, hashKey, status);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建存储点赞详细信息的键，格式为 &quot;subject.liked.detail + 主题ID + . + 点赞用户ID&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">detailKey</span> <span class="operator">=</span> SUBJECT_LIKED_DETAIL_KEY + <span class="string">&quot;.&quot;</span> + subjectId + <span class="string">&quot;.&quot;</span> + likeUserId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建存储点赞数量的键，格式为 &quot;subject.liked.count + . + 主题ID&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">countKey</span> <span class="operator">=</span> SUBJECT_LIKED_COUNT_KEY + <span class="string">&quot;.&quot;</span> + subjectId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断点赞状态是否为 &quot;点赞&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (SubjectLikedStatusEnum.LIKED.getCode() == status) &#123;</span><br><span class="line">        <span class="comment">// 如果是点赞，增加点赞数量</span></span><br><span class="line">        redisUtil.increment(countKey, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 存储点赞详细信息，这里假设点赞详细信息只存储为 &quot;1&quot;</span></span><br><span class="line">        redisUtil.set(detailKey, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是点赞状态，执行以下操作</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisUtil.getInt(countKey);</span><br><span class="line">        <span class="comment">// 如果点赞数量为null或小于等于0，则不执行任何操作</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(count) || count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 减少点赞数量</span></span><br><span class="line">        redisUtil.increment(countKey, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 删除点赞详细信息</span></span><br><span class="line">        redisUtil.del(detailKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目详情增加点赞数据"><a href="#题目详情增加点赞数据" class="headerlink" title="题目详情增加点赞数据"></a>题目详情增加点赞数据</h4><p><code>SubjectLikedDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isLiked</span><span class="params">(String subjectId, String userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">detailKey</span> <span class="operator">=</span> SUBJECT_LIKED_DETAIL_KEY + <span class="string">&quot;.&quot;</span> + subjectId + <span class="string">&quot;.&quot;</span> + userId;</span><br><span class="line">        <span class="keyword">return</span> redisUtil.exist(detailKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getLikedCount</span><span class="params">(String subjectId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">countKey</span> <span class="operator">=</span> SUBJECT_LIKED_COUNT_KEY + <span class="string">&quot;.&quot;</span> + subjectId;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisUtil.getInt(countKey);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(count) || count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> redisUtil.getInt(countKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SubjectInfoBO <span class="title function_">querySubjectInfo</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">    <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> subjectInfoService.queryById(subjectInfoBO.getId());</span><br><span class="line">    <span class="type">SubjectTypeHandler</span> <span class="variable">handler</span> <span class="operator">=</span> subjectTypeHandlerFactory.getHandler(subjectInfo.getSubjectType());</span><br><span class="line">    <span class="type">SubjectOptionBO</span> <span class="variable">optionBO</span> <span class="operator">=</span> handler.query(subjectInfo.getId().intValue());</span><br><span class="line">    <span class="type">SubjectInfoBO</span> <span class="variable">bo</span> <span class="operator">=</span> SubjectInfoConverter.INSTANCE.convertOptionAndInfoToBo(optionBO, subjectInfo);</span><br><span class="line">    <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">    subjectMapping.setSubjectId(subjectInfo.getId());</span><br><span class="line">    subjectMapping.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">    List&lt;Long&gt; labelIdList = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">    List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIdList);</span><br><span class="line">    List&lt;String&gt; labelNameList = labelList.stream().map(SubjectLabel::getLabelName).collect(Collectors.toList());</span><br><span class="line">    bo.setLabelName(labelNameList);</span><br><span class="line">    bo.setLiked(subjectLikedDomainService.isLiked(subjectInfoBO.getId().toString(), LoginUtil.getLoginId()));</span><br><span class="line">    bo.setLikedCount(subjectLikedDomainService.getLikedCount(subjectInfoBO.getId().toString()));</span><br><span class="line">    assembleSubjectCursor(subjectInfoBO, bo);</span><br><span class="line">    <span class="keyword">return</span> bo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xxljob定时任务完成"><a href="#xxljob定时任务完成" class="headerlink" title="xxljob定时任务完成"></a>xxljob定时任务完成</h4><p>XXL-JOB 是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><p><img src="https://s2.loli.net/2024/08/24/sb1G3l4E97DJPLQ.png" alt="image-20240824155129452.png"></p><p><a href="https://www.xuxueli.com/xxl-job/">分布式任务调度平台XXL-JOB (xuxueli.com)</a></p><p><strong>特性</strong></p><ul><li>1、简单：支持通过 Web 页面对任务进行 CRUD 操作，操作简单，一分钟上手；</li><li>2、动态：支持动态修改任务状态、启动 &#x2F; 停止任务，以及终止运行中任务，即时生效；</li><li>3、调度中心 HA（中心式）：调度采用中心式设计，“调度中心” 自研调度组件并支持集群部署，可保证调度中心 HA；</li><li>4、执行器 HA（分布式）：任务分布式执行，任务 “执行器” 支持集群部署，可保证任务执行 HA；</li><li>5、注册中心：执行器会周期性自动注册任务，调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li><li>6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li><li>7、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性 HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li><li>8、故障转移：任务路由策略选择 “故障转移” 情况下，如果执行器集群中某一台机器故障，将会自动 Failover 切换到一台正常的执行器发送调度请求。</li><li>9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li><li>10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</li><li>12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</li><li>13、分片广播任务：执行器集群部署时，任务路由策略选择 “分片广播” 情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</li><li>14、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</li><li>15、事件触发：除了 “Cron 方式” 和 “任务依赖方式” 触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的 API 服务，可根据业务事件灵活触发。</li><li>16、任务进度监控：支持实时监控任务进度；</li><li>17、Rolling 实时日志：支持在线查看调度结果，并且支持以 Rolling 方式实时查看执行器输出的完整的执行日志；</li><li>18、GLUE：提供 Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持 30 个版本的历史版本回溯。</li><li>19、脚本任务：支持以 GLUE 模式开发和运行脚本任务，包括 Shell、Python、NodeJS、PHP、PowerShell 等类型脚本；</li><li>20、命令行任务：原生提供通用命令行任务 Handler（Bean 任务，”CommandJobHandler”）；业务方只需要提供命令行即可；</li><li>21、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行，多个子任务用逗号分隔；</li><li>22、一致性：“调度中心” 通过 DB 锁保证集群分布式调度的一致性，一次任务调度只会触发一次执行；</li><li>23、自定义任务参数：支持在线配置调度任务入参，即时生效；</li><li>24、调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；</li><li>25、数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；</li><li>26、邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；</li><li>27、推送 maven 中央仓库：将会把最新稳定版推送到 maven 中央仓库，方便用户接入和使用；</li><li>28、运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；</li><li>29、全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；</li><li>30、跨语言：调度中心与执行器提供语言无关的 RESTful API 服务，第三方任意语言可据此对接调度中心或者实现执行器。除此之外，还提供了 “多任务模式” 和 “httpJobHandler” 等其他跨语言方案；</li><li>31、国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；</li><li>32、容器化：提供官方 docker 镜像，并实时更新推送 dockerhub，进一步实现产品开箱即用；</li><li>33、线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入 “Slow” 线程池，避免耗尽调度线程，提高系统稳定性；</li><li>34、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；</li><li>35、权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作；</li></ul><p>其实把东西配置好就行</p><p><code>subject-starter/application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://127.0.0.1:8080/xxl-job-admin</span> </span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">jc-club-subjcet</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="attr">ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="attr">logpath:</span> <span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p><code>XxlJobConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置执行器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title function_">xxlJobExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">    <span class="type">XxlJobSpringExecutor</span> <span class="variable">xxlJobSpringExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxlJobSpringExecutor</span>();</span><br><span class="line">    xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">    xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">    xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">    xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">    xxlJobSpringExecutor.setPort(port);</span><br><span class="line">    xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">    xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">    xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SyncLikedJob.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncLikedJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SubjectLikedDomainService subjectLikedDomainService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步点赞数据任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(&quot;syncLikedJobHandler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncLikedJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        XxlJobHelper.log(<span class="string">&quot;syncLikedJobHandler.start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subjectLikedDomainService.syncLiked();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            XxlJobHelper.log(<span class="string">&quot;syncLikedJobHandler.error&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectLikedDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncLiked</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//redisUtil.getHashAndDelete(SUBJECT_LIKED_KEY)从Redis中获取键为SUBJECT_LIKED_KEY的哈希表，并在获取后删除此哈希表。</span></span><br><span class="line">    Map&lt;Object, Object&gt; subjectLikedMap = redisUtil.getHashAndDelete(SUBJECT_LIKED_KEY);</span><br><span class="line">    <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;syncLiked.subjectLikedMap:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLikedMap));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (MapUtils.isEmpty(subjectLikedMap)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量同步到数据库</span></span><br><span class="line">    List&lt;SubjectLiked&gt; subjectLikedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    subjectLikedMap.forEach((key, val) -&gt; &#123;</span><br><span class="line">        <span class="type">SubjectLiked</span> <span class="variable">subjectLiked</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectLiked</span>();</span><br><span class="line">        String[] keyArr = key.toString().split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">subjectId</span> <span class="operator">=</span> keyArr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">likedUser</span> <span class="operator">=</span> keyArr[<span class="number">1</span>];</span><br><span class="line">        subjectLiked.setSubjectId(Long.valueOf(subjectId));</span><br><span class="line">        subjectLiked.setLikeUserId(likedUser);</span><br><span class="line">        subjectLiked.setStatus(Integer.valueOf(val.toString()));</span><br><span class="line">        subjectLiked.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">        subjectLikedList.add(subjectLiked);</span><br><span class="line">    &#125;);</span><br><span class="line">    subjectLikedService.batchInsertOrUpdate(subjectLikedList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectLikedServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchInsertOrUpdate</span><span class="params">(List&lt;SubjectLiked&gt; subjectLikedList)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subjectLikedDao.batchInsertOrUpdate(subjectLikedList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RedisUtil.java</code></p><ol><li><strong>定义Map</strong>：创建一个新的<code>HashMap</code>实例，用于存储从Redis中获取的键值对。</li><li><strong>使用Cursor遍历哈希表</strong>：通过调用<code>redisTemplate.opsForHash().scan(key, ScanOptions.NONE)</code>获取一个<code>Cursor</code>，它可以用来遍历Redis哈希表中的所有条目。<code>ScanOptions.NONE</code>表示不使用任何扫描选项。</li><li><strong>遍历Cursor</strong>：使用<code>while</code>循环遍历<code>Cursor</code>，直到没有更多的条目。</li><li><strong>获取条目</strong>：在循环内部，使用<code>cursor.next()</code>获取当前的条目，它是一个<code>Map.Entry</code>对象。</li><li><strong>提取键和值</strong>：从<code>Map.Entry</code>对象中提取键（<code>hashKey</code>）和值（<code>value</code>）。</li><li><strong>将键值对放入Map</strong>：使用<code>map.put(hashKey, value)</code>将提取的键和值放入之前创建的Map中。</li><li><strong>删除哈希表中的条目</strong>：使用<code>redisTemplate.opsForHash().delete(key, hashKey)</code>从Redis的哈希表中删除当前遍历到的键值对。</li><li><strong>返回Map</strong>：遍历完成后，返回包含所有键值对的Map。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">getHashAndDelete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = redisTemplate.opsForHash().scan(key, ScanOptions.NONE);</span><br><span class="line">    <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;Object, Object&gt; entry = cursor.next();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">hashKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        map.put(hashKey, value);</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我的点赞功能开发"><a href="#我的点赞功能开发" class="headerlink" title="我的点赞功能开发"></a>我的点赞功能开发</h4><p><code>SubjectLikedController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询我的点赞列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/getSubjectLikedPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&lt;SubjectLikedDTO&gt;&gt; <span class="title function_">getSubjectLikedPage</span><span class="params">(<span class="meta">@RequestBody</span> SubjectLikedDTO subjectLikedDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SubjectController.getSubjectLikedPage.dto:&#123;&#125;&quot;</span>, JSON.toJSONString(subjectLikedDTO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SubjectLikedBO</span> <span class="variable">subjectLikedBO</span> <span class="operator">=</span> SubjectLikedDTOConverter.INSTANCE.convertDTOToBO(subjectLikedDTO);</span><br><span class="line">        subjectLikedBO.setPageNo(subjectLikedDTO.getPageNo());</span><br><span class="line">        subjectLikedBO.setPageSize(subjectLikedDTO.getPageSize());</span><br><span class="line">        PageResult&lt;SubjectLikedBO&gt; boPageResult = subjectLikedDomainService.getSubjectLikedPage(subjectLikedBO);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(boPageResult);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;SubjectCategoryController.getSubjectLikedPage.error:&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;分页查询我的点赞失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectLikedDomainServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult&lt;SubjectLikedBO&gt; <span class="title function_">getSubjectLikedPage</span><span class="params">(SubjectLikedBO subjectLikedBO)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个分页结果对象</span></span><br><span class="line">    PageResult&lt;SubjectLikedBO&gt; pageResult = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置当前页码和每页显示的记录数</span></span><br><span class="line">    pageResult.setPageNo(subjectLikedBO.getPageNo());</span><br><span class="line">    pageResult.setPageSize(subjectLikedBO.getPageSize());</span><br><span class="line">    <span class="comment">// 计算查询的起始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (subjectLikedBO.getPageNo() - <span class="number">1</span>) * subjectLikedBO.getPageSize();</span><br><span class="line">    <span class="comment">// 将BO对象转换为Entity对象</span></span><br><span class="line">    <span class="type">SubjectLiked</span> <span class="variable">subjectLiked</span> <span class="operator">=</span> SubjectLikedBOConverter.INSTANCE.convertBOToEntity(subjectLikedBO);</span><br><span class="line">    <span class="comment">// 设置点赞用户的ID为当前登录用户的ID</span></span><br><span class="line">    subjectLiked.setLikeUserId(LoginUtil.getLoginId());</span><br><span class="line">    <span class="comment">// 执行条件查询，获取点赞记录的总数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subjectLikedService.countByCondition(subjectLiked);</span><br><span class="line">    <span class="comment">// 如果没有记录，则直接返回空的分页结果</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行分页查询，获取点赞记录的列表</span></span><br><span class="line">    List&lt;SubjectLiked&gt; subjectLikedList = subjectLikedService.queryPage(subjectLiked, start,</span><br><span class="line">            subjectLikedBO.getPageSize());</span><br><span class="line">    <span class="comment">// 将Entity列表转换为BO列表</span></span><br><span class="line">    List&lt;SubjectLikedBO&gt; subjectInfoBOS = SubjectLikedBOConverter.INSTANCE.convertListInfoToBO(subjectLikedList);</span><br><span class="line">    <span class="comment">// 遍历BO列表，为每个点赞记录添加主题名称</span></span><br><span class="line">    subjectInfoBOS.forEach(info -&gt; &#123;</span><br><span class="line">        <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> subjectInfoService.queryById(info.getSubjectId());</span><br><span class="line">        info.setSubjectName(subjectInfo.getSubjectName());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 设置分页结果中的记录列表和总数</span></span><br><span class="line">    pageResult.setRecords(subjectInfoBOS);</span><br><span class="line">    pageResult.setTotal(count);</span><br><span class="line">    <span class="comment">// 返回分页结果对象</span></span><br><span class="line">    <span class="keyword">return</span> pageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectLikedServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countByCondition</span><span class="params">(SubjectLiked subjectLiked)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subjectLikedDao.countByCondition(subjectLiked);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SubjectLiked&gt; <span class="title function_">queryPage</span><span class="params">(SubjectLiked subjectLiked, <span class="type">int</span> start, Integer pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subjectLikedDao.queryPage(subjectLiked, start, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速刷题功能开发"><a href="#快速刷题功能开发" class="headerlink" title="快速刷题功能开发"></a>快速刷题功能开发</h4><p><code>SubjectInfoDTO.java</code></p><p>新增字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下一题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long nextSubjectId;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上一题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long lastSubjectId;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDomainService.java</code></p><p><strong>这段代码的主要逻辑是：</strong></p><ol><li>根据题目ID查询题目实体。</li><li>根据题目类型获取相应的处理器，并使用它查询题目选项信息。</li><li>将题目选项和题目信息转换为业务对象BO。</li><li>查询题目的标签ID列表，并批量查询标签列表。</li><li>提取标签名称并设置到业务对象BO中。</li><li>设置是否已点赞的状态和点赞数量。</li><li>组装题目的上下文信息，包括上一个和下一个题目的ID。</li><li>返回封装好的业务对象BO。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SubjectInfoBO <span class="title function_">querySubjectInfo</span><span class="params">(SubjectInfoBO subjectInfoBO)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据题目信息BO中的ID查询题目实体</span></span><br><span class="line">    <span class="type">SubjectInfo</span> <span class="variable">subjectInfo</span> <span class="operator">=</span> subjectInfoService.queryById(subjectInfoBO.getId());</span><br><span class="line">    <span class="comment">// 根据题目类型获取相应的处理器</span></span><br><span class="line">    <span class="type">SubjectTypeHandler</span> <span class="variable">handler</span> <span class="operator">=</span> subjectTypeHandlerFactory.getHandler(subjectInfo.getSubjectType());</span><br><span class="line">    <span class="comment">// 使用处理器查询题目选项信息</span></span><br><span class="line">    <span class="type">SubjectOptionBO</span> <span class="variable">optionBO</span> <span class="operator">=</span> handler.query(subjectInfo.getId().intValue());</span><br><span class="line">    <span class="comment">// 将题目选项和题目信息转换为业务对象BO</span></span><br><span class="line">    <span class="type">SubjectInfoBO</span> <span class="variable">bo</span> <span class="operator">=</span> SubjectInfoConverter.INSTANCE.convertOptionAndInfoToBo(optionBO, subjectInfo);</span><br><span class="line">    <span class="comment">// 创建题目映射对象，设置题目ID和未删除标志</span></span><br><span class="line">    <span class="type">SubjectMapping</span> <span class="variable">subjectMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectMapping</span>();</span><br><span class="line">    subjectMapping.setSubjectId(subjectInfo.getId());</span><br><span class="line">    subjectMapping.setIsDeleted(IsDeletedFlagEnum.UN_DELETED.getCode());</span><br><span class="line">    <span class="comment">// 查询题目标签ID列表</span></span><br><span class="line">    List&lt;SubjectMapping&gt; mappingList = subjectMappingService.queryLabelId(subjectMapping);</span><br><span class="line">    <span class="comment">// 从映射列表中提取标签ID</span></span><br><span class="line">    List&lt;Long&gt; labelIdList = mappingList.stream().map(SubjectMapping::getLabelId).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 批量查询标签列表</span></span><br><span class="line">    List&lt;SubjectLabel&gt; labelList = subjectLabelService.batchQueryById(labelIdList);</span><br><span class="line">    <span class="comment">// 从标签列表中提取标签名称</span></span><br><span class="line">    List&lt;String&gt; labelNameList = labelList.stream().map(SubjectLabel::getLabelName).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 设置标签名称到业务对象BO中</span></span><br><span class="line">    bo.setLabelName(labelNameList);</span><br><span class="line">    <span class="comment">// 设置是否已点赞的状态</span></span><br><span class="line">    bo.setLiked(subjectLikedDomainService.isLiked(subjectInfoBO.getId().toString(), LoginUtil.getLoginId()));</span><br><span class="line">    <span class="comment">// 设置点赞数量</span></span><br><span class="line">    bo.setLikedCount(subjectLikedDomainService.getLikedCount(subjectInfoBO.getId().toString()));</span><br><span class="line">    <span class="comment">// 组装题目的上下文信息，如上一个和下一个题目的ID</span></span><br><span class="line">    assembleSubjectCursor(subjectInfoBO, bo);</span><br><span class="line">    <span class="comment">// 返回封装好的业务对象BO</span></span><br><span class="line">    <span class="keyword">return</span> bo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有方法，用于组装题目的上下文信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assembleSubjectCursor</span><span class="params">(SubjectInfoBO subjectInfoBO, SubjectInfoBO bo)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取分类ID、标签ID和题目ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> subjectInfoBO.getCategoryId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">labelId</span> <span class="operator">=</span> subjectInfoBO.getLabelId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">subjectId</span> <span class="operator">=</span> subjectInfoBO.getId();</span><br><span class="line">    <span class="comment">// 如果分类ID或标签ID为空，则不进行上下文信息的组装</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(categoryId) || Objects.isNull(labelId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询下一个题目的ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">nextSubjectId</span> <span class="operator">=</span> subjectInfoService.querySubjectIdCursor(subjectId, categoryId, labelId, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 设置下一个题目的ID到业务对象BO中</span></span><br><span class="line">    bo.setNextSubjectId(nextSubjectId);</span><br><span class="line">    <span class="comment">// 查询上一个题目的ID</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">lastSubjectId</span> <span class="operator">=</span> subjectInfoService.querySubjectIdCursor(subjectId, categoryId, labelId, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 设置上一个题目的ID到业务对象BO中</span></span><br><span class="line">    bo.setLastSubjectId(lastSubjectId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubjectInfoDao.xml</code></p><p><code>querySubjectIdCursor</code>对应的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySubjectIdCursor&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">    select a.id</span><br><span class="line">    from subject_info a,</span><br><span class="line">    subject_mapping b</span><br><span class="line">    where a.id = b.subject_id</span><br><span class="line">    and b.category_id = #&#123;categoryId&#125;</span><br><span class="line">    and b.label_id = #&#123;labelId&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cursor !=null and cursor == 1&quot;</span>&gt;</span></span><br><span class="line">        and a.id &gt; #&#123;subjectId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cursor !=null and cursor == 0&quot;</span>&gt;</span></span><br><span class="line">        and a.id <span class="symbol">&amp;lt;</span> #&#123;subjectId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    limit 0,1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust异步编程</title>
      <link href="/2024/07/09/2024-07-09-Rust%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/07/09/2024-07-09-Rust%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust异步编程"><a href="#Rust异步编程" class="headerlink" title="Rust异步编程"></a>Rust异步编程</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">handles</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">for</span> <span class="variable">index</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">100</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = tokio::<span class="title function_ invoke__">spawn</span>(</span><br><span class="line">        async_http_client.<span class="title function_ invoke__">get</span>(<span class="built_in">format!</span>(<span class="string">&quot;www.example.com/items/&#123;&#125;&quot;</span>, index))</span><br><span class="line">    );</span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(handle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> handles &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = handle.<span class="keyword">await</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比较使用异步编写的示例与同步编写的相同示例 - 对于大量并发 Web 请求，异步版本比同步请求快约 60%</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础学习</title>
      <link href="/2024/07/08/2024-07-08-Rust%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/08/2024-07-08-Rust%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust基础学习"><a href="#Rust基础学习" class="headerlink" title="Rust基础学习"></a>Rust基础学习</h1><p><a href="https://www.rust-lang.org/learn">Learn Rust - Rust Programming Language (rust-lang.org)</a></p><p><a href="https://blog.csdn.net/weixin_47754149/article/details/125701852?ops_request_misc=%7B%22request_id%22:%22172041285316800211535314%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172041285316800211535314&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125701852-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Rust&spm=1018.2226.3001.4187">【一起学Rust】Rust介绍与开发环境搭建_rust开发-CSDN博客</a></p><p>包管理工具：cargo</p><p>命令行：</p><blockquote><p>cargo new [name]：创建一个新的Rust项目<br>cargo build：构建项目<br>cargo run：运行项目<br>cargo test：运行测试<br>cargo doc：生成文档<br>cargo update：更新依赖项<br>cargo clean：清除构建输出<br>cargo publish：将软件包发布到crates.io上<br>cargo install [package]: 安装指定软件包<br>cargo uninstall [package]: 卸载指定软件包</p></blockquote><p><a href="https://blog.csdn.net/qq_36678837/article/details/131371856?ops_request_misc=%7B%22request_id%22:%22172041285316800211535314%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172041285316800211535314&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-131371856-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Rust&spm=1018.2226.3001.4187">Rust 全面指南：从基础到高级，一网打尽 Rust 的编程知识_rust语言-CSDN博客</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量可以使用let关键字，例如：</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">10</span>; <span class="comment">//会被自动推断为i32类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i32</span> = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//上述默认为不可变变量,若要可变变量需要加入mut关键字</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">z</span>=<span class="number">30</span>;</span><br><span class="line">z=<span class="number">40</span>;</span><br><span class="line"><span class="comment">//const关键字用于代表这是一个常亮，不能与mut关键字连用</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>关键字<br>Rust 语言有一组保留的 关键字（keywords），就像大部分语言一样，它们只能由语言本身使用。记住，你不能使用这些关键字作为变量或函数的名称。大部分关键字有特殊的意义，你将在 Rust 程序中使用它们完成各种任务；一些关键字目前没有相应的功能，是为将来可能添加的功能保留的。可以在附录 A 中找到关键字的列表。</p><p>目前正在使用的关键字<br>如下关键字目前有对应其描述的功能。</p><p>as - 强制类型转换，消除特定包含项的 trait 的歧义，或者对 use 语句中的项重命名<br>async - 返回一个 Future 而不是阻塞当前线程<br>await - 暂停执行直到 Future 的结果就绪<br>break - 立刻退出循环<br>const - 定义常量或不变裸指针（constant raw pointer）<br>continue - 继续进入下一次循环迭代<br>crate - 在模块路径中，代指 crate root<br>dyn - 动态分发 trait 对象<br>else - 作为 if 和 if let 控制流结构的 fallback<br>enum - 定义一个枚举<br>extern - 链接一个外部函数或变量<br>false - 布尔字面值 false<br>fn - 定义一个函数或 函数指针类型 (function pointer type)<br>for - 遍历一个迭代器或实现一个 trait 或者指定一个更高级的生命周期<br>if - 基于条件表达式的结果分支<br>impl - 实现自有或 trait 功能<br>in - for 循环语法的一部分<br>let - 绑定一个变量<br>loop - 无条件循环<br>match - 模式匹配<br>mod - 定义一个模块<br>move - 使闭包获取其所捕获项的所有权<br>mut - 表示引用、裸指针或模式绑定的可变性<br>pub - 表示结构体字段、impl 块或模块的公有可见性<br>ref - 通过引用绑定<br>return - 从函数中返回<br>Self - 定义或实现 trait 的类型的类型别名<br>self - 表示方法本身或当前模块<br>static - 表示全局变量或在整个程序执行期间保持其生命周期<br>struct - 定义一个结构体<br>super - 表示当前模块的父模块<br>trait - 定义一个 trait<br>true - 布尔字面值 true<br>type - 定义一个类型别名或关联类型<br>union - 定义一个 union 并且是 union 声明中唯一用到的关键字<br>unsafe - 表示不安全的代码、函数、trait 或实现<br>use - 引入外部空间的符号<br>where - 表示一个约束类型的从句<br>while - 基于一个表达式的结果判断是否进行循环</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>由大括号控制</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="https://s2.loli.net/2024/07/08/3jEMuSxnkrgJ8bF.png" alt="image-20240708124030796.png"></p><p>元组(tuple)和数组(array)</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span>=(<span class="number">100</span>,<span class="string">&#x27;余&#x27;</span>,<span class="literal">true</span>,<span class="number">10.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元组是以<code>()</code>表示的，里面放入各个元素，且各个元素之间用<code>,</code>分隔</p><p>由于rust可以自动推导出其类型，所以这里没有手动为其标注类型：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span>:(<span class="type">i32</span>,<span class="type">char</span>,<span class="type">bool</span>,<span class="type">f64</span>)=(<span class="number">100</span>,<span class="string">&#x27;余&#x27;</span>,<span class="literal">true</span>,<span class="number">10.1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>,tup.<span class="number">0</span>,)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是手动标注类型</p><p>还有数组也很常用，它的使用方法与元组还是有点差距的，其中最大的差别就是，数组中的所有元素的类型必须相同（而上面提到的元组各个元素类型可以不同）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>,arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>],arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>分为String（可变）和&amp;str（不可变）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world!&quot;</span>);</span><br><span class="line"><span class="comment">//&amp;str</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line"><span class="comment">//转化</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = s.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">s2.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world!&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="可变数组Vec"><a href="#可变数组Vec" class="headerlink" title="可变数组Vec"></a>可变数组Vec</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>(); <span class="comment">// 创建一个空向量(由于是可变的，要使用mut关键字)</span></span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">1</span>); <span class="comment">// 向向量中添加元素</span></span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="title function_ invoke__">pop</span>();<span class="comment">//向量中弹出元素</span></span><br><span class="line"><span class="comment">//insert,remove</span></span><br></pre></td></tr></table></figure><h3 id="Rust-HashTable-Map"><a href="#Rust-HashTable-Map" class="headerlink" title="Rust HashTable(Map)"></a>Rust HashTable(Map)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="comment">//insert</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scores</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Alice&quot;</span>), <span class="number">100</span>); <span class="comment">//这里应该是将字符串字面量转化为String类</span></span><br><span class="line">scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Bob&quot;</span>), <span class="number">90</span>);</span><br><span class="line"><span class="comment">//get</span></span><br><span class="line">scores.<span class="title function_ invoke__">get</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="comment">//有序的map是BTreeMap，要求KEY类型是可以排序的</span></span><br></pre></td></tr></table></figure><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if else</span></span><br><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// code block to execute if the condition is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// code block to execute if the condition is false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a&gt;0&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>  a==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a==0&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a&lt;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//match</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//枚举</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">        Up,</span><br><span class="line">        Down,</span><br><span class="line">        Left,</span><br><span class="line">        Right,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">direction</span> = Direction::Up;</span><br><span class="line">    <span class="keyword">match</span> direction &#123;</span><br><span class="line">        Direction::Up =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You chose up&quot;</span>), <span class="comment">//在使用match语句的时候，对于每一种不同的情况进行匹配，如果匹配成功了之后，就执行这个=&gt;符号后面所对应的那些代码</span></span><br><span class="line">        Direction::Down =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You chose down&quot;</span>),</span><br><span class="line">        Direction::Left =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You chose left&quot;</span>),</span><br><span class="line">        Direction::Right =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You chose right&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//while</span></span><br><span class="line"><span class="keyword">while</span> condition &#123;</span><br><span class="line">    <span class="comment">// code block to execute while the condition is true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">variable</span> <span class="keyword">in</span> iterable &#123;</span><br><span class="line">    <span class="comment">// code block to execute for each value in the iterable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">10</span>..<span class="number">20</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*通过语法 10..20就可以自动生成一个10到20的范围对象，</span></span><br><span class="line"><span class="comment">并将该对象中的值，依次赋值给for后面的变量名i，</span></span><br><span class="line"><span class="comment">注意范围运算符 ..生成的范围对象是左闭右开的，</span></span><br><span class="line"><span class="comment">具体来说，10..20 ，i只会等于10到19</span></span><br><span class="line"><span class="comment">但是，10..=20则是10到20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//loop</span></span><br><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">// code block to execute repeatedly until break is called</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/07/09/QTcfLK5GWydksaY.png" alt="image-20240709125242057.png"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>一个最简单的函数长下面这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">simple</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过关键字<code>fn</code>加一个函数名字，<code>()</code>与<code>&#123;&#125;</code>组成，除此之外什么都没有，同样，它也不能做任何事。</p><p>为了能让这个函数干一些事情，我们就需要在函数体，也就是<code>&#123;&#125;</code>中写一些代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">simple</span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;代码&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但只是这样还不够，在没有任何输入的情况下，这个函数能做的事情基本就写死了：无论任何地方调用它，其结果都是一样的（调用随机数除外）。</p><p>所以我们就需要函数参数，也就是从函数外部传入的变量，可以让函数内部来使用，参数写在<code>()</code>中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">simple</span>(i:<span class="type">i32</span>,c:<span class="type">char</span>,f:<span class="type">f64</span>,b:<span class="type">bool</span>)&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>,i,c,f,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带有返回值的例子</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">sum</span>(a:<span class="type">i32</span>,b:<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>&#123; <span class="comment">//-&gt;返回值类型</span></span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>=<span class="title function_ invoke__">sum</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a+b=&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><a href="https://blog.csdn.net/weixin_44786530/article/details/136432672?ops_request_misc=&request_id=&biz_id=102&utm_term=rust%E5%85%B3%E8%81%94%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-136432672.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">Rust结构体讲解学习，以及impl结构体方法和结构体关联函数_rust struct impl-CSDN博客</a></p><p>Rust 里 struct 语句仅用来定义，不能声明实例，结尾不需要 ; 符号，而且每个字段定义之后用 , 分隔。</p><p>结构中也没有方法，要有方法只能用impl去实现方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u32</span> = <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">person</span> = Person &#123;</span><br><span class="line">    name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Alice&quot;</span>),</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//访问字段 </span></span><br><span class="line">person.name</span><br><span class="line"><span class="comment">//单元结构体:结构体可以只作为一种象征而无需任何成员：</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UnitStruct</span>;</span><br></pre></td></tr></table></figure><h4 id="结构体方法"><a href="#结构体方法" class="headerlink" title="结构体方法"></a>结构体方法</h4><p>方法（Method）和函数（Function）类似，只不过它是用来操作结构体实例的。</p><p>如果你学习过一些面向对象的语言，那你一定很清楚函数一般放在类定义里并在函数中用 this 表示所操作的实例。</p><p>Rust 语言不是面向对象的，从它所有权机制的创新可以看出这一点。但是面向对象的珍贵思想可以在 Rust 实现。</p><p><strong>结构体方法的第一个参数必须是 &amp;self，不需声明类型，因为 self 不是一种风格而是关键字</strong>。</p><p>在调用结构体方法的时候不需要填写 self ，这是出于对使用方便性的考虑:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算一个矩形的面积：</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;; <span class="comment">//创建实例</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect1&#x27;s area is &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">area</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体关联函数"><a href="#结构体关联函数" class="headerlink" title="结构体关联函数"></a>结构体关联函数</h4><p>之所以”结构体方法”不叫”结构体函数”是因为”函数”这个名字留给了这种函数：它在 impl 块中却没有 &amp;self 参数。</p><p>这种函数不依赖实例，但是使用它需要声明是在哪个 impl 块中的。</p><p>一直使用的 String::from 函数就是一个”关联函数”。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">create</span>(width: <span class="type">u32</span>, height: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle &#123; </span><br><span class="line">        Rectangle &#123; width, height &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect</span> = Rectangle::<span class="title function_ invoke__">create</span>(<span class="number">30</span>, <span class="number">50</span>); <span class="comment">//调用的时候::</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, rect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><a href="https://blog.csdn.net/qq_21484461/article/details/131544273?ops_request_misc=%7B%22request_id%22:%22172183648416800180669591%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172183648416800180669591&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-131544273-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rust%E6%9E%9A%E4%B8%BE&spm=1018.2226.3001.4187">【Rust 基础篇】Rust 枚举类型_rust enum-CSDN博客</a></p><h3 id="接口（Trait）"><a href="#接口（Trait）" class="headerlink" title="接口（Trait）"></a>接口（Trait）</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Fly</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>); <span class="comment">//这个方法接收一个self参数，表示对实现这个trait的类型的引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bird</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Fly</span> <span class="keyword">for</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fly</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;I can fly!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">bird</span> = Bird&#123;&#125;;</span><br><span class="line">bird.<span class="title function_ invoke__">fly</span>();</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Rust的注解是以#字符开头的特殊注释，可以为代码提供更多的语义信息或者修改编译器的行为。Rust注解通常放在代码的上方，用于注释某些特定的语法结构或者代码块。下面是一些常用的Rust注解：</p><ol><li>#[derive(Debug)]：这个注解用于标记一个结构体或者枚举，让编译器自动生成Debug trait的实现。这样，在调试时，我们可以使用{:?}格式化输出结构体或者枚举的内容，方便快捷。</li><li>#[test]：这个注解用于标记一个测试函数，表示它是一个单元测试。测试框架可以通过这个注解自动识别测试函数并执行测试，方便我们编写和运行测试代码。</li><li>#[allow(unused_variables)]：这个注解用于关闭编译器的未使用变量警告。如果我们定义了一个变量但是并没有使用它，编译器会发出警告，这个注解可以帮助我们屏蔽这个警告。</li><li>#[cfg(target_os &#x3D; “windows”)]：这个注解用于根据不同的操作系统编译不同的代码。如果我们的代码需要在不同的操作系统上运行，就可以使用这个注解来指定特定的编译条件。</li><li>#[no_mangle]：这个注解用于防止Rust编译器对函数名进行重命名，保留原始名称。如果我们的代码需要和其他语言交互，就需要使用这个注解来保证函数名的一致性。</li></ol><p>总之，Rust注解可以提供额外的信息，帮助编译器和开发者更好地理解和处理代码，同时也可以修改编译器的行为，以满足特定的需求。</p><p>Rust允许开发者自定义注解（Attribute），可以通过宏定义的方式实现。自定义注解可以为代码提供更多的语义信息，也可以修改编译器的行为，方便我们编写高效、优雅的代码。</p><p>自定义注解的语法格式如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[my_attribute(arg1, arg2, ...)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">my_function</span>() &#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="meta">#[my_attribute(<span class="string">&quot;hello&quot;</span>, 42)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">my_function</span>() &#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">&#125;</span><br><span class="line">定义了一个名为my_attribute的注解，它带有两个参数：一个字符串<span class="string">&quot;hello&quot;</span>和一个整数<span class="number">42</span>。我们可以在函数内部使用这个注解，例如对函数进行标记，表示它是一个特定类型的函数。</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Rust的模块系统是基于文件系统的组织方式。每个Rust文件都可以被视为一个模块，模块名与文件名相同。在一个模块中，可以使用<code>mod</code>关键字定义子模块，使用<code>use</code>关键字引用其他模块中的定义。</p><p>例如，假设有如下结构的文件系统：</p><blockquote><p>src&#x2F;<br>├── main.rs<br>└── my_module&#x2F;<br>    ├── mod.rs<br>    ├── sub_module.rs<br>    └── my_struct.rs</p></blockquote><p>在上述结构中，src目录是Rust项目的根目录，main.rs是项目的入口文件。my_module目录是一个模块，其下有三个文件：</p><p>mod.rs：定义了my_module模块的<strong>公共接口</strong>。</p><p>sub_module.rs：定义了my_module模块的<strong>子模块</strong>sub_module。</p><p>my_struct.rs：定义了my_module模块的一个<strong>结构体</strong>MyStruct。</p><p>在<code>mod.rs</code>中，可以使用mod关键字定义子模块，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> sub_module;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> field: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">my_function</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello from my_function!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述代码中，定义了一个名为<code>MyStruct</code>的结构体，还有一个名为<code>my_function</code>的函数。同时，使用<code>mod</code>关键字定义了一个名为<code>sub_module</code>的子模块。</p><p>在<code>sub_module.rs</code>中，可以定义子模块<code>sub_module</code>中的内容，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">sub_function</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello from sub_function!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，定义了一个名为<code>sub_function</code>的函数。</p><p>在使用<code>my_module</code>模块中的定义时，需要使用use关键字引用它们，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::my_module::&#123;MyStruct, my_function&#125;;</span><br><span class="line"><span class="keyword">use</span> crate::my_module::sub_module::sub_function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_struct</span> = MyStruct &#123; field: <span class="number">42</span> &#125;;</span><br><span class="line">    <span class="title function_ invoke__">my_function</span>();</span><br><span class="line">    <span class="title function_ invoke__">sub_function</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，使用use关键字引用了MyStruct和my_function，以及sub_function。然后，可以在main函数中使用这些定义。</p><h3 id="Rust-Cargo-toml"><a href="#Rust-Cargo-toml" class="headerlink" title="Rust Cargo.toml"></a>Rust Cargo.toml</h3><p>Rust使用 Cargo.toml 文件描述项目的元数据和依赖关系。下面是对 Cargo.toml 文件的详细讲解。</p><p>Cargo.toml 文件是一个 TOML（Tom’s Obvious, Minimal Language，即Tom的简洁明了语言）格式的文件，用于描述 Rust 项目的<strong>元数据和依赖关系</strong>。它通常位于项目的根目录下，与 src&#x2F; 目录同级。</p><p>下面是一个示例：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;myproject&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Your Name &lt;you@example.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rand</span> = <span class="string">&quot;0.7.0&quot;</span></span><br><span class="line"><span class="attr">serde</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;mylib&quot;</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">&quot;src/mylib.rs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[bin]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;mybin&quot;</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">&quot;src/mybin.rs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[bin]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;myotherbin&quot;</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">&quot;src/myotherbin.rs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[features]</span></span><br><span class="line"><span class="attr">default</span> = [<span class="string">&quot;myfeature1&quot;</span>]</span><br><span class="line"><span class="attr">myfeature1</span> = []</span><br><span class="line"><span class="attr">myfeature2</span> = []</span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies.mydependency]</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">features</span> = [<span class="string">&quot;myfeature1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[workspace]</span></span><br><span class="line"><span class="attr">members</span> = [</span><br><span class="line">    <span class="string">&quot;mylib&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mybin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;myotherbin&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>[package]</code> 表示包的元数据，包括包名、版本号、作者和 Rust 版本等信息。<code>[dependencies]</code> 表示包的依赖项，<code>[lib]</code> 表示库的配置，<code>[[bin]]</code> 表示可执行文件的配置，<code>[features]</code> 表示特性的配置，<code>[dependencies.mydependency]</code> 表示依赖的配置，<code>[workspace]</code> 表示工作空间的配置。</p><p>引入单个本地模块的方法是，在项目根目录下创建一个名为 <code>src/</code> 的文件夹，然后在该文件夹下创建 Rust 模块，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mymodule.rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">myfunction</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，在 <code>main.rs</code>（或其他程序入口文件）中引入该模块：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> mymodule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    mymodule::<span class="title function_ invoke__">myfunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引入多个本地模块也是类似的。假设在 src&#x2F; 目录下还有一个名为 myothermodule.rs 的 Rust 模块，可以这样写：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> mymodule;</span><br><span class="line"><span class="keyword">mod</span> myothermodule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    mymodule::<span class="title function_ invoke__">myfunction</span>();</span><br><span class="line">    myothermodule::<span class="title function_ invoke__">myotherfunction</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="的用法"><a href="#的用法" class="headerlink" title="::的用法"></a>::的用法</h3><p>在<a href="https://www.baidu.com/s?word=Rust&sa=re_dqa_zy">Rust</a>中，双冒号有几种用途，主要涉及到模块、类型、枚举变体或<a href="https://www.baidu.com/s?word=trait&sa=re_dqa_zy">trait</a>实现的引用。</p><ol><li><p><strong>模块和类型的引用</strong>：<code>::</code>用于引用模块中的类型或函数。例如，<code>String::from(&quot;hello&quot;)</code>表示调用<code>String</code>类型中的<code>from</code>静态方法，用于创建一个新的字符串。</p></li><li><p><strong>枚举变体的引用</strong>：当需要引用枚举的某个变体时，也可以使用<code>::</code>。例如，如果有一个枚举<code>Color</code>，其中包含<code>Red</code>和<code>Green</code>两个变体，那么可以通过<code>Color::Red</code>和<code>Color::Green</code>来引用这些变体。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Hello</span>(<span class="type">String</span>),</span><br><span class="line">    Goodbye</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">hello</span>(message: Message) &#123;</span><br><span class="line">    <span class="keyword">match</span> message &#123;</span><br><span class="line">        Message::<span class="title function_ invoke__">Hello</span>(s) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;&quot;</span>, s),</span><br><span class="line">        Message::Goodbye =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Goodbye!&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Trait实现的引用</strong>：在Rust中，Trait可以定义一组方法，这些方法可以由实现该Trait的类型提供具体实现。使用<code>::</code>可以明确指定某个类型实现了某个Trait的具体方法。例如，如果有一个Trait <code>Greeter</code>，并且有一个类型<code>Person</code>实现了这个Trait，那么可以通过<code>Person::greet(&amp;person)</code>来调用这个方法，尽管这通常与具体的实例无关，更常见的是使用动态调度（如<code>g.greet()</code>），但在某些情况下，如需要明确类型和方法的关系时，这种语法是有用的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">greet</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Greeter</span> <span class="keyword">for</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">greet</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Hello from Person!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">use_greeter</span>(g: &amp;<span class="keyword">dyn</span> Greeter) &#123;</span><br><span class="line">    g.<span class="title function_ invoke__">greet</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">person</span> = Person;</span><br><span class="line">    <span class="title function_ invoke__">use_greeter</span>(&amp;person <span class="keyword">as</span> &amp;<span class="keyword">dyn</span> Greeter); <span class="comment">// 使用 as 关键字和 &amp;dyn 来创建一个 trait 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在泛型实例化中指定类型参数</strong>：当你要创建一个泛型类型的实例并明确指定其类型参数时，可以使用 <code>::&lt;T&gt;</code>。这在你不想依赖类型推断，或者类型推断不能正确工作时特别有用。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vec</span> = <span class="type">Vec</span>::&lt;<span class="type">i32</span>&gt;::<span class="title function_ invoke__">new</span>(); <span class="comment">// 创建一个包含 i32 类型元素的 Vec 实例</span></span><br></pre></td></tr></table></figure></li><li><p><strong>明确指定作用域</strong>：在某些情况下，<code>::</code>也用于明确指定作用域，尤其是在处理与命名空间相关的问题时。这有助于编译器理解你的意图，避免名称冲突。</p><p>例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_something</span>() &#123;</span><br><span class="line">    io::<span class="built_in">println!</span>(<span class="string">&quot;Hello from io!&quot;</span>); <span class="comment">// 使用 std::io 模块中的 println 函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="self和Self"><a href="#self和Self" class="headerlink" title="self和Self"></a>self和Self</h3><p><strong>self</strong></p><p>self 是一个代表<strong>类型实例（或者是类型的引用或者是值）</strong>的关键字，在 Rust 的方法中使用 self 可以引用当前类型的实例或者类型本身。</p><p>具体来说，当我们定义一个方法时，使用 self 关键字作为方法的第一个参数可以让我们在调用该方法时直接访问类型实例本身</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">f32</span>,</span><br><span class="line">    y: <span class="type">f32</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">distance</span>(&amp;<span class="keyword">self</span>, other: &amp;Point) <span class="punctuation">-&gt;</span> <span class="type">f32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">dx</span> = <span class="keyword">self</span>.x - other.x;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">dy</span> = <span class="keyword">self</span>.y - other.y;</span><br><span class="line">        (dx * dx + dy * dy).<span class="title function_ invoke__">sqrt</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h3><p>通常在 Rust 的 trait 和 associated function 中使用 Self 来指代实现该 trait 或调用该 associated function 的类型。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">f32</span>,</span><br><span class="line">    y: <span class="type">f32</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">//关联函数</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">origin</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        Point &#123; x: <span class="number">0.0</span>, y: <span class="number">0.0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point::<span class="title function_ invoke__">origin</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p><a href="https://blog.csdn.net/u014388408/article/details/134141656?ops_request_misc=%7B%22request_id%22:%22172183502916800227449484%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172183502916800227449484&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-134141656-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rust%E6%89%80%E6%9C%89%E6%9D%83&spm=1018.2226.3001.4187">Rust核心功能之一（所有权）_rust 所有权-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_21484461/article/details/131446498?ops_request_misc=%7B%22request_id%22:%22172183502916800227449484%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172183502916800227449484&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-131446498-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rust%E6%89%80%E6%9C%89%E6%9D%83&spm=1018.2226.3001.4187">【Rust 基础篇】Rust 所有权详解_rust所有权和内存分析图解-CSDN博客</a></p><h2 id="引用和借用"><a href="#引用和借用" class="headerlink" title="引用和借用"></a>引用和借用</h2><p><a href="https://blog.csdn.net/jiang1126/article/details/137867763?ops_request_misc=&request_id=&biz_id=102&utm_term=rust%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-137867763.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">Rust - 引用和借用_rust 借用和引用-CSDN博客</a></p><h2 id="切片和数组"><a href="#切片和数组" class="headerlink" title="切片和数组"></a>切片和数组</h2><p><a href="https://blog.csdn.net/z974656361/article/details/107596501?ops_request_misc=%7B%22request_id%22:%22172183623316800178526100%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172183623316800178526100&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-107596501-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=rust%E5%88%87%E7%89%87%E5%92%8C%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187">rust中的数组和切片_rust 数组切片-CSDN博客</a></p><h2 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h2><p>Rust常用库<br>好的，以下是一些常用的 Rust 库及其常用方法的举例：</p><ol><li>std 库<ul><li>println!(): 打印输出信息到控制台</li><li>Vec<T>: 动态数组类型</li><li>String: 可变字符串类型</li><li>HashMap&lt;K, V&gt;: 哈希表类型</li></ul></li><li>serde 库<ul><li>serde_json::to_string(): 将 Rust 结构体序列化为 JSON 字符串</li><li>serde_json::from_str(): 将 JSON 字符串反序列化为 Rust 结构体</li><li>serde_yaml::to_string(): 将 Rust 结构体序列化为 YAML 字符串</li><li>serde_yaml::from_str(): 将 YAML 字符串反序列化为 Rust 结构体</li></ul></li><li>actix 库<ul><li>actix_web::get(): 注册一个 GET 请求处理器</li><li>actix_web::post(): 注册一个 POST 请求处理器</li><li>actix_web::web::Json<T>: 解析请求体中的 JSON 数据</li></ul></li><li>tokio 库<ul><li>tokio::net::TcpListener: 创建一个 TCP 监听器</li><li>tokio::net::TcpStream: 创建一个 TCP 连接</li><li>tokio::spawn(): 在异步任务池中启动一个新的异步任务</li></ul></li><li>reqwest 库<ul><li>reqwest::get(): 发送一个 GET 请求</li><li>reqwest::post(): 发送一个 POST 请求</li><li>reqwest::Client::new(): 创建一个 HTTP 客户端对象</li></ul></li><li>rusoto 库<ul><li>rusoto_s3::S3Client::new(): 创建一个 AWS S3 客户端对象</li><li>rusoto_ec2::Ec2Client::new(): 创建一个 AWS EC2 客户端对象</li><li>rusoto_lambda::LambdaClient::new(): 创建一个 AWS Lambda 客户端对象</li></ul></li><li>diesel 库<ul><li>diesel::prelude::*: 导入 Diesel 的预定义类型和函数</li><li>diesel::insert_into(): 插入一条新的记录</li><li>diesel::load(): 加载一组记录</li></ul></li><li>log 库<ul><li>log::info(): 记录一条信息级别的日志</li><li>log::error(): 记录一条错误级别的日志</li><li>log::warn(): 记录一条警告级别的日志</li></ul></li><li>rand 库<ul><li>rand::thread_rng(): 创建一个随机数生成器对象</li><li>rand::Rng::gen_range(): 生成一个指定范围内的随机数</li><li>rand::Rng::shuffle(): 随机打乱一个数组</li></ul></li><li>image 库<ul><li>image::open(): 打开一个图像文件</li><li>image::save(): 保存一个图像文件</li><li>image::DynamicImage::resize(): 调整图像尺寸大小</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.824 Lecture2-RPC and Threads</title>
      <link href="/2024/07/03/MIT-6.824-Lecture2-RPC-and-Threads/"/>
      <url>/2024/07/03/MIT-6.824-Lecture2-RPC-and-Threads/</url>
      
        <content type="html"><![CDATA[<h3 id="Lecture2-RPC-and-Threads"><a href="#Lecture2-RPC-and-Threads" class="headerlink" title="Lecture2-RPC and Threads"></a>Lecture2-RPC and Threads</h3><h4 id="2-1-GO语言"><a href="#2-1-GO语言" class="headerlink" title="2.1 GO语言"></a>2.1 GO语言</h4><p>❓ why we use go in this class</p><p>1️⃣ go提供类许多便捷的工具，如threads、锁以及线程间同步。此外，还有RPC包也十分重要。</p><p>2️⃣ go是type safe 以及memory safe的，其垃圾回收机制（garbage collected）十分有效</p><p>3️⃣ threads + GC 是十分具有吸引力的</p><h4 id="2-2-threads"><a href="#2-2-threads" class="headerlink" title="2.2 threads"></a>2.2 threads</h4><h5 id="2-2-1-为什么要关注多线程"><a href="#2-2-1-为什么要关注多线程" class="headerlink" title="2.2.1 为什么要关注多线程"></a>2.2.1 为什么要关注多线程</h5><p>📖 多线程是在本课程中实现并发的一个重要工具，在分布式系统中，并发十分有趣。比较常见的情况是：一个程序需要同时和多台计算机（a bunch of other computers）通信，客户端可能会同时和多台服务器通信，一台服务器可能会同时响应来自不同客户端的多条请求。假如我的程序同时有 7 件不同的事情在进行，我想要一种简单的方式实现它能同时做 7 件不同的事情，多线程就能很好的解决它。</p><p>在 Go 的文档中，它把线程称为 goroutine，goroutine 真的很像大家所说的线程。</p><h5 id="2-2-2-如何理解多线程"><a href="#2-2-2-如何理解多线程" class="headerlink" title="2.2.2 如何理解多线程"></a>2.2.2 如何理解多线程</h5><p>假设有一个程序，用一个小盒子表示地址空间，在这个地址空间里，串行执行的程序（serial program）是没有多个线程的，你只有一个线程。它在这个地址空间中执行代码，它只有一个程序计数器（PC），只有一套寄存器(register），一个栈（stack)，这些东西就能描述当前的执行状态。</p><p>在一个多线程程序中，比方说 Go 程序，你可以拥有多个线程，如果这些线程同时执行，那它们就分别有一个属于自己的程序计数器，一套寄存器和一个栈，每个线程都有自己的一套线程控制，他们可以在程序中不同的部分执行每个线程。需要注意的是，每一个独立的线程都有一个栈，这些栈都在程序中的同一个地址空间中，知道地址的话不同的线程之间是可以互相访问他们的栈的。</p><p>多线程的一个重要作用就是允许程序中不同的部分都能独立的执行不同的动作。</p><p>并发的关键是你有处理多个任务的能力，不一定要同时。</p><p>并行的关键是你有同时处理多个任务的能力。</p><p>2.2.3 使用多线程的原因</p><p><strong>I&#x2F;O Concurrency——I&#x2F;O并发</strong><br>IO并发：一个线程正在等待从磁盘上读数据，当它在等待的时候，你又想要另一个线程，可能用来做计算或是从某个磁盘的地方读取数据或是向网络发送一条消息并等待回复，所以 IO 并发是使用多线程的地方之一。</p><p>比如说，我们有一个程序，已经启动并且通过 RPC 请求网络上不同的服务器，然后同时在等待多个回复。具体做法是，需要为每个 RPC 调用创建一个线程，每个线程都会通过 RPC 发送 request 消息，然后等待。当响应回复时，这个线程将会继续执行，使用多线程可以让我们同时发起多个网络请求，所有线程都会等待回复，也不是非得在同一时间去发请求，只要它愿意，这些线程总可以做不同的事情。</p><p>不同 IO 并发活动（activity）可能会有互相重叠（overlapping）的部分，也允许一个活动正在等待，另一个活动可以继续执行</p><p><strong>Parallelism——并行化</strong><br>使用<strong>多线程的</strong>另一个重要原因是<strong>多核并行</strong>（multi-core parallelism），我们想通过线程来达到并行化的目的。并行化就是如果你有个多核机器，如果你有一个计算繁重的工作，它需要消耗许多 CPU 时钟周期（CPU cycles），这是一件不太好的事情。假设你的程序能使用机器上所有的 CPU 核，比方说它是用 Go 写的多线程程序，你启动了多个 goroutine，这些 goroutine 执行一些计算密集型的任务，比如一直在那执行一个循环，计算 pi（圆周率)的值，直到达到机器上 cpu 核的极限，你的线程将会真正的以并行的方式运行。<strong>如果你启动 2 个线程代替 1 个线程，你就能获得 2 倍的性能，就能使用 2 倍数量的 CPU 时钟周期</strong></p><p>在本次课程中，我们不会把过多的精力放在此类并行化上。所以并行化是使用多线程的第二个原因</p><p><strong>Convenience——易用性</strong><br>有时候你只是想在后台做一些事情，比如你就想周期性的去执行它，但你又不愿意在主线程插入一些检查。比如有一个 master 服务需要周期性的检查它的 worker 服务是否一直存活，因为这些 worker 之一宕机的话，就需要把工作扔到另一台机器上去执行，就像 MapReduce 那样。你可以每秒、每分钟通过发送一条“你还活着吗？”这样的消息到 worker 服务上，你能启动一个 goroutine，然后执行一个死循环，sleep 1 秒后，然后做需要周期执行的动作，然后又 sleep 1 秒。</p><p>❓ <strong>开启goroutine的开销大吗</strong></p><p>📖 这个开销是值得的，而且这种开销非常少，取决于创建的线程的多少。但是，这种方法可以节省非常多的时间</p><p>❓ <strong>不使用多线程如何追踪不同活动的状态</strong></p><p>📖 使用另一种风格——<strong>异步编程</strong>（asynchronous programing），也称为<strong>事件驱动编程</strong>（event-driven programming）。</p><p>事件驱动编程的一般结构，通常它有一个线程，同时有一个循环，这个循环等待输入或者是其它任何事件，这些事件能触发程序继续进行，事件可能是一个来自客户端的请求，可能是定时器到期。如果你在编写windows 系统程序，你电脑上的许多 windows 系统程序都是通过事件驱动的风格来编写的，它们等待的东西是像键盘击键或者是鼠标移动这样的事件。因此你可能会有一个单一的只有一个控制线程的程序，这个线程有一个循环一直等待输入，无论何时有输入进来，比如收到报文，它能够找出来是哪个客户端发送的这个报文。它有一张表格记录这个客户端到底处于什么样的活动状态。</p><p><strong>使用线程的话通常会变的更加方便</strong>，因为线程能让你更容易把把程序写的连贯有序。在事件驱动循环里，你一次只能执行一个活动，这种编程模式的问题在于它实现起来有点痛苦，另一个潜在的缺陷在于当你用这种方法获取了 IO 并发后你就没法利用 CPU 的并行化机制。</p><p>所以当你写一个负载很高的服务，你得<strong>想方设法</strong>把一台大型机器的 32 核都用上，使用一个单一循环的话，它相当的不自然，也很难获得多核的性能。另一方面，冒这样的风险编程通常换来的性能提升相比多线程来说并不会太多。</p><p>而且线程相对来说也很廉价，<strong>每个线程都有一个栈</strong>，栈通常是 1kb 或数千字节，如果你有 20 个线程，这些消耗根本不用在意。但是你若有 100 万个线程，那它就会消耗大量的内存。</p><p>另外，线程调度，它是指下一步应该选择哪个线程运行，通常有一个调度列表，上面记录了 1000 个线程，这时候切换线程执行将付出相当昂贵的代价。</p><p>所以，当你只有一个服务器的时候，你的服务器需要为 100 万个客户端提供服务，你需要为这 100 万个客户端记录一些状态，这个代价还是挺高的。如果使用事件驱动编程，花点时间的话，应该容易写一个简单的而又五脏俱全高性能的服务，就是你需要多做点工作。</p><p>[(288条消息) 解读I&#x2F;O多路复用及其技术，让你彻底了解I&#x2F;O多路复用(内含图形讲解)【建议新手收藏】_Linux情报站的博客-CSDN博客](<a href="https://blog.csdn.net/m0_50662680/article/details/111273308?ops_request_misc=%7B%22request_id%22:%22166315159916782390556461%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166315159916782390556461&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-1-111273308-null-null.142%5Ev47%5Epc_rank_34_ctr25,201%5Ev3%5Eadd_ask&utm_term=%E5%BC%82%E6%AD%A5">https://blog.csdn.net/m0_50662680/article/details/111273308?ops_request_misc=%7B%22request%5Fid%22%3A%22166315159916782390556461%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=166315159916782390556461&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-1-111273308-null-null.142^v47^pc_rank_34_ctr25,201^v3^add_ask&amp;utm_term=异步</a> 多路复用 图解&amp;spm&#x3D;1018.2226.3001.4187)</p><p>❓ <strong>多线程(threads)和多进程(processes)的区别</strong></p><p>📖 通常，对于类 UNIX 系统的机器来说，一个进程就<strong>是一个单独运行的程序，只有一个地址空间</strong>，<strong>一大片可供进程使用的内存</strong>，在这个进程里你可能同时会有好多个线程。当你准备好一个 go 程序并运行，将会创建一个 unix 进程和一块内存区，<strong>当你的 Go 进程创建 goroutine 时，它们实际上都是在同一个进程里</strong>的。</p><p>实际上这也取决于操作系统的实现，确实有个别或一些操作系统，并不关心你的进程内部到底发生了什么事情，也不关心你使用什么语言，不关心操作系统内部的业务逻辑，在进程内部能运行多个线程就行了。</p><p>如果在你的机器上运行了不止一个进程，比如一个编辑器或是编译器，操作系统需要让它们彼此分开，<strong>你的编辑器和你的编译器都有自己的内存空间，他们之间无法看到彼此的内存，不同的进程之间不会有交集</strong>。你的编辑器可能有多个线程，你的编译器也可能有多个线程，但是他们都处于各自的世界<strong>。但是</strong>在同一个进程中，线程与线程之间可以共享内存，可以使用 channel(Go语言中的概念) 进行同步，也可以使用 mutex 等。但进程之间是没有交集的，这类软件的传统结构就是这样。</p><p>❓ <strong>当上下文切换时，是所有线程都在切换吗</strong>(when a context switch happens does it happened for all threads)</p><p>你只有一个单核机器，这意味着在同一个时刻你只能做一件事情。你打算在你的机器上运行多进程，操作系统把 CPU 时间片反复的分配给这两个程序，当硬件时钟到期时，操作系统就判断是时候把 CPU 从当前正在运行的进程剥夺，然后把 CPU 分配给另一个进程，这件事件是在进程级别上做的。</p><p>我们<strong>使用的线程</strong>最终<strong>是由是操作系统线程所提供的</strong>，当<strong>操作系统上下文切换时，就是不同的线程之间产生切换</strong>时，操作系统是知道这一切的，所以操作系统可能会清楚这儿有两个线程在这个进程中，有三个线程在那个进程，当时钟到期时操作系统会基于一些调度算法选择一个不同的线程来运行。在这个进程中的线程和另一进程中的线程可能是不同的，另外，<strong>Go 会聪明复用一个操作系统线程，在上面运行尽可能多的 goroutine 以节省开支</strong>，所以这可能需要两个阶段去调度。</p><p>首先操作系统选择一个线程去运行，然后在这个进程中，Go 会再去选择哪个 goroutine 去运行。</p><h5 id="2-2-4-sharing-memory——共享内存"><a href="#2-2-4-sharing-memory——共享内存" class="headerlink" title="2.2.4 sharing memory——共享内存"></a>2.2.4 <strong>sharing memory——共享内存</strong></h5><p>事实上写多线程程序是有些挑战的，其中一个是<strong>共享数据</strong>，关于线程模型，酷的地方在于这些<strong>线程共享地址空间</strong>，<strong>共享内存</strong>，如果某个线程在内存中创建了一个对象，在其它线程中你也能使用它。你可以创建个数组或是别的什么东西，所有不同的线程都能读写。这就存在一些临界情况，如果你持有一些你关注的状态，可能你会缓存一些数据：你的 server，你的缓存，你的内存。当其中一个线程正处理一个客户端的请求的时候，首先它会先查一下缓存中的数据，但是这个共享缓存，每个线程都能读。当线程里有新的信息时，线程可能会向缓存里写入数据进行更新。</p><p>但是事实也表明如果你不关心多线程之间共享内存的话，很容易出现bug。</p><p>问题举例<br>假设你有一个全局变量 N 在不同的线程之间共享，其中一个线程只是对 N 做自增，这可能就是造成 bug 的原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n=n+1</span><br></pre></td></tr></table></figure><p>在同一时刻，总有其它的线程可能也正在查看，所以这里有个很明显的问题。<strong>线程 1 正在执行</strong>，但是另一个<strong>不同的线程 2</strong> 也在执行相同的代码， N 是一个全局变量，所以这里我们说的这个 N 都是同一个 N。</p><p>实际上机器运行的并不是这样的代码，而是由编译器吐出来的机器码（machine code）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LD  X , register1</span><br><span class="line">ADD 1 , register1</span><br><span class="line">STORE register1 , X</span><br></pre></td></tr></table></figure><p>你可以假设所有的线程都在执行这行代码，他们都会执行加载 x 到寄存器，x 从 0 开始有效，这意味着，所有线程都把 0 读入寄存器，然后他们都给寄存器加 1，这样所有线程各有自的寄存器的值是 1，最后再把寄存器的值 1 重新保存到内存里，现在，这两个线程对 N 做自增后，结果都是 1，但是碰巧这样写并不正确，碰巧程序想要的结果不是 1。</p><p>❓ <strong>指令的原子性</strong></p><p>这些独立的指令是不是原子的（atomic），答案是有些是，有些不是，对于 <strong>32 位的 store 指令它极有可能是原子的</strong>，从某种意义上来说，如果有两个处理器，最终要么是其中一个处理器上的 32 位值，要么是另一个处理器上的 32 位值，而不是一个混合的值。其它尺寸大小的未必就这么简单，比如一个字节的存储这依赖于你所使用的 CPU。这依赖于处理器和更复杂的指令。</p><p>比如微处理器上的自增指令，它能直接给内存上某个地址的值加 1，未必就是原子的，尽管这些指令存在原子版本的。</p><p>所以这是一个非常经典的错误，通常我们叫他<strong>“竞争”（race）</strong>，后面我打算会多次提起。称为 race 是因为如果一个 CPU 已经开始执行这段代码，另一些线程正在结束这段代码，这就是 race，第一个处理器能够在第二个处理器开始执行 load 前执行 store，如果第一个处理器的 store(寄存器中的数据存入内存)确实是在第二个处理器 load （内存放入寄存器）之前，那么第二个处理器就能看到第一个处理器存储的值，第二个处理器将 load 值 1，然后再加 1，再把 2 存入。</p><p>解决这个问题的方式很简单，加个锁就行了，只有在持有锁的时候，这个共享数据才能被使用，Go 调用 Lock 来锁住 mutex，你能看到 mu.Lock()加在这一段使用共享数据的代码前面，然后在结束的地方调用 mu.Unlock()。无论哪个线程执行到这里，只有足够幸运的那个线程才能第一个抢到锁，然后执行所有这些代码，在结束之前，另一个线程都不能继续，你可以考虑把这些在锁中间的代码封装起来。</p><p>❓ <strong>Go是如何知道我们正在锁住哪些变量</strong></p><p>答案是 go 并不知道，在这个锁里的任何位置他们一点关联都没有。所以，这里新的东西是这个变量(mu)，它是个 mutex，在 lock 和任何变量之间他们并没有什么关联。</p><h5 id="2-2-5-Coordination——协作"><a href="#2-2-5-Coordination——协作" class="headerlink" title="2.2.5 Coordination——协作"></a><strong>2.2.5 Coordination——协作</strong></h5><p>协作与指导线程运作有关，当我们正在执行涉及到多线程情况下的加锁时，可能并不知道其它线程也在加锁，他们只是想在没有人干涉的情况下拿到数据。但也有一些情况你确实就是故意的想让不同的线程之间互相受到制约，比如你生产某些数据，但是你又和我不是同一个线程，我想在你生产完数据前一直等待，直到你完成后，我再去读取。或者是你启动了一堆线程去抓取 web 页面，然后需要等待所有线程都执行结束。</p><p>所以当我们想<strong>特意的互相等待的时候，这种情况通常就称为 coordination (协作)。</strong>Go 中有很多技术可以做到，比如 channel (通道)，channel 是一种用于发数据从这个线程到另一个线程的工具。</p><p>也有一些其它工具用于特殊的目的，比如有个东西叫 condition variables (条件变量)，还有WaitGroup。</p><h5 id="2-2-6-Deadlock——死锁"><a href="#2-2-6-Deadlock——死锁" class="headerlink" title="2.2.6 Deadlock——死锁"></a><strong>2.2.6 Deadlock——死锁</strong></h5><p>死锁Deadlock：计算机系统中多道程序并发执行时，两个或两个以上的进程由于竞争资源而造成的一种互相等待的现象（僵局），如无外力作用，这些进程将永远不能再向前推进。</p><p>四个条件同时出现，死锁将会发生</p><p>1️⃣ Mutual exclusion互斥：一次只有一个进程可以使用一个资源</p><p>2️⃣ Hold and wait占有并等待：一个进程应该占有至少一个资源，并等待另一个资源，而该资源被另一个进程所占有</p><p>3️⃣ No preemption不可抢占：一个资源只有当持有它的进程完成任务后自由的释放</p><p>4️⃣ Circular wait循环等待：等待资源的进程之间存在环</p><h5 id="2-2-7-Web爬虫"><a href="#2-2-7-Web爬虫" class="headerlink" title="2.2.7 Web爬虫"></a>2.2.7 Web爬虫</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Several solutions to the crawler exercise from the Go tutorial</span><br><span class="line">// https://tour.golang.org/concurrency/10</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Serial crawler</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">func Serial(url string, fetcher Fetcher, fetched map[string]bool) &#123;</span><br><span class="line">if fetched[url] &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">fetched[url] = true</span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">for _, u := range urls &#123;</span><br><span class="line">Serial(u, fetcher, fetched)</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Concurrent crawler with shared state and Mutex</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">type fetchState struct &#123;</span><br><span class="line">mu      sync.Mutex</span><br><span class="line">fetched map[string]bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ConcurrentMutex(url string, fetcher Fetcher, f *fetchState) &#123;</span><br><span class="line">f.mu.Lock()</span><br><span class="line">already := f.fetched[url]</span><br><span class="line">f.fetched[url] = true</span><br><span class="line">f.mu.Unlock()</span><br><span class="line"></span><br><span class="line">if already &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">var done sync.WaitGroup</span><br><span class="line">for _, u := range urls &#123;</span><br><span class="line">done.Add(1)</span><br><span class="line">    u2 := u</span><br><span class="line">go func() &#123;</span><br><span class="line">defer done.Done()</span><br><span class="line">ConcurrentMutex(u2, fetcher, f)</span><br><span class="line">&#125;()</span><br><span class="line">//go func(u string) &#123;</span><br><span class="line">//defer done.Done()</span><br><span class="line">//ConcurrentMutex(u, fetcher, f)</span><br><span class="line">//&#125;(u)</span><br><span class="line">&#125;</span><br><span class="line">done.Wait()</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func makeState() *fetchState &#123;</span><br><span class="line">f := &amp;fetchState&#123;&#125;</span><br><span class="line">f.fetched = make(map[string]bool)</span><br><span class="line">return f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Concurrent crawler with channels</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">func worker(url string, ch chan []string, fetcher Fetcher) &#123;</span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">ch &lt;- []string&#123;&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ch &lt;- urls</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func master(ch chan []string, fetcher Fetcher) &#123;</span><br><span class="line">n := 1</span><br><span class="line">fetched := make(map[string]bool)</span><br><span class="line">for urls := range ch &#123;</span><br><span class="line">for _, u := range urls &#123;</span><br><span class="line">if fetched[u] == false &#123;</span><br><span class="line">fetched[u] = true</span><br><span class="line">n += 1</span><br><span class="line">go worker(u, ch, fetcher)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n -= 1</span><br><span class="line">if n == 0 &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ConcurrentChannel(url string, fetcher Fetcher) &#123;</span><br><span class="line">ch := make(chan []string)</span><br><span class="line">go func() &#123;</span><br><span class="line">ch &lt;- []string&#123;url&#125;</span><br><span class="line">&#125;()</span><br><span class="line">master(ch, fetcher)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// main</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Printf(&quot;=== Serial===\n&quot;)</span><br><span class="line">Serial(&quot;http://golang.org/&quot;, fetcher, make(map[string]bool))</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;=== ConcurrentMutex ===\n&quot;)</span><br><span class="line">ConcurrentMutex(&quot;http://golang.org/&quot;, fetcher, makeState())</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;=== ConcurrentChannel ===\n&quot;)</span><br><span class="line">ConcurrentChannel(&quot;http://golang.org/&quot;, fetcher)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// Fetcher</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">type Fetcher interface &#123;</span><br><span class="line">// Fetch returns a slice of URLs found on the page.</span><br><span class="line">Fetch(url string) (urls []string, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// fakeFetcher is Fetcher that returns canned results.</span><br><span class="line">type fakeFetcher map[string]*fakeResult</span><br><span class="line"></span><br><span class="line">type fakeResult struct &#123;</span><br><span class="line">body string</span><br><span class="line">urls []string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f fakeFetcher) Fetch(url string) ([]string, error) &#123;</span><br><span class="line">if res, ok := f[url]; ok &#123;</span><br><span class="line">fmt.Printf(&quot;found:   %s\n&quot;, url)</span><br><span class="line">return res.urls, nil</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;missing: %s\n&quot;, url)</span><br><span class="line">return nil, fmt.Errorf(&quot;not found: %s&quot;, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// fetcher is a populated fakeFetcher.</span><br><span class="line">var fetcher = fakeFetcher&#123;</span><br><span class="line">&quot;http://golang.org/&quot;: &amp;fakeResult&#123;</span><br><span class="line">&quot;The Go Programming Language&quot;,</span><br><span class="line">[]string&#123;</span><br><span class="line">&quot;http://golang.org/pkg/&quot;,</span><br><span class="line">&quot;http://golang.org/cmd/&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;http://golang.org/pkg/&quot;: &amp;fakeResult&#123;</span><br><span class="line">&quot;Packages&quot;,</span><br><span class="line">[]string&#123;</span><br><span class="line">&quot;http://golang.org/&quot;,</span><br><span class="line">&quot;http://golang.org/cmd/&quot;,</span><br><span class="line">&quot;http://golang.org/pkg/fmt/&quot;,</span><br><span class="line">&quot;http://golang.org/pkg/os/&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;http://golang.org/pkg/fmt/&quot;: &amp;fakeResult&#123;</span><br><span class="line">&quot;Package fmt&quot;,</span><br><span class="line">[]string&#123;</span><br><span class="line">&quot;http://golang.org/&quot;,</span><br><span class="line">&quot;http://golang.org/pkg/&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;http://golang.org/pkg/os/&quot;: &amp;fakeResult&#123;</span><br><span class="line">&quot;Package os&quot;,</span><br><span class="line">[]string&#123;</span><br><span class="line">&quot;http://golang.org/&quot;,</span><br><span class="line">&quot;http://golang.org/pkg/&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个使用多线程的例子，有三种不同风格的方案。</p><p>爬虫就是你给它一个 URL 让它开始运行。在 web 页面里，包含有许多链接指向了其它的页面，所以 web 爬虫要做的就是把这些链接指向的页面提取出来，抓取这些页面后再检查所有这些页面里的 url，然后继续抓取这些 url 指向的页面，它应该要能够停止——比如直到 web 中所有的页面被抓取完。</p><p>另外网页构成的 graph 和 URL 存在环，稍不注意可能就会陷入永无止境的爬取。所以爬虫的工作之一就是需要<strong>记住它抓取过的页面</strong>，或是已经开始抓取的页面，对于任何正在抓取中的页面都不应该有第二次抓取。</p><p>它是一个树结构，这个树结构是一个包含了环的实际网页 graph 的子集，我们想避开环，不想抓取同一个页面 2 次，另外，实践证明抓取一个 web 页面需要花点时间，但是因为网络有较长的延迟服务器又很慢，所以你完全不会想一次只抓取一个页面。</p><p>你需要使用并行化的方式持续的增加抓取页面的数量，直到达到呑吐极限，也就是每秒你抓取的页面数量不再增加为止，也就是并发数的增加耗尽了网络带宽。所以，我们希望利用并行化的方式抓取。</p><p>最后一个挑战有时候也是最难解决的问题，当爬虫运行结束，一旦我们已经抓取了所有的页面，就需要停止爬虫。什么时候结束被证明是最难的一部分。</p><p>串行化风格<br>所以我的第一个爬虫是一个串行化的爬虫，上面这段代码是可以用的，这个串行爬虫在网页 graph 中进行深度优先搜索，它会使用一个 map 类型的变量 fetched ，它只是被当作一个 set 使用来记住它所抓取过的页面。在 18 行你给它一个 URL，如果这个 URL 已经被抓取过它就直接 return，如果没有被抓取过，首先它要把这个 URL 记下，然后开始抓取，fetcher 会真正开始抓取页面，然后提取页面中的 URL，接下来迭代所有的 URL，递归的调用它自己，对于所有的页面，它会把这些页面传递给自己。它只有一个表格，一个 fetched map，当我调用递归的抓取的时候，它又抓取了很多页面。，在抓取实例之外，需要意识到某些页面是已经抓取过的，所以我们十分依赖于在函数里传递的 fetched 对象。map 使用引用而不是拷贝，所以在底层go 把指向map对象的指针传递给每个crawl函数调用，因此这些调用共享同一个对象和内存的指针，而不是（对象）的拷贝。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func Serial(url string, fetcher Fetcher, fetched map[string]bool) &#123;</span><br><span class="line">if fetched[url] &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">fetched[url] = true</span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">for _, u := range urls &#123;</span><br><span class="line">Serial(u, fetcher, fetched)</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>并发风格——共享数据与互斥</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Concurrent crawler with shared state and Mutex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fetchState <span class="keyword">struct</span> &#123;</span><br><span class="line">mu      sync.Mutex</span><br><span class="line">fetched <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcurrentMutex</span><span class="params">(url <span class="type">string</span>, fetcher Fetcher, f *fetchState)</span></span> &#123;</span><br><span class="line">f.mu.Lock()</span><br><span class="line">already := f.fetched[url]</span><br><span class="line">f.fetched[url] = <span class="literal">true</span></span><br><span class="line">f.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> already &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> done sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">done.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> done.Done()</span><br><span class="line">ConcurrentMutex(u, fetcher, f)</span><br><span class="line">&#125;(u)</span><br><span class="line">&#125;</span><br><span class="line">done.Wait()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeState</span><span class="params">()</span></span> *fetchState &#123;</span><br><span class="line">f := &amp;fetchState&#123;&#125;</span><br><span class="line">f.fetched = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码明显比Serial crawler要复杂的多，它为每个fetch创建一个thread，最大的不同之处在于它做了两件事：一是必要的统计以注意到所有爬取完成的时刻，它也会处理共享表格，这个表格记录了已爬取的URL，所以这段代码仍然有URL表格即 f.fetched，这个表格被所有的crawler线程共享，所有的crawler线程执行在函数 ConcurrentMutex 内 ，所以我们仍然有 ConcurrentMutex 的树结构来探索 web graph 的不同部分。但它们中的每一个是被放在各自的goroutine中启动，而不是作为函数调用，它们都共享一个状态表记录已爬取URL的表格，因为如果有个goroutine爬取了一个URL，我们不希望另一个goroutine意外地爬取同一个URL ，11行和14行之间加上了互斥锁，用于防止race。</p><p>当我们检查表中的URL条目之后，在20行URL被以常见的方式爬取urls, err :&#x3D; fetcher.Fetch(url)。之后另一个有趣的事情是线程的启动。在第25行 ，遍历fetch函数返回的URLsfor _, u :&#x3D; range urls。第27行，对每个URL启动一个goroutinego func(u string) 。func语法是一个闭包（closure）或一个匿名函数，func关键字声明了一个函数然后我们调用了这个函数。理解（这段代码）的方式是你把一个函数声明成一段数据 先写下func关键字，然后给出函数参数，之后写出函数体 结束，现在这是一个对象 。为了让它成为一个goroutine，我们要在func前加上go关键字，然后我们必须要调用这个函数，因为在go语法中go关键字后面接函数名以及要传递的参数。第24行的<strong>WaitGroup</strong> 是go语言定义的一个数据结构，用于帮助coordination。WaitGroup内部有一个计数器，调用WaitGroup.Add()来增加计数器，调用WaitGroup.Done()来减小计数器。第32行，Wait方法被调用，等待计数器归零，因此WaitGroup是一种用于等待若干事件结束的方式，它在很多不同场景中都有应用，这里我们应用它来等待最后一个goroutine结束，因为我们对于每个goroutine都对WaitGroup加一。</p><p>❓ 如果某个子程序(subroutine)失败导致done没被调用该怎么办</p><p>有些方式可以使function失败，goroutine死掉而整个程序不死，这对我们是个麻烦。所以实际上 正确的方式是defer done.Done()，以确保不论goroutine是怎么结束的，done都会被调用。</p><p>❓ 为什么两个不同threads对done的调用不构成race</p><p>（WaitGroup）内部有互斥锁或类似的机制，每个done的方法会在执行任何指令前先取得锁，于是同时调用WaitGroup的方法并不构成race</p><p>非常难搞清楚你是不有一个race，你可能会有一段代码看起来非常合理，但实际上有某些你未知的race 是使用共享变量导致的 ，在实践中唯一能发现race的方法是使用自动化的工具。幸运的是go给我们提供了一个很不错的race探测器，go run -race crawler.go。你应该使用它。如果你把 -race 作为命令行参数，race检测器会告诉我们race发生的准确位置。</p><p>如果你不执行任何代码，那么race探测器不会知道任何事，它将不会分析。它并不是做静态分析，race探测器不会看你的源代码，不会基于源代码作出判断，它观察一次具体的程序运行。所以如果这次具体的程序运行没有执行，race探测器不可能知道某些恰好读写共享数据的代码，这是需要小心的地方。需要设置某种测试装置以确保所有的代码都被执行。</p><p><strong>并发风格——channel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Concurrent crawler with channels</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">func worker(url string, ch chan []string, fetcher Fetcher) &#123;</span><br><span class="line">urls, err := fetcher.Fetch(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">ch &lt;- []string&#123;&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ch &lt;- urls</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func master(ch chan []string, fetcher Fetcher) &#123;</span><br><span class="line">n := 1</span><br><span class="line">fetched := make(map[string]bool)</span><br><span class="line">for urls := range ch &#123;</span><br><span class="line">for _, u := range urls &#123;</span><br><span class="line">if fetched[u] == false &#123;</span><br><span class="line">fetched[u] = true</span><br><span class="line">n += 1</span><br><span class="line">go worker(u, ch, fetcher)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n -= 1</span><br><span class="line">if n == 0 &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ConcurrentChannel(url string, fetcher Fetcher) &#123;</span><br><span class="line">ch := make(chan []string)</span><br><span class="line">go func() &#123;</span><br><span class="line">ch &lt;- []string&#123;url&#125;</span><br><span class="line">&#125;()</span><br><span class="line">master(ch, fetcher)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种实现方式中，不需要使用锁。有一个master线程，它有一个表格，但是这个表格是master函数私有的，master函数并不像前一个版本那样创建。这个版本为每个URL创建一个goroutine，但是只由master来创建，只有唯一一个master创建这些线程 ，所以我们没有一个函数的树形结构，我们只有一个master，在16行创建了自己的私有mapfetched :&#x3D; make(map[string]bool)，记录哪些URL已经爬取，然后创建一个channel，只有一个channel 所有的worker线程都将通过这个channel沟通。</p><p>这个思路是，启动一个worker线程，每个worker线程在结束时只会通过channel发送恰好一份数据给master，这份数据包含了这个worker从网页上爬取的网页中的URL的列表。master在第17行循环中 从channel中读取数据for urls :&#x3D; range ch。如果URL还未被爬取，它将在第22行启动一个新的worker去爬取那个URL go worker(u, ch, fetcher)。</p><p>worker线程不共享任何对象，worker和master之间也不共享任何对象，所以我们不必担心锁和race。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 6.824 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.824 Lecture3-GFS</title>
      <link href="/2024/07/03/MIT-6.824-Lecture3-GFS/"/>
      <url>/2024/07/03/MIT-6.824-Lecture3-GFS/</url>
      
        <content type="html"><![CDATA[<h3 id="Lecture-3-GFS"><a href="#Lecture-3-GFS" class="headerlink" title="Lecture 3-GFS"></a>Lecture 3-GFS</h3><p>[(289条消息) 谷歌文件系统GFS理解_小炮车的博客-CSDN博客_google文件系统gfs](<a href="https://blog.csdn.net/SwjtuPC/article/details/123652626?ops_request_misc=&request_id=&biz_id=102&utm_term=GFS">https://blog.csdn.net/SwjtuPC/article/details/123652626?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=GFS</a> PRIMARY&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-123652626.142^v47^pc_rank_34_ctr25,201^v3^add_ask&amp;spm&#x3D;1018.2226.3001.4187)</p><p>这门课程的主要内容是“大型存储”，GFS是这门课里有关如何构建大型存储系统的众多案例学习的第一篇。存储是一种关键的抽象，很多系统要么是设计的简单易用的存储接口，要么是基于底层存储进而构建。在分布式系统中，可能有各种各样重要的抽象可以应用在分布式系统中，但是实际上，简单的存储接口往往非常有用且极其通用。构建分布式系统大多都是关于如何设计存储系统，或是设计其它基于大型分布式存储的系统。因此我们会更加关注如何为大型分布式存储系统设计一个优秀的接口，以及如何设计优秀的存储系统的内部结构。</p><p>感觉就是分布式存储是很多分布式的底层，因此一个优秀、简单、抽象的接口和优秀的存储内部结构就很重要了。这里一方面是说明存储的重要性，另一方面值得关注的是接口和存储内部结构，这两点都很重要。</p><h4 id="3-1-Why-HARD"><a href="#3-1-Why-HARD" class="headerlink" title="3.1 Why HARD"></a>3.1 Why HARD</h4><p>为什么分布式存储系统会如此之难，以至于你需要做大量的工作才能让它正确工作？</p><ul><li><strong>Performance –&gt; Sharding</strong></li><li><strong>Fault –&gt; Tolerance</strong></li><li><strong>Tolerance –&gt; Replication</strong></li><li><strong>Repl –&gt; In Consistency</strong></li><li><strong>Consistency –&gt; Low Performance</strong></li></ul><p>人们设计大型分布式系统或大型存储系统出发点通常是想获取巨大的性能加成，通过利用数百台计算机的资源来同时完成大量工作。因此，性能performance问题就成为了最初的诉求。 之后，很自然的想法就是将数据分割放到大量的服务器上，这样就可以并行的从多台服务器读取数据。我们将这种方式称之为分片（Sharding）。<br>如果你在成百上千台服务器进行分片，你将会看见常态的故障。数千台服务器里每天会有一台服务器宕机，甚至每个小时都可能会发生错误。因此需要自动化的方法而不是人工介入来修复错误。每天都有大量错误发生，需要自动化的容错即fault tolerance。<br>实现容错最有用的一种方法是使用复制，只需要维护2-3个数据的副本，当其中一个故障了，你就可以使用另一个。如果想要容错能力就得有复制（replication）。<br>如果有复制，那就有了两份以上的数据副本，而且很容易不一致。本来想有了多个副本，就能通过任一实现容错，现在发现副本间数据很难完全一致（严格来说，它们就不再互为副本了）。这时候向不同副本请求，获取的数据也就不一样了。因此复制又带来了不一致的问题inconsistency。<br>通过合理的设计可以避免不一致的问题，并且让数据看起来也表现的符合预期。但这样需要额外的工作，需要服务器间额外的网络交互，这样又导致性能降低。因此为了获得一致性，又需要导致性能降低。<br>实际设计系统时，这些问题都难以避免，因此就要在性能和一致性之间权衡，并为一致性的保障做出性能上的让步，否则系统就会出现异常问题。</p><h4 id="3-2-Strong-Consistency"><a href="#3-2-Strong-Consistency" class="headerlink" title="3.2 Strong Consistency"></a>3.2 Strong Consistency</h4><p><strong>对于具备强一致 strong consistency或者好的一致性 good consistency的系统，从应用程序或者客户端看起来就像是和一台服务器在通信。</strong>尽管我们会通过数百台计算机构建一个系统，但是对于一个理想的强一致模型，你看到的就像是只有一台服务器，一份数据，并且系统一次只做一件事情。可以认为完全就是单个服务器上的单线程，同一时间只处理来自客户端的一个请求。<br>举例来说：（一个强一致性系统的示例）<br>一个只支持put, get的 key-value 系统。为了让服务有可预期的行为，需要定义一条规则：<strong>一个时间只执行一条请求。这样每个请求都可以看到之前所有请求按照顺序执行生成的数据。</strong>如果我们有一些客户端，客户端C1发起写请求将X设置成1；在同一时刻，客户端C2发起写请求将X设置成2。在C1和C2的写请求都执行完毕之后，客户端C3会发送读取X的请求，并得到了一个结果。客户端C4也会发送读取X的请求，也得到了一个结果。现在的问题是，这两个客户端看到的结果是什么？</p><p>学生提问：为什么一定要一次只处理一个请求？<br>Robert教授：假设C1和C2在同一时间发起请求，之后在某个时刻，服务器会响应它们。但是无法判断两个请求处理的先后顺序，可能先处理C1后处理C2，这样最终结果是2；反之则是1。这个例子也说明，即使非常简单的系统，仍然会出现一些模糊的场景使得你不知道系统的执行过程以及输出结果。<strong>能做的只是从产生的结果来判断系统的输出是一致性还是非一致性。</strong>如果C3读X得到2，那么C4最好也是读X得到2，否则就不是强一致性了。但是这里的单系统又会带来容错能力的问题，又需要构建多副本的分布式系统，但这却又是所有问题的开始。</p><h4 id="3-3-Bad-Replication-Design"><a href="#3-3-Bad-Replication-Design" class="headerlink" title="3.3 Bad Replication Design"></a>3.3 Bad Replication Design</h4><p>假设有一个类似上面的支持put, get的 key-value 系统，但是这里启动了两个服务以便于容错。假设客户端C1和C2都想执行写请求，其中一个要写X为1，另一个写X为2；每一个请求同时发给两个服务。这时，两个服务处理C1和C2的先后顺序有可能不一致，就会导致X最终结果不一致。如果C3从S1读数据，C4从S2读数据，这两个客户端读取的数据不一样。如果挂了一个服务，那么后面读取的可能和之前读到的值不同。<br>这个问题是可以解决的，但是需要服务器之间额外的通信，同时也会提高系统的复杂度。获取强一致性会带来复杂度的提升，当然也有很多方法能够在还不错的一致性和存在小瑕疵之间平衡。</p><h4 id="3-4-GFS的设计目标"><a href="#3-4-GFS的设计目标" class="headerlink" title="3.4 GFS的设计目标"></a>3.4 GFS的设计目标</h4><p>Google有大量的数据（网页、视频、索引中间文件），需要大量的磁盘来存储这些数据，同时也需要能借助MapReduce这样的工具来快速处理这些数据，因此Google需要能够快速的并行访问这些海量数据。谷歌构建了一个大型快速的文件系统，这个文件系统的数据是全局有效的，不同应用程序都可以从中读取数据。为了提高容量，文件会被GFS分割之后存放在多个服务器上，这样一方面从多个服务器上同时读同一个文件，获得了更高的吞吐；另一方面文件分割存储还可以保存比单个磁盘还要大的文件。因为在数百台服务器上构建了存储系统，系统需要具有一定的故障修复能力。<br>GFS被设计成只在一个数据中心运行，单个GFS只存在于单个数据中心的单个机房里。理论上应该副本间跨数据中心比较好，但是这样实现起来比较困难。GFS也只是谷歌工程师内部使用。</p><p>单数据中心可能是距离带来的性能影响，需要大量额外的设计逻辑。</p><p>GFS在各个方面对大型的顺序文件读写做了定制，是为TB级别的文件而生，<strong>只支持顺序访问</strong>，不支持随机访问。某种程度上来说，它有点像批处理的风格。GFS并没有花费过多的精力来降低延迟，它的关注点在于巨大的吞吐量上，因此单次操作都涉及到MB级别的数据。存储系统有单独针对小份数据优化的系统，但GFS并不是。<br>GFS论文发表在2003年的SOSP会议上，它描述了一个真正运行在成百上千台计算机上的系统，规模远大于学术界。反映了工业界对于保障系统正常工作和节省成本的经验。论文也提出了一个当时非常异类的观点：存储系统具有弱一致性也是可以的，GFS并不保证返回正确的数据，其目标是提供更好的性能。学术论文做多是多个Master节点共同分担工作，但GFS却使用单个Master节点（Active-Standby模式，只有一个Master节点在工作）。</p><p>学生提问：如果GFS返回错误的数据，会不会影响应用程序？<br>Robert教授：如果你通过搜索引擎做搜索，20000个搜索结果中丢失了一条或者搜索结果排序是错误的，没有人会注意到这些。尽管GFS可能会返回错误的数据，但是可以在应用程序中做一些补偿。例如论文中提到，应用程序应当对数据做校验，并明确标记数据的边界，这样应用程序在GFS返回不正确数据时可以恢复。</p><p>关于这个问题，后面关于spanner等基于GFS的系统是一个很好的答案。</p><h4 id="3-5-Master-Data"><a href="#3-5-Master-Data" class="headerlink" title="3.5 Master Data"></a>3.5 Master Data</h4><p>了解系统如何容错以及一致性，就需要知道master存放的数据。</p><ul><li><strong>一个master节点，Active-Standby模式，只有一个Master节点在工作，</strong>用来管理文件和Chunk的信息</li><li>上百个客户端</li><li>大量Chunk服务器，每个上面有1-2块磁盘，用来存储实际的数据。</li></ul><p>Master节点知道每一个文件对应的所有的Chunk的ID，每个Chunk 64MB，多个Chunk共同构成了一个文件。比如一个1G的文件，先从master节点查询对应的Chunk所在服务器，之后直接从Chunk Server读取对应的数据。<br>Master节点内保存的数据内容主要是两个表单：</p><p><img src="https://s2.loli.net/2024/07/03/6Y4QmFa9nyLXcf3.png" alt="a167415c6dd14a278e25fc8cfd3501f4[1].png"></p><ul><li>文件名到Chunk ID或者Chunk Handle数组的对应，即一个文件对应了哪些ChunkID。</li><li>Chunk ID到Chunk数据的对应关系。这里的数据又包括了：<ul><li>每个Chunk存储在哪些服务器上，即Chunk服务器的列表</li><li>每个Chunk当前的版本号，通过这个递增字段，用来标识最新的版本信息，cs对应的chunk值小则认为数据是不准确的</li><li>主Chunk对应的服务器，因为对Chunk的写操作都必须在Primary Chunk 上顺序处理</li><li>主Chunk的租约过期时间，主Chunk只能在特定的租约时间内担任主Chunk</li></ul></li></ul><p>以上数据都存放在内存中，同时会有log以及checkPoint存放在磁盘上，内存中用于快速访问，磁盘中用于持久化。<br>有些数据需要存在磁盘上，而有些不用。它们分别是：</p><ul><li>Chunk Handle的数组（第一个表单）要保存在磁盘上，标记成NV（non-volatile, 非易失）表示对应的数据会写入到磁盘上。</li><li>Chunk服务器列表不用保存到磁盘上。因为Master节点重启之后可以与所有的Chunk服务器通信，并查询每个Chunk服务器存储了哪些Chunk，这里标记成V（volatile），</li><li>版本号要不要写入磁盘取决于GFS是如何工作的，我认为它需要写入磁盘</li><li>主Chunk的ID，Master节点重启之后会忘记谁是主Chunk，它只需要等待60秒租约到期，那么它知道对于这个Chunk来说没有主Chunk，这个时候，Master节点可以安全指定一个新的主Chunk，这里标记成V。</li><li>类似的，租约过期时间也不用写入磁盘，这里标记成V。</li></ul><p>如果文件写满了一个64MB Chunk，之后需要新增一个Chunk或者由于指定了新的主Chunk而导致版本号更新，Master节点需要向磁盘中的Log追加一条记录，刚刚向这个文件添加了一个新的Chunk或者刚刚修改了Chunk的版本号。这种更新都需要落盘，因为磁盘更新速度有限，进而影响master节点更新速度，所以要尽可能的少写入数据到磁盘中。<br>在磁盘中维护log而不是数据库。log数据都是向同一个地址追加，可以将最近的多个log记录一次性的写入，这样只需要等待磁盘的磁碟旋转一次。数据库本质上来说是某种B树（b-tree）或者hash table。对于B树来说，每一份数据都需要在磁盘中随机找个位置写入。<br>当Master节点故障重启，并重建它的状态，log的最开始可能是几年之前，通过在磁盘中创建一些checkpoint点，从log中的最近一个checkpoint开始恢复，再逐条执行从Checkpoint开始的log，最后恢复自己的状态。</p><h4 id="3-6-GFS读文件（Read-File"><a href="#3-6-GFS读文件（Read-File" class="headerlink" title="3.6 GFS读文件（Read File)"></a>3.6 GFS读文件（Read File)</h4><p>客户端（或者应用程序）将file name，offset，size发送给Master<br>Master根据file name以及偏移量&#x2F;64MB就可以找到Chunk Handle，之后将这个chunk对应的服务器列表发送给客户端，客户端会缓存chunk和服务器列表的对应关系<br>客户端会选择一个网络上最近的服务器（Google的数据中心中，可以从IP地址的差异判断网络位置的远近），并将Chunk Handle和偏移量发送给那个Chunk server，之后返回给客户端数据</p><blockquote><p>[!CAUTION]</p><p>1.后面基于GFS的应用可以知道，为了提高效率，而且GFS是大文件的，所以一个文件可能应用只需要读取其中的一部分数据，因为这个文件本身就被应用用来对应多条不同的数据了。<br>2.可能有点绕结合3.5的图即可</p></blockquote><p>Chunk服务器会在本地的硬盘上，将每个Chunk存储成独立的Linux文件，并通过普通的Linux文件系统管理，Chunk文件会按照Handle（也就是ID）命名。Chunk服务器需要做的就是根据文件名找到对应的Chunk文件，之后从文件中读取对应的数据段，并将数据返回给客户端。<br>学生提问：如果客户端有偏移量信息，那可以直接算出来是第几个Chunk吧？<br>Robert教授：客户端可以算出来是哪个Chunk，但是客户端不知道Chunk在哪个服务器上。为了获取服务器信息，客户端需要与Master交互。Master节点找到了Chunk对应的ID，并确定了Chunk存储在哪个服务器上。</p><p>学生提问：如果读取的数据超过了一个Chunk怎么办？<br>Robert教授：会将一个读请求拆分成多个读请求（文件对应的多个chunk）再发送到Master节点，之后再向两个不同的Chunk服务器读取数据。</p><p>学生提问：能再介绍一下读数据跨越了Chunk边界的情况吗？<br>Robert教授：GFS的库会将读请求拆分，之后再将它们合并起来。比如需要Chunk7的最后两个字节，Chunk8的头两个字节，获取到这些数据之后，会将它们放在一个buffer中，再返回给调用库的应用程序。Master节点会告诉库有关Chunk的信息，而GFS库可以根据这个信息找到应用程序想要的数据。应用程序只需要确定文件名和数据在整个文件中的偏移量，GFS库和Master节点共同协商将这些信息转换成Chunk。</p><p>学生提问：从哪个Chunk服务器读取数据重要吗？<br>Robert教授：实际上不同Chunk服务器上的数据并不一定完全相同，应用程序应该要能够容忍这种情况。如果从不同的Chunk服务器读取数据，可能会略微不同。GFS论文提到，客户端会尝试从同一个机架或者同一个交换机上的服务器读取数据。</p><h4 id="3-7-GFS写文件（Write-File）"><a href="#3-7-GFS写文件（Write-File）" class="headerlink" title="3.7 GFS写文件（Write File）"></a>3.7 GFS写文件（Write File）</h4><p>从应用程序的角度来看，写文件和读文件的接口都是调用GFS的库。对于写文件，客户端会向Master节点发送请求说：我想向这个文件名对应的文件追加数据，请告诉我文件中最后一个Chunk的位置，这里即为记录追加（Record Append）。</p><p>客户端根据文件名请求master，获取chunkID（这里肯定是最后一个，当然如果是新文件第一个chunkID也是最后一个），以及对应的服务器列表，进而能够往primary chunk写文件。</p><p>不同客户端写同一份日志文件，没有一个客户端会知道文件究竟有多长，因此也就不知道该往什么样的偏移量，或者说向哪个Chunk去追加数据。这个时候，客户端可以向Master节点查询哪个Chunk服务器保存了文件的最后一个Chunk。</p><p>这里有很多细节冲突问题，详见下文及3.8<br>并发量很高的情况下，返回了最后一个chunk，但是此时又被写满了，这个已经不是最后一个了？这个应该是首先会等client发送的所有数据到达之后开始写，这时候chunk发现没有足够空间了，会返回客户端错误<br>是不是新的chunk都是通过master指定的？应该是的，之后放在文件对应的chunk list里</p><p><strong>写Primary Chunk</strong><br>写文件必须写主副本，通过master获取chunk对应的服务器列表中的主副本信息。但有时Master不一定指定了Chunk的主副本，因此需要考虑Chunk的主副本不存在的情况。对于读文件来说，可以从任何最新的Chunk副本读取数据。<br>Master节点需要告诉客户端向哪个Chunk服务器（也就是Primary Chunk所在的服务器）去做追加操作，Master节点的部分工作就是弄清楚在追加文件时，客户端应该与哪个Chunk服务器通信。</p><p><strong>No Primary 选主的逻辑</strong></p><ol><li><p>会找出所有存有Chunk最新副本的Chunk服务器，因为某个副本可能因为宕机尚未更新数据</p></li><li><p>找出新的Chunk副本。最新的副本是指副本中保存的版本号与Master中记录的Chunk的版本号一致。Chunk副本中的版本号是由Master节点下发的，Master节点知道，对于一个特定的Chunk，哪个版本号是最新的。</p><ol><li><p>Master找到最新的副本</p></li><li><p>选一个作为Primary，其他的作为Secondary</p></li><li><p>Master会增加版本号</p></li><li><p>Master节点会向Primary和Secondary副本对应的服务器发送消息告知主备关系、最新版本号–&gt;Lease</p><p>master持久化版本号</p></li><li><p>2.b应该是master向chunk的主副本发放lease，增加版本号</p></li></ol></li></ol><p>几点说明：</p><ul><li>master通过版本号区别正常副本和数据落后的副本，同时master重启之后，依然可以通过版本号区分副本的情况。</li><li>master会给primary一个60s的租约（60s之后停止成为primary），持有租约才能够是primary，这种机制可以确保我们不会同时有两个Primary。</li></ul><blockquote><p>[!CAUTION]</p><p>这里的60s，后面可以通过和master通信获得延期，实际上3个副本中的primary是master说了算</p></blockquote><p>学生提问：为什么不将所有Chunk服务器上保存的最大版本号作为Chunk的最新版本号？<br>Robert教授：master重启之后，对于每一个chunk，汇总其各副本的版本号，但是无法确认当前最大的就是最新的，可能最新的并未启动。当Master找不到持有最新Chunk的服务器时，有两种可能：要么Master会等待，并不响应客户端的请求；要么会返回给客户端现在还不知道Chunk在哪，过会再重试吧。比如机房断电导致服务器大规模重启，这时只能等待，因为不会想使用Chunk的旧数据。</p><blockquote><ol><li>通过版本号匹配，确认最新的chunk版本，这里有两点思考，1）应该是并未保存当前的副本都有哪些节点，全靠上报，当然这里是可以简单优化的2）通过版本号确定最新的，第二个有点类似raft选主，最新的term可以成为leader</li><li>因为肯定不想使用旧数据，所以只能等待最新版本的chunk上线</li><li>一个思考：这种通过别人选主和raft副本之间自己选主的区别联系优劣？</li></ol></blockquote><p>学生提问：如果Chunk服务器上报的版本号高于Master存储的版本号会怎么样？<br>Robert教授：GFS论文说，chunk server上报了一个比Master记住的版本更高的chunk版本。Master会认为它在分配新的Primary服务器时出现了错误，并且会使用这个更高的版本号来作为Chunk的最新版本号。当Master向Primary和Secondary发送完消息之后就崩溃了，可能会出现上面这种情况。为了让Master能够处理这种情况，Master在发送完消息之后，需要将Chunk的最新版本写入到磁盘中。这里的写入或许需要等到Primary和Secondary返回确认消息之后。我（Robert教授）也不太确定Master究竟是先写本地磁盘中的版本号，然后再通知Primary和Secondary，还是反过来。但是不管怎么样，Master会更新自己的版本号，并通知Primary和Secondary说，你们现在是Primary和Secondary，并且版本号更新了。</p><p>感觉是要等chunk的副本确认版本号之后，master才能持久化更新chunkID，保障master的版本号永远不会大于chunk的，不然永远找不到最新的了。同样，这种情况才会出现chunk最新版本号更高的问题。磁盘故障什么的除外。</p><p><strong>Primary写</strong></p><ol><li>客户端根据文件名从master获取到了最后一个chunkID以及对应的ChunkServer及其中的primary</li><li>客户端发送要追加的数据</li><li>chunkServer会将数据写入临时位置，并不会直接追加到文件中，</li><li>当所有的服务器都返回确认消息说，已经有了要追加的数据，客户端会向Primary服务器发送一条消息说，你和所有的Secondary服务器都有了要追加的数据，现在我想将这个数据追加到这个文件中</li><li>Primary会查看当前文件结尾的Chunk，并确保Chunk中有足够的剩余空间，然后将客户端要追加的数据写入Chunk的末尾，同时也会将offset发送给Secondary执行追加</li><li>Secondary返回成功给primary</li><li>primary收到所有成功回复，会向客户端返回写入成功，如果有一个服务器写失败或者超时，会向客户端返回写入失败</li></ol><p>几点说明：</p><ul><li>Primary服务器或许会从大量客户端收到大量的并发请求，Primary服务器会以某种顺序，一次只执行一个请求。</li><li>对于Secondary服务器来说，可能会执行失败，比如说网络丢包，磁盘空间不足，发生故障</li><li>如果客户端从Primary得到写入失败，那么客户端应该重新发起整个追加过程，客户端首先会重新与Master交互，找到文件末尾的Chunk</li></ul><blockquote><ol><li>primary控制写入的offset</li><li>这里要求三副本都写成功才能返回给客户端成功，之后客户端可以直接就近读取</li><li>只要写失败，客户端都要重新请求master，因为失败原因多多难以预料，保险起见直接重新走流程</li></ol></blockquote><p><strong>关于master指定primary 以及版本号的问答</strong></p><ul><li><p><strong>什么时候版本号会增加？</strong></p><p>Robert教授：版本号<strong>只在Master节点认为Chunk没有Primary时才会增加</strong>。在一个正常的流程中，如果对于一个Chunk来说，已经存在了Primary，那么Master节点会记住已经有一个Primary和一些Secondary，Master不会重新选择Primary，也不会增加版本号。它只会告诉客户端说这是Primary，并不会变更版本号。</p></li><li><p>如果<strong>Master节点发现Primary挂了会怎么办</strong>？</p><p>Robert教授：Master指定了一个Primary，如果之后ping不通，并不会立即选主，因为这里可能是多种原因导致一两次不通，更主要是这样会导致同时存 在两个primary（从客户端的视角，客户端1认为A是主，后面的客户端2认为B是主），会分别处理不同的写请求，最终会导致有两个不同的数据拷贝。这被称为<strong>脑裂（split-brain），通常是由网络分区引起的，比如说Master无法与Primary通信，但是Primary又可以与客户端通信，这就是一种网络分区问题，网络故障是这类分布式存储系统中最难处理的问题之一。</strong>要避免错误的为同一个Chunk指定两个Primary的可能性。Master采取的方式是，当指定一个Primary时，为它分配一个租约，Primary只在租约内有效。Master和Primary都会知道并记住租约有多长，当租约过期了，Primary会停止响应客户端请求，它会忽略或者拒绝客户端请求。如果Master不能与Primary通信，并且想要指定一个新的Primary时，Master会等到前一个Primary的租约到期。所以master必须等到租约到期之后，这样可以确保不会出现这种脑裂情况。</p></li></ul><p>这里的租约，肯定不能用系统时间，如果用倒计时的话，是否需要考虑网络上花费的时间？比如master指定primary之后就开始计时，或者收到primary的响应之后开始，总之master和指定的primary必有先后。好像lease的话，一般会在块到期的前几秒时间就立即发送消息，进行续租。但是过期的判断是否也加上这个？加上这个是否带来延迟。</p><p><strong>关于写入的问答</strong><br>如果是对一个新的文件进行追加，那这个新的文件没有副本，会怎样？<br>Robert教授：Master节点或许会通过随机数生成器创造一个新的Chunk ID。之后Master节点会创建一条新的Chunk记录，再随机选择一个Primary和一组Secondary并告诉它们，你们将对这个空的Chunk负责，请开始工作。</p><p>写文件失败之后Primary和Secondary服务器上的状态如何恢复？<br>Robert教授：Primary会回复客户端说执行失败，部分副本还是成功将数据追加了。一个Chunk的部分副本成功完成了数据追加，而另一部分没有成功，这种状态是可接受的，没有什么需要恢复，这就是GFS的工作方式。</p><p>写文件失败之后，读Chunk数据会有什么不同？<br>Robert教授：如果写文件失败之后，一个客户端读取相同的Chunk，客户端可能可以读到追加的数据，也可能读不到，取决于客户端读的是Chunk的哪个副本。</p><p>可不可以通过版本号来判断副本是否有之前追加的数据？<br>Robert教授：所有的Secondary都有相同的版本号，版本号只会在Master指定一个新Primary时才会改变，通常只有在原Primary发生故障了，才会指定一个新的Primary。副本（参与写操作的Primary和Secondary）都有相同的版本号，你没法通过版本号来判断它们是否一样，或许它们就是不一样的（取决于数据追加成功与否）。</p><p>客户端将数据拷贝给多个副本会不会造成瓶颈？<br>Robert教授：考虑到底层网络，写入文件数据的具体传输路径可能会非常重要。当论文第一次说客户端会将数据发送给每个副本。之后论文又改变了说法，说客户端只会将数据发送给离它最近的副本，之后那个副本会将数据转发到另一个副本，以此类推形成一条链，直到所有的副本都有了数据。这样一条数据传输链可以在数据中心内减少跨交换机传输（否则，所有的数据吞吐都在客户端所在的交换机上）。</p><p>为什么立即指定一个新的Primary是坏的设计？<br>Robert教授：因为客户端会通过缓存提高效率，客户端会在短时间缓存Primary的身份信息（这样，客户端就不用每次都会向Master请求Primary信息）。即使没有缓存，也有可能刚向客户端返回之后，master就指定了新的primary。如果不采用其它机制，前一个客户端是没办法知道收到的Primary已经过时了，此时如果前一个客户端执行写文件，那么就会与后来的客户端产生两个冲突的副本。</p><p>如果写入数据失败了，不是应该先找到问题在哪再重试吗？<br>Robert教授：论文中在重试追加数据之前没有任何中间操作，因为可能是网络导致部分数据丢失。客户端重试，对于大多数错误来说可以直接解决。我们希望如果某个副本出错，master能够指定新的，剔除出错的副本，同时指定版本号和新的primary，旧的副本也永远因为版本号旧被抛弃。但是论文里只是说，客户端重试，并且期望之后能正常工作。Master节点会ping所有的Chunk服务器，如果Secondary服务器挂了，Master节点可以发现并更新Primary和Secondary的集合，之后再增加版本号。但是这些都是之后才会发生（而不是立即发生）。</p><h4 id="3-8-GFS的一致性"><a href="#3-8-GFS的一致性" class="headerlink" title="3.8 GFS的一致性"></a>3.8 GFS的一致性</h4><p>对于一个新建的文件f1，会指定一个新的chunk以及对应的三个副本。客户端向文件追加数据A，此时三个副本（一个Primary和两个Secondary），都成功的将数据追加到了Chunk，Chunk中的第一个记录是A。<br>第二个客户端向文件f1追加数据B，由于网络问题导致一个secondary副本写失败，现在我们有两个副本有数据B，另一个没有。<br>第三个客户端向文件f1追加数据C，发送给主副本之后，Primary选择了偏移量，并将偏移量告诉Secondary，将数据C写在Chunk的这个位置。<br>第二个客户端会收到写失败的回复，之后会再次请求追加数据B，此时一切正常，写入成功。<br>又一个客户端向文件f1追加数据D，最终写成功两个副本，但是这个客户端挂了，因此并不会再次进行重试，最后数据D出现在某些副本中，而其他副本则完全没有。<br><strong>在GFS的这种工作方式下，Primary返回写入失败会导致不同的副本有完全不同的数据。</strong></p><p><img src="https://s2.loli.net/2024/07/03/QavCDUPo59GTjSL.png" alt="59cb609fe1f04e7fa48e278b0d1af47e[1].png"></p><p>如果一个客户端读文件f1，读到的内容取决于读取的是Chunk的哪个副本，不同的副本，读取数据的顺序是不一样的。如果读取的是第一个副本，那么客户端可以读到A、B、C，然后是一个重复的B。如果读取的是第三个副本，那么客户端可以读到A，一个空白数据，然后是C、B。</p><p>客户端重新发起写入的请求时从哪一步开始重新执行的？<br>Robert教授：根据我从论文中读到的内容，（当写入失败，客户端重新发起写入数据请求时）客户端会从整个流程的最开始重发。客户端会再次向Master询问文件最后一个Chunk是什么，因为文件可能因为其他客户端的数据追加而发生了改变。</p><p>为什么GFS要设计成多个副本不一致？<br>Robert教授：我不明白GFS设计者为什么要这么做。GFS可以设计成多个副本是完全精确同步的。但是为了保持同步，要使用各种各样的技术。其中一条规则就是不能允许这种只更新部分服务器的不完整操作。即使客户端挂了，系统只要收到了请求，就要保障完成，primary需要确保每一个副本都得到每一条消息。</p><p>如果第一次写B失败了，C应该在B的位置吧？<br>Robert教授：实际上并没有。Primary将C添加到了Chunk的末尾，在B第一次写入的位置之后。当写C的请求发送过来时，Primary实际上可能不知道B的命运是什么。因为我们面对的是多个客户端并发提交追加数据的请求，为了获得高性能，你会希望Primary先执行追加数据B的请求，一旦获取了下一个偏移量，再通知所有的副本执行追加数据C的请求，这样所有的事情就可以并行的发生。Primary也可以判断B已经写入失败了，然后再发一轮消息让所有副本撤销数据B的写操作，但是这样更复杂也更慢。</p><p>primary不去校验其它副本有没有写成功，会指定其他副本写入的offset，这样如果自己写成功了，其他副本有失败的，也不会有影响；如果自己写失败，其它副本成功了，也时按照自己的offset写入新的。<br>这样做的目的大概是为了提高性能，但是客户端就要自己处理这种乱序的数据问题。</p><p>GFS这样设计的理由是足够的简单，但是同时也给应用程序暴露了一些奇怪的数据。这里希望为应用程序提供一个相对简单的写入接口，但应用程序需要容忍读取数据的乱序。如果应用程序不能容忍乱序，应用程序要么可以通过在文件中写入序列号，这样读取的时候能自己识别顺序，要么如果应用程序对顺序真的非常敏感那么对于特定的文件不要并发写入。例如，对于电影文件，你不会想要将数据弄乱，当你将电影写入文件时，你可以只用一个客户端连续顺序而不是并发的将数据追加到文件中。</p><p><strong>将GFS升级成强一致系统（增加了系统的复杂度，增加了系统内部组件的交互）</strong></p><ul><li><p>你可能需要让Primary来探测重复的请求，这样第二个写入数据B的请求到达时，Primary就知道，我们之前看到过这个请求，可能执行了也可能没执行成功。Primay要尝试确保B不会在文件中出现两次。首先需要的是探测重复的能力。</p><blockquote><p>这里大概是考虑到客户端或者网络什么的，会出现重复的请求，通过序列号应该就能支持。</p></blockquote></li><li><p>对于Secondary来说，如果Primay要求Secondary执行一个操作，Secondary必须要执行而不是只返回一个错误给Primary。对于一个严格一致的系统来说，是不允许Secondary忽略Primary的请求而没有任何补偿措施的。如果Secondary有一些永久性故障，例如磁盘被错误的拔出了，你需要有一种机制将Secondary从系统中移除，这样Primary可以与剩下的Secondary继续工作。但是GFS没有做到这一点，或者说至少没有做对。</p><blockquote><p>这里是否有点绝对，首先无法保障secondary一定能成功，这时primary认为大家都失败了即可。</p></blockquote></li><li><p>当Primary要求Secondary追加数据时，<strong>直到Primary确信所有的Secondary都能执行数据追加之前，Secondary必须小心不要将数据暴露给读请求。</strong>在第一个阶段，Primary向Secondary发请求，要求其执行某个操作，并等待Secondary回复说能否完成该操作，这时Secondary并不实际执行操作。在第二个阶段，如果所有Secondary都回复说可以执行该操作，这时Primary才会说，好的，所有Secondary执行刚刚你们回复可以执行的那个操作。这是现实世界中很多强一致系统的工作方式，这被称为两阶段提交（Two-phase commit）。</p><blockquote><p>这里是不能让客户端读到脏数据</p></blockquote></li><li><p>当Primary崩溃时，可能有一组操作由Primary发送给Secondary，Primary在确认所有的Secondary收到了请求之前就崩溃了。当一个Primary崩溃了，一个Secondary会接任成为新的Primary，但是这时，新Primary和剩下的Secondary会在最后几个操作有分歧，因为部分副本并没有收到前一个Primary崩溃前发出的请求。新的Primary上任时，需要显式的与Secondary进行同步，以确保操作历史的结尾是相同的。</p><blockquote><p>对于GFS，切换primary时，客户端会超时失败，之后请求master，最终得到了新的primary信息，这时不管或者primary写成功失败，它也无需考虑别人上次是成功失败，它只需要把自己最后的offset发过去，但是这样客户端读不同的副本得到的结果不一致，客户端需要自己处理这种不一致。</p><p>为了保障强一致性，新primary就需要有一个同步操作，让大家都一致。</p></blockquote></li><li><p>最后，时不时的，Secondary之间可能会有差异，或者客户端从Master节点获取的是稍微过时的Secondary。系统要么需要将所有的读请求都发送给Primary，因为只有Primary知道哪些操作实际发生了，要么对于Secondary需要一个租约系统，就像Primary一样，这样就知道Secondary在哪些时间可以合法的响应客户端。</p><blockquote><p>这里应该是客户端读的时候，如果读secondary，可能这个secondary持有的数据并不是新的（新加入的，还在catch up阶段），这时它就不应该响应客户端。</p><p>读取也是一个很有趣的事，这里可以在raft中获得更多体会。</p></blockquote></li></ul><p><strong>GFS单master的问题</strong><br>最后，让我花一分钟来介绍GFS在它生涯的前5-10年在Google的出色表现，总的来说，它取得了巨大的成功，许多许多Google的应用都使用了它，许多Google的基础架构，例如BigTable和MapReduce是构建在GFS之上，GFS在Google内部广泛被应用。它最严重的局限可能在于，它只有一个Master节点，会带来以下问题：</p><ul><li><p>Master节点必须为每个文件，每个Chunk维护表单，随着GFS的应用越来越多，这意味着涉及的文件也越来越多，最终Master会耗尽内存来存储文件表单。你可以增加内存，但是单台计算机的内存也是有上限的。</p><blockquote><p>这个大概是单master内存有限，后面可以将元数据剥离出来。</p></blockquote></li><li><p>单个Master节点要承载数千个客户端的请求，而Master节点的CPU每秒只能处理数百个请求，尤其Master还需要将部分数据写入磁盘，很快客户端数量超过了单个Master的能力。</p><blockquote><p>单节点复杂所有的选主，而且客户端要从master获取primary的信息，这里能想到的一个就是根据业务搭建一个新的集群。</p><p>思考：现实问题中在多集群和单一集群之间的利弊与权衡？即搭建多个集群固然简单，有什么弊端吗？</p></blockquote></li><li><p>应用程序发现很难处理GFS奇怪的语义（本节最开始介绍的GFS的副本数据的同步，或者可以说不同步）。</p></li><li><p>从我们读到的GFS论文中，Master节点的故障切换不是自动的，需要人工干预来处理已经永久故障的Master节点，并更换新的服务器，这可能需要几十分钟甚至更长的而时间来处理，对于某些应用程序来说，这个时间太长了。</p><blockquote><p>这个感觉时Google自己留了一手。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 6.824 </tag>
            
            <tag> GFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoRE-learning：Learnability with Time-Sharing Computational Resource Concerns</title>
      <link href="/2024/07/01/CoRE-learning%EF%BC%9A%E5%B8%A6%E6%9C%89%E5%88%86%E6%97%B6%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90%E8%80%83%E8%99%91%E7%9A%84%E5%8F%AF%E5%AD%A6%E4%B9%A0%E6%80%A7%E7%90%86%E8%AE%BA/"/>
      <url>/2024/07/01/CoRE-learning%EF%BC%9A%E5%B8%A6%E6%9C%89%E5%88%86%E6%97%B6%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90%E8%80%83%E8%99%91%E7%9A%84%E5%8F%AF%E5%AD%A6%E4%B9%A0%E6%80%A7%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="CoRE-learning：Learnability-with-Time-Sharing-Computational-Resource-Concerns"><a href="#CoRE-learning：Learnability-with-Time-Sharing-Computational-Resource-Concerns" class="headerlink" title="CoRE-learning：Learnability with Time-Sharing Computational Resource Concerns"></a>CoRE-learning：Learnability with Time-Sharing Computational Resource Concerns</h1><p><a href="https://doi.org/10.1093/nsr/nwae204">‍https://doi.org/10.1093/nsr/nwae204‍</a></p><p>一般认为，人工智能机器学习技术应用涉及算法、数据、算力“三要素”。经典机器学习理论关注算法与数据对学习性能的影响，推导出的机器学习泛化误差界所包含的重要项通常涉及假设类复杂度和样本复杂度，两者分别与算法和数据有关，而对“三要素”中的算力缺乏考虑，尽管现实场景中算力资源的供给分配直接影响到最终学习性能。</p><p>在近期发表于《国家科学评论》（<em>National Science Review</em>, NSR）的Perspective文章中，<strong>南京大学周志华教授提出了“计算资源高效学习（CoRE-learning）”理论框架，这是第一个考虑了算力资源供给调度对机器学习性能影响的学习理论框架。</strong></p><p><strong>CoRE理论框架</strong>：</p><p><img src="https://s2.loli.net/2024/07/01/jt5ZsTLezHfRrlg.png" alt="image-20240630231211322.png"></p><p>作者定义了“机器学习吞吐率”并引入了对资源动态分配调度策略的考虑，使得算力资源的供给分配对机器学习泛化性能的影响可以被抽象地在学习理论中进行研究，不仅有助于指导设计出高效使用算力资源的算法，还可望引导“智算中心”在为机器学习模型训练提供资源服务时从“独占式”转变为“分时式”，为能源的高效利用提供一个机器学习理论视角。</p><h2 id="动机（Motivation）："><a href="#动机（Motivation）：" class="headerlink" title="动机（Motivation）："></a><strong>动机（Motivation）：</strong></h2><ul><li>传统机器学习理论通常假设有足够的甚至无限供应的计算资源来处理所有接收到的数据。然而，在实际应用中，如流学习，数据流可能是无限的，且数据量巨大，不可能及时处理所有数据。（这个问题通常不是机器学习领域考虑的问题）</li><li>现代“智能超级计算”设施通常以独占方式运行，用户被分配固定数量的资源来运行机器学习任务。这种方式可能过于乐观或悲观，导致资源分配不合理。这就有点像早期的计算机系统了。</li><li>机器学习理论应该考虑时间共享计算资源的问题，以提高用户效率和硬件效率，这一关键技术就是分时（time-sharing）。</li><li>目标：<ul><li>用户效率角度：在一定时间预算内得到理想的模型结果。</li><li>硬件效率角度：计算资源被合理地利用。</li></ul></li></ul><h2 id="工作内容（Work）："><a href="#工作内容（Work）：" class="headerlink" title="工作内容（Work）："></a><strong>工作内容（Work）：</strong></h2><p>基于motivation，提出了“计算资源高效学习”（CoRE learning）的概念，并建立了一个理论框架。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>吞吐量：每秒可以传输的数据量&#x2F;数据库中平均事务处理数量。</p></li><li><p>引入了<strong>机器学习吞吐量</strong>的概念，用于在抽象层面上理论化计算资源和调度的影响。：</p><ul><li><p><strong>数据吞吐量</strong>：表示每个时间单位内可以学习的数据百分比。</p></li><li><p><strong>线程吞吐量</strong>：线程吞吐量表示在一段时间内可以很好地学习的线程的百分比。</p><p><img src="https://s2.loli.net/2024/07/01/jt5ZsTLezHfRrlg.png" alt="image-20240630231211322.png"></p><p>图1(a)为<strong>数据吞吐量</strong>，将这个概念引入机器学习研究：</p><ul><li>数据量和计算资源预算的影响可以被涉及。</li><li>但并未考虑到从数据中学习的难度可能会发生变化的事实。</li></ul><p><strong>线程</strong>：计算设备接收到的机器学习任务。</p><ul><li>生命周期：开始时间和截止&#x2F;死亡时间（这里的截止时间是人为设置的）。</li><li>成功线程：时间跨度内能很好地学习，达到用户的要求。</li><li>失败线程：时间跨度内不能很好地学习，不能达到用户的要求。</li></ul><p><strong>线程吞吐量</strong>：由该时间段内所有线程中的成功线程百分比计算，如图1(b)线程吞吐量即为3&#x2F;5&#x3D;60%。</p><p><strong>任务束（task bundle）</strong>：相关时间段内的一组任务线程。</p><p><img src="https://s2.loli.net/2024/07/01/5PweNGyE4qjfkCM.png" alt="image-20240701122812984.png"></p><ul><li>其中<img src="https://s2.loli.net/2024/07/01/UyIxqoT6D2Oht9g.png" alt="image-20240701122851437.png">，<strong>Dk</strong>表示具有数据分布的线程，<strong>bk</strong>表示起始时间，<strong>dk</strong>是截止时间，<strong>Nt</strong>是在给定计算资源前提下在时间t时可以处理的数据量，<strong>K</strong>是任务束中的总线程数（总的任务数)，T是总的**时隙（time slots)<strong>数量。如果</strong>bi&#x3D;bj (所有i≠j)**，则所有任务线程同时到达。</li></ul></li></ul></li></ul><h4 id="Learning-algorithm"><a href="#Learning-algorithm" class="headerlink" title="Learning algorithm"></a>Learning algorithm</h4><p><strong>学习算法</strong>：<img src="https://s2.loli.net/2024/07/01/ndGhjSIHwpRcqoL.png" alt="image-20240701134403028.png"></p><p><strong>输入</strong>：<img src="https://s2.loli.net/2024/07/01/CPmvKkdSObRQUcL.png" alt="image-20240701134413069.png"></p><p><strong>输出：</strong><img src="https://s2.loli.net/2024/07/01/QoOyVGNieK7wACm.png" alt="image-20240701134435515.png"></p><ul><li><strong>sk</strong>为算法确定的切换时间。</li><li><strong>Mk</strong>为第k个线程的learned model。</li></ul><p>用<strong>At</strong>表示在时间t时存活线程的集合：</p><p><img src="https://s2.loli.net/2024/07/01/QAVty5wKrUbLFhk.png" alt="image-20240701134742442.png"></p><p><strong>学习过程</strong>如下：</p><ol><li><p>for循环:时间t&#x3D;1,…,T，the learner </p><p>do：</p><ol><li>最多收集 k,t，Nt 在 k ∈ At条件下的样本 , 其中 ηk,t为线程k在时间t的数据吞吐量。</li><li>为线程k更新模型Mk。</li><li>如果线程k完成，将sk设为t。</li></ol></li><li><p>终止循环。</p></li></ol><h5 id="Definition-1-η-κ-L-CoRE-learnability-："><a href="#Definition-1-η-κ-L-CoRE-learnability-：" class="headerlink" title="Definition 1 ((η, κ,L)-CoRE learnability)："></a>Definition 1 ((η, κ,L)-CoRE learnability)：</h5><p>现在引入CoRE learnability，其中<img src="https://s2.loli.net/2024/07/01/WzpP4XcBDfGN32h.png" alt="image-20240701140345002.png">为数据吞吐量，<img src="https://s2.loli.net/2024/07/01/pMOLFz14aCht23d.png" alt="image-20240701140353686.png">为线程吞吐量。</p><p><img src="https://s2.loli.net/2024/07/01/B7GjcYV5frlUMyd.png" alt="image-20240701141334011.png"></p><p>条件（1）涉及整个数据吞吐量，约束所有在当前时刻的alive set中的线程的总体资源配额永远不会超过最大资源预算。</p><p>条件（2）涉及线程吞吐量，要求<strong>调度策略ψ</strong>使<strong>L</strong>能够尽可能多地学习：</p><ul><li>线程的学习应在截止时间前完成，如条件（2a）所示；</li><li><strong>并且线程的学习性能</strong>应当在如条件（2b）所指示的小误差水平内。学习性能由<img src="https://s2.loli.net/2024/07/01/5uw42qnWrOFLk9V.png" alt="image-20240701142408791.png">来衡量，当算法利用时隙（bk，sk）中接收到的数据并在时间点sk之前完成学习时，<img src="https://s2.loli.net/2024/07/01/MkaOoVHAUTqbND7.png" alt="image-20240701142328147.png">根据预定的<img src="https://s2.loli.net/2024/07/01/lz65UHiZhGVtoy3.png" alt="image-20240701142450627.png">来评估学习性能是否可接受。</li></ul><p>注意，条件（1）与用户效率有关，而条件（2)与硬件效率有关；调度策略应该谨慎地平衡这两个方面。</p><p>CoRE learnability定义使用了一种<img src="https://s2.loli.net/2024/07/01/rs4HoBikXz7JLhI.png" alt="image-20240701143554651.png">类似可能近似正确的PAC学习理论。与PAC不同的是，CoRE learnability考虑了资源调度策略ψ的影响，并且对于具有（η，κ）吞吐量问题的学习算法L，仅要求可接受的<img src="https://s2.loli.net/2024/07/01/rs4HoBikXz7JLhI.png" alt="image-20240701143554651.png">。</p><p><img src="https://s2.loli.net/2024/07/01/2ax13HhNpGJzjYo.png" alt="image-20240701144633004.png"></p><h5 id="算法流程举例说明："><a href="#算法流程举例说明：" class="headerlink" title="算法流程举例说明："></a>算法流程举例说明：</h5><p>图1(c)给出了一个图示，其中任务包由<strong>K&#x3D;5</strong>个线程组成。为简单起见，假设在每个时间单位<img src="https://s2.loli.net/2024/07/01/oSXzG749Wuv2Um6.png" alt="image-20240701144649262.png">个数据单位可以处理。请注意，CoRE学习允许任务线程<img src="https://s2.loli.net/2024/07/01/OSsnXAkj5QzcGm1.png" alt="image-20240701144723031.png">的开始时间sk和截止时间dk,为任何实际值，而在此图中，我们假设它们是四舍五入的，以便更好地说明。对于<strong>给定的算法L</strong>，任务束是**(0.5,0.6,L)-CoRE learnable<strong>的，因为存在一种调度策略ψ，使得在给定</strong>数据吞吐量η&#x3D;50%**的情况下，工能够成功地学习5个线程中的3个。</p><p>如图1c所示：</p><ol><li>ψ将能够处型ηN&#x3D;32个数据单元的资源平等地在time slot处于t0-t1时分配给线程1和线程3，线程1继续接收可以处理16个数据单元的资源，直到在t3完成；剩余可以处理16个数据单元的资源在t1-t3中平均分配给线程2和线程3。</li><li>在t3-t4时，因为线程1不再需要任何资源，线程2和3每个都将分配到可以处理8个以上数据单元的资源。</li><li>线程4在t4到来，ψ对线程2感到悲观，所以把所有资源分配给线程3和线程4。</li><li>线程5在t5到来，由于线程5寿命很短，所以ψ给它分配了尽可能多的资源，直到在t7学习失败。</li><li>在t6，ψ对线程3非常乐观，因此决定暂时牺牲线程4将所有剩余的资源给线程3。</li><li>在t7，只有线程2和线程4还活着。</li><li>线程2和线程5失败的原因：线程2因为学习表现不理想，违反了条件2(b)，而线程5没有在截止时间前完成，违反了条件2(a)。</li></ol><h5 id="关于调度策略ψ："><a href="#关于调度策略ψ：" class="headerlink" title="关于调度策略ψ："></a>关于调度策略ψ：</h5><p>资源调度策略ψ能够根据对学习状态的感知和对线程学习进度的预测，<strong>自适应地分配资源</strong>。</p><p>直观地说，如果L是基于梯度计算的，那么为一个任务分配更多的计算资源意味着可以为该任务执行更多的梯度计算</p><ol><li><p><strong>资源分配的动态性</strong>：在梯度下降算法中，如果一个任务线程（thread）进入了平坦的收敛区域，即错误率在过去几轮梯度计算中没有显著下降，而另一个线程进入了斜率区域，错误率下降更快，资源调度策略ψ会根据这些信息来调整资源分配。例如，在迭代τ1时，如果线程1进入了一个平坦的收敛区域，而线程2进入了斜率区域，ψ就会减少线程1的资源并重新分配给线程2。</p></li><li><p><strong>资源调度的优化</strong>：资源调度策略ψ的目标是提高整体的吞吐量（throughput）。在图1(d)的示例中，假设两个任务线程最初被分配了相同数量的资源。通过动态调整资源分配，线程2可以在最终迭代τ3达到更好的状态b，而不是b’，而线程1则牺牲了达到a’的机会，达到了a。这导致整体吞吐量<strong>从0.0提高到0.5，即线程2根据阈值ϵ0被判定为成功</strong>。</p><p><img src="https://s2.loli.net/2024/07/01/ajmr3NCiogPnFVl.png" alt="image-20240701151825121.png"></p></li><li><p><strong>资源调度的平衡</strong>：资源调度策略需要在探索和利用之间找到平衡。在机器学习过程中，可能需要在继续分配资源给当前表现不佳的任务线程（探索）和将资源重新分配给表现更好的任务线程（利用）之间做出选择。</p></li><li><p><strong>资源调度的复杂性</strong>：机器学习中的资源调度与计算机系统和数据库中的资源调度不同。在计算机系统和数据库中，一旦任务接收到，完成该任务所需的资源量通常是已知的，而在机器学习中，这个信息是未知的，只能通过在线监视学习过程来估计。</p></li><li><p><strong>在线治理和状态估计</strong>：在线治理和状态估计需要通信和计算资源，这增加了资源调度的复杂性。CoRE学习理论自然涉及到资源调度的探索-利用平衡。</p></li><li><p><strong>CoRE学习理论的目标</strong>：CoRE学习理论的一个基本目标是通过引入调度，使机器学习的计算资源能够以时间共享的方式使用，而不是当前的难以捉摸的方式。这有助于减少资源浪费，并提高资源利用效率。</p></li><li><p><strong>CoRE学习算法的证明</strong>：一旦开发出具体的CoRE学习算法，就可以证明其CoRE可学习性。</p></li></ol><h2 id="成果（Results）："><a href="#成果（Results）：" class="headerlink" title="成果（Results）："></a><strong>成果（Results）：</strong></h2><ul><li>论文提出了CoRE学习理论，该理论考虑了计算资源的调度策略，允许机器学习任务像计算机系统和数据库的时间共享技术一样运行。</li><li>通过定义CoRE可学习性，作者提供了一种评估学习算法在有限资源下性能的方法，包括数据吞吐量和线程吞吐量的限制条件。</li></ul><h2 id="结论（Conclusion）："><a href="#结论（Conclusion）：" class="headerlink" title="结论（Conclusion）："></a><strong>结论（Conclusion）：</strong></h2><ul><li>CoRE学习理论强调了在机器学习中考虑时间共享计算资源的重要性，目标是实现计算资源的高效利用，类似于计算机系统的时间共享技术。</li><li>通过引入调度策略，CoRE学习可以更好地平衡用户效率和硬件效率，提高机器学习任务的整体吞吐量。</li><li>论文指出，CoRE学习理论为机器学习中的资源调度提供了新的研究方向，包括如何在线有效地管理和估计机器学习过程的状态和进度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分时计算 </tag>
            
            <tag> 系统优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.824 Lecture 1-Introduction</title>
      <link href="/2024/07/01/MIT%206.824%20Lecture%201-Introduction/"/>
      <url>/2024/07/01/MIT%206.824%20Lecture%201-Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="MIT-6-824-Lecture-1-Introduction"><a href="#MIT-6-824-Lecture-1-Introduction" class="headerlink" title="MIT 6.824: Lecture 1-Introduction"></a>MIT 6.824: Lecture 1-Introduction</h2><h3 id="Lecture-1-Introdunction"><a href="#Lecture-1-Introdunction" class="headerlink" title="Lecture 1-Introdunction"></a>Lecture 1-Introdunction</h3><h4 id="1-1为什么分布式："><a href="#1-1为什么分布式：" class="headerlink" title="1.1为什么分布式："></a>1.1<strong>为什么分布式：</strong></h4><ul><li>连接不同物理实体</li><li>通过隔离实现安全</li><li>通过复制实现容错</li><li>并行的cpu、mem、disk、net实现扩展</li></ul><h4 id="1-2分布式系统："><a href="#1-2分布式系统：" class="headerlink" title="1.2分布式系统："></a>1.2<strong>分布式系统：</strong></h4><p>Hadoop（ hdfs , yarn , <a href="https://so.csdn.net/so/search?q=MapReduce&spm=1001.2101.3001.7020">MapReduce</a> )<br>Spark 批处理<br>Storm ， Flink 流处理<br>Hbase K&#x2F;V分布式数据库<br>Kafka 消息队列</p><h4 id="1-3Lab"><a href="#1-3Lab" class="headerlink" title="1.3Lab:"></a>1.3<strong>Lab:</strong></h4><p>1-MapReduce</p><p>2-Raft:管理复制和剔除</p><p>3-k&#x2F;v server</p><p>4-shard k&#x2F;v service</p><h4 id="1-4-Infrastructure-Abstraction"><a href="#1-4-Infrastructure-Abstraction" class="headerlink" title="1.4 Infrastructure-Abstraction"></a>1.4 <strong>Infrastructure-Abstraction</strong></h4><ol><li>storage :star:</li><li>communications</li><li>computation-MapReduce</li></ol><h4 id="1-5-Implementation"><a href="#1-5-Implementation" class="headerlink" title="1.5 Implementation:"></a>1.5 Implementation:</h4><p>examples: RPC, Threads,Lock</p><h4 id="1-6Performance"><a href="#1-6Performance" class="headerlink" title="1.6Performance:"></a>1.6Performance:</h4><p>scalability-&gt; 2 * computers-&gt; 2 * throughput</p><h4 id="1-7-Fault-Tolerance"><a href="#1-7-Fault-Tolerance" class="headerlink" title="1.7 Fault Tolerance:"></a>1.7 Fault Tolerance:</h4><p><strong>Availability</strong></p><p><strong>Recoverability</strong></p><p>tools:</p><p>NV storage</p><p>Replication</p><p><strong>Consistency</strong></p><p>put(k,v)</p><p>get(k)-&gt;v</p><p>strong?weak?</p><h4 id="1-8MapReduce"><a href="#1-8MapReduce" class="headerlink" title="1.8MapReduce"></a>1.8<strong>MapReduce</strong></h4><p>Map Function &amp; <a href="https://so.csdn.net/so/search?q=Reduce&spm=1001.2101.3001.7020">Reduce</a> Function<br>写好mapreduce程序，无需关心具体分布式实现<br>WordCount例子</p><p>INPUT1-&gt;MAP a,1 b,1</p><p>INPUT2-&gt;MAP   b,1</p><p>INPUT3-&gt;MAP    a,1         c,1</p><p>get intermediate output</p><p>Then Reduces(分治思想)</p><p><strong>Map(k,v):</strong></p><p>split v into words</p><p>for each word </p><p>emit(w,”1)</p><p><strong>Reduce(k,v):</strong></p><p>emit(len(v))</p><p><strong>简述：</strong></p><p>map&#x2F;shuffle&#x2F;reduce</p><p>master给workers分配任务，输入被分成M份（M个map task，M比worker多），每份有3个备份；对每份输入调用Map()，产出(k2,v2)的中间结果，在本地Hash成R份，传递给R个Reduce()，每个Reduce task写一个结果文件</p><p><strong>隐藏的细节：</strong></p><p>跟踪task的完成情况、数据移动、错误恢复</p><p><strong>好的负载均衡：</strong></p><p>tasks比workers多，workers完成task后master继续给它分配</p><p><strong>容错：</strong></p><p>某个服务器在运行MR任务时崩溃，只需重新运行相应的Map和Reduce而不用整个任务重新运行；</p><p>这依赖Map和Reduce是纯函数，即：</p><p>不保存状态、</p><p>不读写额外的文件、</p><p>没有task间隐藏的通信</p><p>崩溃恢复：</p><p>Map worker崩溃：</p><p>重新给包含该输入的副本的worker分配该task（可能一些Reduce worker已经读取了该Map的部分输入，不要紧，Map是纯函数）；</p><p>如果该Map的中间结果都已被读取，则不用重新运行</p><p>Reduce worker崩溃：</p><p>该worker已运行完的task不用重新运行（结果已存到GFS）</p><p>只需重新运行未完成的task</p><p>如果Reduce worker写数据中途崩溃，不要紧，GFS会在写入完成时才重命名文件，所以相当于原子操作，未写入完成可重新运行</p><p>其他问题：</p><p>给两个worker分配了同样的Map task — 只会告诉Reduce worker其中的一个；</p><p>给两个worker分配了同意的Reduce task — GFS的原子写入操作可解决</p><h5 id="详解MapReduce流程"><a href="#详解MapReduce流程" class="headerlink" title="详解MapReduce流程"></a>详解MapReduce流程</h5><p>MapReduce 编程模型开发简单且功能强大，专门为并行处理大规模数据量而设计，接下来，通过一张图来描述 MapReduce 的工作过程，如图所示</p><p><img src="https://s2.loli.net/2024/07/01/WUEdQxVR1YjkirO.png" alt="20210617002320632[1].png"></p><h6 id="整体流程（5步）"><a href="#整体流程（5步）" class="headerlink" title="整体流程（5步）"></a><strong>整体流程</strong>（5步）</h6><p>在上图中， MapReduce 的工作流程大致可以分为5步，具体如下:</p><p><img src="https://s2.loli.net/2024/07/01/tnpNC4mId71EfB9.png" alt="20210617001737183[1].png"></p><h6 id="1-分片、格式化数据源："><a href="#1-分片、格式化数据源：" class="headerlink" title="1.分片、格式化数据源："></a>1.分片、格式化数据源：</h6><p>输入 Map 阶段的数据源，必须经过分片和格式化操作。</p><p>分片操作：指的是将源文件划分为大小相等的小数据块( Hadoop 2.x 中默认 128MB )，也就是分片( split )，<br>Hadoop 会为每一个分片构建一个 Map 任务，并由该任务运行自定义的 map() 函数，从而处理分片里的每一条记录;<br>格式化操作：将划分好的分片( split )格式化为键值对&lt;key,value&gt;形式的数据，其中， key 代表偏移量， value 代表每一行内容。</p><h6 id="2-执行-MapTask"><a href="#2-执行-MapTask" class="headerlink" title="2.执行 MapTask"></a>2.执行 MapTask</h6><p>每个 Map 任务都有一个<strong>内存缓冲区(<strong>缓冲区大小 100MB )，输入的分片( split )数据经过 <strong>Map 任务处理后的中间结果会写入内存缓冲区</strong>中。<br>如果写入的数据达到内存缓冲的阈值( 80MB )，会启动一个线程将内存中的</strong>溢出数据写入磁盘</strong>，同时不影响 Map 中间结果继续写入缓冲区。<br>在溢写过程中， MapReduce 框架会对 key 进行排序，如果中间结果比较大，会形成多个溢写文件，最后的缓冲区数据也会全部溢写入磁盘形成一个溢写文件，如果是多个溢写文件，则最后合并所有的溢写文件为一个文件。</p><p><img src="https://s2.loli.net/2024/07/01/xX9Zz4vyNIRLVUu.png" alt="20210617001954380[1].png"></p><ol><li><strong>Read 阶段</strong>： MapTask 通过用户编写的 RecordReader ，从输入的 InputSplit 中解析出一个个 key &#x2F; value 。</li><li><strong>Map 阶段</strong>：将解析出的 key &#x2F; value 交给用户编写的 Map ()函数处理，并产生一系列新的 key &#x2F; value 。</li><li><strong>Collect 阶段：</strong>在用户编写的 map() 函数中，数据处理完成后，一般会调用 <strong>outputCollector.collect() 输出结果</strong>，在该函数内部，它会将生成的 key &#x2F; value 分片(通过调用 partitioner )，并写入一个环形内存缓冲区中(该缓冲区默认大小是 100MB )。</li><li><strong>Spill 阶段</strong>：即“溢写”，当缓冲区快要溢出时(默认达到缓冲区大小的 80 %)，会在<strong>本地文件系统创建一个溢出文件</strong>，将该缓冲区的数据写入这个文件。</li></ol><ul><li><p>将数据写入本地磁盘前，先要对数据进行一次<strong>本地排序</strong>，并在必要时对数据进行<strong>合并、压缩</strong>等操作。写入磁盘之前，线程会根据 ReduceTask 的数量，将数据分区，一个 Reduce 任务对应一个分区的数据。</p><p>这样做的目的是为了避免有些 Reduce 任务分配到大量数据，而有些 Reduce 任务分到很少的数据，甚至没有分到数据的尴尬局面。</p><p>如果此时设置了 Combiner ，将排序后的结果进行 Combine 操作，这样做的目的是尽可能少地执行数据写入磁盘的操作。</p></li></ul><ol start="5"><li><strong>Combine 阶段</strong>：当所有数据处理完成以后， MapTask 会对所有<strong>临时文件</strong>进行一次合并，以确保最终只会生成一个数据文件</li></ol><ul><li>合并的过程中会不断地进行排序和 Combine 操作，</li><li>其目的有两个：一是尽量减少每次写入磁盘的数据量;二是尽量减少下一复制阶段网络传输的数据量。</li><li>最后合并成了一个已分区且已排序的文件。</li></ul><h6 id="3-执行-Shuffle-过程"><a href="#3-执行-Shuffle-过程" class="headerlink" title="3.执行 Shuffle 过程"></a>3.执行 Shuffle 过程</h6><p>MapReduce 工作过程中， Map 阶段处理的数据如何传递给 Reduce 阶段，这是 MapReduce 框架中关键的一个过程，这个过程叫作 Shuffle 。<br>Shuffle 会将 <strong>MapTask 输出的处理结果数据分发给 ReduceTask ，并在分发的过程中，对数据按 key 进行分区和排序。</strong></p><h6 id="4-执行-ReduceTask"><a href="#4-执行-ReduceTask" class="headerlink" title="4.执行 ReduceTask"></a>4.执行 ReduceTask</h6><p>输入 ReduceTask 的数据流是&lt;key, {value list}&gt;形式，用户可以自定义 reduce()方法进行逻辑处理，最终以&lt;key, value&gt;的形式输出。</p><p><img src="https://s2.loli.net/2024/07/01/NmOz8SnbXaMeAET.png" alt="20210617002008269[1].png"></p><ol><li><p><strong>Copy 阶段：</strong> Reduce 会从各个 MapTask 上远程复制一片数据（每个 MapTask 传来的数据都是有序的），并针对某一片数据，<strong>如果其大小超过一定國值，则写到磁盘上，否则直接放到内存中</strong></p></li><li><p><strong>Merge 阶段</strong>：在远程复制数据的同时， ReduceTask 会启动两个后台线程，分别对内存和磁盘上的文件进行合并，以防止内存使用过多或者磁盘文件过多。</p></li><li><p><strong>Sort 阶段</strong>：用户编写 reduce() 方法输入数据是按 key 进行聚集的一组数据。<br>为了将 key 相同的数据聚在一起， Hadoop 采用了基于排序的策略。<br>由于各个 MapTask 已经实现对自己的处理结果进行了<strong>局部排序</strong>，因此， ReduceTask 只需对所有数据进行一次<strong>归并排序即可</strong>。</p></li><li><p><strong>Reduce 阶段：</strong>对排序后的键值对调用 reduce() 方法，键相等的键值对调用一次 reduce()方法，每次调用会产生零个或者多个键值对，最后把这些输出的键值对写入到 HDFS 中</p></li><li><p><strong>Write 阶段</strong>： reduce() 函数将计算结果写到 HDFS 上。<br>合并的过程中会产生许多的中间文件(写入磁盘了)，但 MapReduce 会让写入磁盘的数据尽可能地少，并且最后一次合并的结果并没有写入磁盘，而是直接输入到 Reduce 函数。</p></li></ol><h6 id="5-写入文件"><a href="#5-写入文件" class="headerlink" title="5.写入文件"></a>5.写入文件</h6><p>MapReduce 框架会自动把 ReduceTask 生成的&lt;key, value&gt;传入 OutputFormat 的 write 方法，实现文件的写入操作。</p><h5 id="MapReduce论文阅读"><a href="#MapReduce论文阅读" class="headerlink" title="MapReduce论文阅读"></a>MapReduce论文阅读</h5><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>MapReduce，是 Google 早年提出了一种软件架构模型，支持大规模数据集的并行运算。现在这个概念被运用在大量分布式系统中。</p><p>相关的理论由 Google 在 2004 年发表在论文《MapReduce: Simplified Data Processing on Large Clusters》中，可以在这里阅读全文。13 页的小论文，信息密度比某些小论文不知道高到哪里去了。</p><p>由于本文是边阅读论文边记录下来的笔记，所以内容可能比较混乱。</p><h6 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h6><p>MapReduce 是一个很简单的并行处理模型，使用 MapReduce 框架，用户只需要指定两个函数：</p><p>Map 函数，负责将一个键值对处理成一系列中间键值对<br>Reduce 函数，负责将所有具有相同 key 的中间值合并<br>剩下的，就由框架自行处理，包括数据分发、任务分发、错误处理、负载均衡等等细节。用户无需掌握这些细节，更能关注于业务逻辑。</p><p>一个大致的处理流程是这样的：</p><p>Map 接受一个输入键值对，产生一系列中间键值对。MapReduce 框架将所有具有相同的中间 key 的中间值组织到一起，传递给 Reduce 函数。Reduce 函数，接收一个中间 key 和一系列中间值，函数通常将这些值聚合成一个较小的集合，有时每次 Reduce 函数调用只会产生一个结果值，甚至不产生结果。</p><p>以大规模文本单词计数为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">map(String key, String value):</span><br><span class="line">    // key：文章名称</span><br><span class="line">    // value：文章内容</span><br><span class="line">    for 单词 w in value:</span><br><span class="line">        增加中间计数(w, &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">reduce(String key, Iterator values):</span><br><span class="line">    // key：一个单词</span><br><span class="line">    // value：一系列计数</span><br><span class="line">    int result = 0;</span><br><span class="line">    for v in values:</span><br><span class="line">        result += ParseInt(v);</span><br><span class="line">    输出(ToString(result))</span><br></pre></td></tr></table></figure><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><h6 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h6><p>MapReduce 作为一种编程模型或者说编程思想，实现方式可以有很多。Google 在论文中给出了一种实现方法，用于局域网内互相连接的大量机器。执行流程如下图：</p><p><img src="https://s2.loli.net/2024/07/01/8MI6BTnkWy12GSt.jpg" alt="f292944c2748e9621815ada5cdb50bc7[1].png"></p><p>MapReduce 框架首先将输入文件划分为 M 片，每片通常为 16MB 到 64MB 大小。随后会启动集群中的机器（进程）。<br>集群中的一个进程是一个特殊的 master 进程。剩余的 worker 进程都由 master 分配任务。一共有 M 个 map 任务和 R 个 reduce 任务需要分配。master 会挑选空闲的 worker，一次分配一个 map 任务或者一个 reduce 任务。<br>被分配到 map 任务的 worker 读入对应分片的输入，从输入中解析出键值对，并分别将其传给用户定义的 map 函数。map 函数返回的中间键值对会被暂时缓存在内存里。<br>worker 内存中缓存的键值对，会被分片函数分成 R 个分片，并周期性地写进本地磁盘。这些键值对在磁盘上的位置会被发生给 master，master 负责将位置发送给被分配到 reduce 任务的 worker。<br>当一个 reduce worker 接收到 master 发送的这些位置，它会向保存这些内容的 map worker 发送 RPC 请求来读取这些内容。当一个 reducer worker 读取完所有的中间数据，就会将其根据 key 进行排序，这样所有相同 key 的数据就会聚合在一起。这种排序是必要的，因为通常许多不同的 key 会由同一个 reduce 任务处理。如果数据过大，可能会使用外部排序。<br>reduce worker 遍历有序的中间数据，对遇到的所有 key，都会将 key 和对应的值集合传给用户定义的 reduce 函数。reduce 函数的输出会被追加到一个最终的输出文件（每个 reduce 分片一个）。<br>当所有的 map 任务和 reduce 任务都完成后，MapReduce 的任务也就完成了。<br>运行结束后，MapReduce 的运行结果保存在 R 个输出文件中，通常这些文件会被用作下一个 mapreduce 任务的输入。</p><h6 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h6><p>这里只考虑 worker 挂掉的情况，不考虑 master 挂掉的情况，因为这可能涉及选举共识等复杂情况。</p><p>master 和 worker 会维持一个心跳，如果一段时间没有收到 worker 的回应，就会认为这个 worker 挂掉了。所有由这个 worker 完成的 map 任务都会被重新变成未开始状态，会被重新分配给其他 worker 执行。所有挂掉时正在进行的 map 或者 reduce 任务会被标记为未开始。</p><p>已完成的 map 任务需要重新执行是因为它们的结果存储在已经挂掉机器的本地硬盘上，而已经完成的 reduce 任务无需重新执行，reduce 任务的结果被放在全局的文件系统上。</p><p>如果一个 map 任务最初由 A 执行，后来 A 挂掉了，被重新分配给 B 执行，这个消息会被通知到所有执行 reduce 任务的 worker。所有还没有从 A 中读取数据的 reduce 任务会转而选择从 B 读取数据。</p><p>有时，会出现这种情况：部分机器的性能很低，但是由于网络通畅，不会被判定为挂掉，这种机器就会成为整个系统的短板，整个系统不得不等待慢速机器慢吞吞地执行完他们的任务。对于这种情况，Google 的实现采用的一种机制来提升：在整体 MapReduce 操作快要结束时，master 会将所有仍然在进行的任务分配给其他空闲的 worker 执行。无论是原来的 worker，还是二次分配的 worker 完成了任务，这个任务都算是成功完成。</p><p>性能提升与小优化小扩展略去。</p><h4 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h4><ul><li><p>GFS（google file system）</p><ul><li><p>大数据存储难点：容错能力（分片副本）、数据一致性、性能（快捷）</p></li><li><p>特点：大文件（分为64Mb的多个chunk块存储）、速度快、通用存储系统、chunk server副本、自动恢复、顺序读取、成本低</p></li><li><p>GFS架构：<br>client结点<br>master结点（保存元数据）：文件名—数据块列表映射、版本、主数据块、作为master的时限、log、checkpoint，磁盘存储来容错<br>块handle（句柄）<br>块server结点：默认副本数为3来容错，顺序存储数据</p><p><img src="https://s2.loli.net/2024/07/01/z8pWkisElhwFQYB.png" alt="20201208211708899[1].png"></p></li><li><p>GFS读：</p><p>1.client将想读的文件名，偏移量发送到master服务器</p><p>2.master发送<strong>块handle</strong>和<strong>块服务器号</strong>等元数据给client</p><p>3.client<strong>缓存</strong>master发回的数据</p><p>4.client将请求根据元数据发送到最近的副本</p><p>5.副本返回数据给client</p></li><li><p>GFS写：（追加写）</p><p>没有主数据块：<br>找到更新到最新的副本们，<br>master选取一个作为<strong>主数据块</strong>，写入磁盘，设置主数据块的<strong>时效</strong><br>增加<strong>版本号</strong>，写入磁盘<br>主数据块写入，再<strong>同步所有副本</strong><br>返回给client 插入成功 or 插入失败</p></li></ul></li></ul><h5 id="GFS详解"><a href="#GFS详解" class="headerlink" title="GFS详解"></a>GFS详解</h5><p><strong>是什么？</strong><br>GFS是一个<strong>可扩展的分布式文件系统</strong>，用于大型的、分布式的、对大量数据进行访问的应用。它运行于廉价的普通硬件上，并提供容错功能。它可以给大量的用户提供总体性能较高的服务。</p><p><strong>为什么要用GFS?</strong><br>大量数据的存储会面临很多的难点：</p><p>大数据下需要良好的表现就需要分片和容错。在具体操作过程中，涉及到容错一般使用副本来解决，然而<strong>副本的使用会面临不一致问题</strong>。如果有一致性的要求，就会导致表现降低。</p><p>所谓的一致性，就是在集群中表现的像与一台机器或一个副本进行交互那样</p><p>因为GFS不但是一个理论成熟的框架结构，更是一种通过长期实际使用证明了其优秀性能的分布式架构。GFS是一种松散一致性模型，这是其具有优越的性能主要原因之一。</p><p>松散一致性模型关键：</p><p>依靠添加而不是重写<br>检查点<br>自我验证（校验和）<br>自我认证记录</p><p><strong>组成？</strong><br>一个GFS集群通常由1个Master，多个ChunkServer组成，并同时接受多个Client的访问。</p><p><strong>交互概要图</strong></p><p><img src="https://s2.loli.net/2024/07/01/z8pWkisElhwFQYB.png" alt="20201208211708899[1].png"></p><p><strong>流程介绍：</strong></p><ol><li><p>client发送请求给Master，寻找存储了对应副本的chunkserver。</p></li><li><p>Master通过遍历本地记录获取chunkserver的信息，包括处理信息和地址信息</p><p>Master不但会在<strong>启动时获取</strong>集群中所有chunkserver的信息，还会在<strong>后续的周期性的获取</strong>chunkserver信息。所有的信息都是存在Master的<strong>RAM里</strong></p></li><li><p>Master将信息返回给client</p></li><li><p>client之后直接通过地址信息与chunkserver交互</p></li></ol><p><strong>GFS交互流程图：</strong></p><p><img src="https://s2.loli.net/2024/07/01/KXZtz9TYPAw58mh.png" alt="a72fcfcd40764bc1adaca3eece85a10e[1].png"></p><p>Secondary Replica:辅助副本</p><p><strong>要点：</strong></p><ol><li><p><strong>Master</strong>通过lease(租约)和Primary Replica(主副本)本来构建交互的流程。</p><p>Master是做出决策、创建新的块和赋值，并协调各种系统范围的活动，以保证块完全复制，平衡所有chunkserver的负载，同时还负责垃圾回收。</p><p>Master的操作通过锁来保证命名空间范围内的序列化</p></li><li><p><strong>主副本</strong>是从众多chunkserver中选出的<strong>唯一特殊副本</strong>，该副本的特殊性在于其维护了一个定时的租约列表。</p></li><li><p><strong>租约</strong>指的是<strong>一组由用户发来的有顺序的指令集合</strong></p></li><li><p>主副本之外的副本都需要通过主副本中的这个列表来执行指令，以保证每个副本执行的最终结果相同。</p></li></ol><p><strong>Master失效怎么办</strong><br>有<strong>副本master</strong>，拥有master状态的完整副本；GFS论文中设计需要人工干预才能切换到其中一种主故障后的副本。</p><p><strong>如何保障副本记录的正确性</strong><br>使用<strong>原子记录</strong>至少追加一次的方法。</p><p><strong>为什么不使用完全追加？</strong></p><p>如果在其中一个写入失败时客户端重新尝试写入，这将导致数据在未失败的副本上多次附加。不同的设计可能会检测到重复的客户端请求，例如，原始故障之间的主要故障请求和客户端的重试。</p><p><strong>应用程序如何知道哪些部分组成填充，哪些是重复记录？</strong><br>为了<strong>检测填充</strong>，应用程序可以放置一个可预测的幻数在有效记录的开头，或包含<strong>一个校验和</strong>，该校验和可能<strong>仅当记录有效时才有效</strong>。该应用程序可以检测通过在记录中包含唯一 ID 来复制。然后，如果它读取与先前记录具有相同 ID 的记录，它知道它们是彼此的重复。GFS 为应用程序提供了一个库处理这些情况。</p><p><strong>什么是校验和？</strong><br>校验和算法将<strong>一个字节块</strong>作为输入<strong>并返回一个单个数字</strong>，它是所有输入字节的函数。例如，一个简单校验和可能是输入中所有字节的总和（mod一些大数字）。GFS 存储每个块的校验和以及块。当一个chunkserver在它的磁盘上写一chunk时，它首先<strong>计算新块的校验和，并将校验和保存在磁盘上以及块</strong>。当一个chunkserver从磁盘读取一个chunk时，它还读取先前<strong>保存的校验和</strong>，从磁盘<strong>读取的块</strong>，并检查两个校验和是否匹配。如果数据已被磁盘损坏，校验和不匹配，并且chunkserver 会知道返回错误。另外，一些 GFS应用程序存储自己的校验和，而不是应用程序定义的记录，在 GFS 文件中，以区分正确的记录和填充。</p><p><strong>GFS 以正确性换取性能在多大程度上可以接受</strong><br>这是分布式系统中反复出现的主题。强一致性通常出现在需要复杂且需要交互的协议机器之间。经过利用特定应用程序类可以容忍的放松方式一致性，可以设计出具有良好性能和足够的一致性。例如，<strong>GFS 针对 MapReduce 进行了优化对大文件需要高读取性能的应用程序可以在文件中有漏洞，记录显示多次，并且不一致的读取</strong>。</p><p><strong>Google 是否仍使用 GFS？</strong><br>有传言说 GFS 已经被一个叫做Colossus，总体目标相同，但在 master 方面有所改进性能和容错性。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 6.824 </tag>
            
            <tag> MapReduce </tag>
            
            <tag> GFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本数据基础设施-调研</title>
      <link href="/2024/06/28/%E6%97%A5%E6%9C%AC%E6%95%B0%E6%8D%AE-%E8%B0%83%E7%A0%94/"/>
      <url>/2024/06/28/%E6%97%A5%E6%9C%AC%E6%95%B0%E6%8D%AE-%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="日本数据基础设施-调研"><a href="#日本数据基础设施-调研" class="headerlink" title="日本数据基础设施-调研"></a>日本数据基础设施-调研</h1><h3 id="1）法律法规"><a href="#1）法律法规" class="headerlink" title="1）法律法规"></a>1）法律法规</h3><h4 id="促进数据流通与利用基本法"><a href="#促进数据流通与利用基本法" class="headerlink" title="促进数据流通与利用基本法"></a>促进数据流通与利用基本法</h4><p>日本的促进数据流通与利用基本法并不是一个单独的具体法律名称，而是对日本在数据流通与利用方面进行的一系列法律和政策探索的统称。以下是一些关键点，概述了日本在这一领域的实践和政策框架：</p><ol><li><p><strong>多方协作机制</strong> : 日本通过政府、产业界和行业协会的协作，推动数据流通与利用。政府层面成立新机构专项推进，如“数字厅”取代IT综合战略本部，统筹推进全国数字社会建设、数字化转型。</p></li><li><p><strong>《综合数据战略》</strong> : 数字厅作为责任部门推动实施《综合数据战略》，旨在建立一个放心高效的数据使用机制，推动数据在国内以及跨国安全、高效流通。</p></li><li><p><strong>数据基础设施建设</strong> : 产业层面积极建设数据基础设施、研发数据安全技术、建设数据交易市场。例如，NTT集团构建数据协作平台——全球可信数据空间，推动跨企业、跨行业、跨国界的数据利用与协作。</p></li><li><p><strong>数据社会联盟</strong> : 成立数据社会联盟，对产业数据空间等领域的技术标准进行规范，推进数字技术研发和数据流通领域标准及规范的建立。目前正在开发跨学科的数据协作平台DATA-EX。</p></li><li><p><strong>数据流通利用基础</strong> : 日本政府以及各行业组织在数据交易基础制度、数据流通基础设施等方面开展了一系列探索，包括数据权属、定价等相关制度规定。</p></li><li><p><strong>跨境数据流动</strong> : 日本倡导数据自由流动，寻求在跨境数据流动方面发挥领导作用。例如，在G20大阪峰会上提出建立“数据流通圈”概念，推动建立新的国际数据监督体系。</p></li><li><p><strong>数据空间建设</strong> : 推动数据空间建设，如政务数据GBiz平台、农业数据WAGRI平台、防灾信息SIP4D平台等，以实现企业间数据安全、可信、高效流通共享。</p></li><li><p><strong>多层次数据交易市场</strong> : 鼓励多层次数据交易市场发展，推动数据资产化、资本化，例如“个人数据商店”和“数据银行”模式，探索个人数据收益分享制度。</p></li><li><p><strong>《数字社会形成基本法》</strong> : 该法律是<strong>日本数字化转型的核心</strong>，它规定了数字社会形成措施的基本原则和政策，包括设立数字机构和制定优先计划，强调数据的流通和利用是数字社会的重要基石。</p></li><li><p><strong>个人号码制度</strong> : 作为数字化政务的大前提，个人号码制度是日本政府推行的一项个人识别制度，通过个人号码卡实现行政手续的“一站式”服务。</p></li></ol><p>这些措施和政策体现了日本在促进数据流通与利用方面的全面战略和实践，旨在建立一个安全、高效、开放的数据生态系统。</p><h4 id="2003：日本个人信息保护法"><a href="#2003：日本个人信息保护法" class="headerlink" title="2003：日本个人信息保护法"></a>2003：日本个人信息保护法</h4><p>日本的个人信息保护法（Act on the Protection of Personal Information, APPI）在2003年首次制定，是一部旨在保护个人信息的法律，它规定了个人数据的处理方式，以确保个人权利和利益得到尊重，并在随后的几年中经过了多次修订，以应对新的挑战和需求，如技术进步和国际合作的需要。该法律的最近一次重大修订是在2020年，预计将在2022年6月11日前由政令规定的日期起施行。此外，2021年9月，日本个人信息保护委员会更新了关于该法律的指南问答，新增了人脸识别信息使用等具体规定。</p><p>以下是关于该法律的一些关键点：</p><ol><li><strong>立法目的</strong>: 该法律的目的是保护个人信息的合理和有效应用，同时促进新产业的创造和经济社会的活力，提高日本人民的生活质量。</li><li><strong>适用范围</strong>: 它适用于所有处理个人信息的实体，包括公司、政府机构和独立行政法人等。</li><li><strong>定义</strong>: 法律中定义了“个人信息”（personal information）是指可以识别特定个人的信息，以及“匿名处理信息”（anonymously processed information），即通过系统化的方式处理，使其无法识别特定个人的信息。</li><li><strong>基本原则</strong>: 法律提出了适当处理个人信息的总体愿景，并要求政府制定基本政策来促进个人信息保护措施的全面和整体推进。</li><li><strong>数据主体的权利</strong>: 法律赋予数据主体一系列权利，包括访问权、更正权和删除权等，以确保个人信息的准确性和安全。</li><li><strong>数据处理者的义务</strong>: 数据处理者必须采取必要的措施来保护个人信息，防止未经授权的访问、泄露、丢失或破坏，并在处理个人信息时遵守法律规定的原则和标准。</li><li><strong>数据泄露报告</strong>: 如果发生个人信息泄露，数据处理者必须按照规定向个人信息保护委员会（Personal Information Protection Commission, PPC）报告，并在必要时通知受影响的个人。</li><li><strong>跨境数据传输</strong>: 法律对个人信息的跨境传输提出了要求，确保在将个人信息传输到国外时，接收方有足够的保护措施来维护个人信息的安全。</li><li><strong>监管机构</strong>: 日本个人信息保护委员会是负责监督和执行个人信息保护法的独立行政机构。</li><li><strong>违规处罚</strong>: 违反个人信息保护法的行为可能会受到行政处罚，包括责令改正、业务暂停或终止，以及在某些情况下的刑事处罚。</li></ol><h4 id="2021年6月：综合数据战略"><a href="#2021年6月：综合数据战略" class="headerlink" title="2021年6月：综合数据战略"></a>2021年6月：综合数据战略</h4><ul><li><p><strong>法律&#x2F;政策名称</strong>: 综合数据战略</p></li><li><p><strong>概要介绍</strong>:  2021年6月，日本发布“综合数据战略”，旨在“通过确保信赖和公益性，构筑安心且高效地使用数据的结构，<strong>同时，从世界范围内确保对日本数据本身及其生成、流通方式的信赖，在世界范围内放心地利用日本数据，也让世界数据能在日本放心存放的社会”。</strong>日本政府计划使行政机构本身成为全国最大的平台，让公共数据充分流动。其由日本数字政府内阁阁员会议下设置“数据战略特别工作组”具体制定。内阁会议决定将该工作组成果与《面向实现数字社会的重点计划》合并为《综合数据战略》。《综合数据战略》旨在建设日本打造世界顶级数字国家所需的数字基础；明确了数据战略的基本思路，制定了社会愿景以及实现该愿景的基本行动指南。</p><p><strong>2021年9月，日本成立了数字厅以实施该“综合数据战略”。</strong>在“综合数据战略”中，日本设想了一个<strong>“七层两要素”的数据治理架构：</strong></p><p>表1：日本“综合数据战略”提出的数据治理架构</p><table><thead><tr><th>层级</th><th>内容</th><th>要素</th></tr></thead><tbody><tr><td>第七层</td><td>战略、政策</td><td>要素一：社会实施和业务改革</td></tr><tr><td>第六层</td><td>组织：行政及民间业务改革</td><td></td></tr><tr><td>第五层</td><td>规则：除了完善数据标准和质量等数据联合所需的规则外，还完善了用于放心利用数据的信任基础等规则。</td><td>要素二：数据环境建设</td></tr><tr><td>第四层</td><td>利用环境：为各种各样的主体熟练使用个人数据存储、信息银行和数据交易市场等联合的数据提供有利环境。</td><td></td></tr><tr><td>第三层</td><td>合作平台（工具）：为了系统地联合上述数据，配备了目录等数据联合工具。</td><td></td></tr><tr><td>第二层</td><td>数据：从社会活动基础数据着手，从结构上构筑必要的数据。</td><td></td></tr><tr><td>第一层</td><td>基础设施：支撑数字社会的5G、数据中心、计算基础设施等基础设施</td><td></td></tr></tbody></table><p>之所以实施数据全产业链战略，是因为日本意识到其存在数字化设施不健全、缺乏基础数据、官民商数据共享不充分、社会整体的数据素养低、对隐私强烈担忧等问题。如不实施全面的措施，数据共享难以开展。此外，日本政府还计划使作为最大数据持有者的行政机构本身成为全国最大的平台，让公共数据充分流动。</p></li></ul><h4 id="数字改革关联六法"><a href="#数字改革关联六法" class="headerlink" title="数字改革关联六法"></a>数字改革关联六法</h4><p>（相当一部分查不到细则，重点是《数字社会形成基本法》）</p><p>日本国会在2021年5月通过了六部与数字化改革相关的法案，这些法案被统称为“数字改革关联六法”。这些法案的核心目标是推动日本的数字化转型，包括设立数字厅来统筹全国信息系统的管理，确立数字化社会的基本发展理念等。其中，《数字社会形成基本法》是这一系列法案中的重要组成部分，它规定了数字社会形成措施的基本原则和基本政策，以及中央政府、地方政府和企业经营者的责任。日本政府决定于2021年9月1日正式设立数字厅，作为数字化改革的统一领导部门。这些法案的通过被视为日本数字化改革向前迈出的一大步，标志着日本数字化战略重心从“网络建设”转向“数据活用”的新阶段。</p><ol><li><p><strong>《数字社会形成基本法》</strong>:</p><ul><li>该法律是数字改革的核心，规定了数字社会形成措施的基本原则和基本政策，明确了中央政府、地方政府和企业经营者的责任，以及设立数字机构和制定优先计划的要求。</li></ul></li><li><p><strong>《数字厅设置法》</strong>:</p><ul><li>该法律明确了数字厅作为数字化改革的统一领导部门的组织和职责，确立了数字厅在数字化改革中的中心地位。</li></ul></li><li><p><strong>《数字改革关联法》</strong>:</p><ul><li>该法律是日本官方和民间的数字化改革指挥塔，涉及国家信息系统的统筹管理规则。</li></ul></li><li><p><strong>《个人信息保护法》修正案</strong>:</p><ul><li>通过修改，将统一日本各地方自治体、民间机构等各不相同的个人信息保护法则，并导入全国统一的个人信息保护制度，推进日本行政手续线上化改革等数字化改革。</li></ul></li><li><p><strong>《地方公共团体信息系统标准化法》</strong>:</p><ul><li>该法律旨在统一地方政府的信息系统，规定地方政府的信息系统应统一为国家指定的格式，以促进数据互通和标准化。</li></ul></li><li><p><strong>其他相关法律</strong>:</p><ul><li>除了上述法律外，还包括其他与数字化改革相关的法律，如促进数据的开放和利用、加强网络安全等。</li></ul></li></ol><p>这六部法律共同推动了日本数字化改革，旨在解决数字化进程中的各种问题，如行政电子化程度低下、数据孤岛、个人信息保护等，同时促进数据的开放、流通和利用，提高行政效率和透明度，推动经济社会的数字化转型。通过这些法律的实施，日本政府希望建立一个安全、便捷、高效的数字社会。</p><h5 id="2021年5月：数字社会形成基本法（重点）"><a href="#2021年5月：数字社会形成基本法（重点）" class="headerlink" title="2021年5月：数字社会形成基本法（重点）"></a>2021年5月：数字社会形成基本法（重点）</h5><ul><li><strong>法律&#x2F;政策名称</strong>: 数字社会形成基本法</li><li><strong>概要介绍</strong>:  该法规定了数字社会形成措施制定的基本原则和基本政策，中央政府、地方政府和企业经营者的责任，设立数字机构，制定优先计划，标志着日本数字化的战略重心已从“网络建设”转向“数据活用”。</li><li>相关涉及名词：<ol><li><strong>个人数据商店（Personal Data Store，PDS）</strong>:<ul><li><strong>定义</strong>: 个人数据商店代表用户管理其个人数据，并根据用户个人意愿将其提供给第三方。它允许用户控制自己的数据，并在第三方需要时提供数据，从而实现数据的有序流通及价值增值。</li></ul></li><li><strong>数据银行</strong>:<ul><li><strong>定义</strong>: 数据银行模式下，银行根据与用户个人签订的合同管理个人数据，并根据个人的指示或预先指定的条件向第三方提供数据。</li></ul></li><li><strong>Data Plaza</strong>:<ul><li><strong>定义</strong>: 由富士通公司在2013年4月建立，旨在为客户提供一个互通有无、促进合作创新的平台，打破数据孤岛，使不同领域的客户能够安全、高效地共享信息。</li><li><strong>分类</strong>: Data Plaza可以归类为“数据的流通、开发利用”基础设施，因为它不仅促进了数据的流通，还提供了数据增值解决方案。</li></ul></li><li><strong>数据使用权交易市场</strong>:<ul><li><strong>定义</strong>: 这是一个以“数据使用权证书”作为数据交易标的的市场，将合法使用数据的权利证券化。</li></ul></li><li><strong>个人号码制度</strong>:<ul><li><strong>定义</strong>: 每位拥有日本在留卡的居民都将拥有一个12位数字的号码，用于多种行政和服务场合。</li></ul></li><li><strong>数字厅</strong>:<ul><li><strong>定义</strong>: 数字厅是日本政府为了推进数字化改革而设立的统一领导部门。</li></ul></li><li><strong>地方公共团体信息系统标准化法</strong>:<ul><li><strong>定义</strong>: 该法律旨在统一地方政府的信息系统，规定地方政府的信息系统应统一为国家指定的格式。</li></ul></li></ol></li></ul><h5 id="2021年5月：数字厅设置法"><a href="#2021年5月：数字厅设置法" class="headerlink" title="2021年5月：数字厅设置法"></a>2021年5月：数字厅设置法</h5><p>《数字厅设置法》 是日本为了推进行政数字化和改革而制定的一项重要法律。该法律确立了数字厅的组织结构、职责和运作方式。以下是《数字厅设置法》的一些关键点：</p><ol><li><p><strong>成立时间</strong>: 2021年5月，日本国会通过了包括《数字厅设置法》在内的六部“数字改革关联法案”，并于2021年9月1日正式设立数字厅。</p></li><li><p><strong>目的</strong>: 数字厅的成立旨在加速日本的数字化改革，提高行政手续线上操作的便捷性，削减行政运营成本，并解决政府在数字化方面的滞后问题。</p></li><li><p><strong>组织结构</strong>: 数字厅由日本首相担任厅长，下设数字大臣负责具体事务。除数字大臣外，还有副大臣、大臣政务官以及数字总监等职位。</p></li><li><p><strong>人员构成</strong>: 数字厅的人员规模约为600人，其中包括约200名来自私营部门的数字化领域人才，体现了政府对民间专业人才的重视。</p></li><li><p><strong>职责</strong>: 数字厅负责统筹全国信息系统的管理，推进政府内部的数字化改革，实现从“数字化”到“数字治理”的质的提升。此外，数字厅还负责制定数字社会形成的基本政策和优先计划。</p></li><li><p><strong>权限</strong>: 数字厅拥有向其他中央政府部门发出业务修改等建议的权限，以促进不同政府部门间的标准化和互通化。</p></li><li><p><strong>目标</strong>: 数字厅的远期目标是“用智能手机在60秒内完成所有行政程序”，体现了日本政府对于提高行政效率的坚定决心。</p></li><li><p><strong>其他职责</strong>: 数字厅还负责推广“我的号码”系统，为所有居民提供身份证号码，这被视为改善公共数字服务的关键。</p></li></ol><p>《数字厅设置法》的制定和数字厅的成立标志着日本政府在数字化转型方面迈出了重要一步，展现了其推动国家治理现代化和提升公共服务效率的决心。</p><h5 id="2021年9月：数字厅的设立"><a href="#2021年9月：数字厅的设立" class="headerlink" title="2021年9月：数字厅的设立"></a>2021年9月：数字厅的设立</h5><ul><li><strong>法律&#x2F;政策名称</strong>: 数字厅的设立</li><li><strong>概要介绍</strong>:  数字厅的成立旨在迅速且重点推进数字社会进程，统筹推进全国数字社会建设、数字化转型。</li><li>IT方面技术战略的政府组织体制包括：<ul><li>由内阁的综合创新战略推进会议，负责政府内部调整及推进《综合创新战略》；</li><li>内阁府的综合科学技术创新会议，汇总各部门的科学技术创新方面相关政策，实施综合调整；</li><li>各省厅机构在各自管辖的产业和领域中，负责具体措施的制定和执行。</li></ul></li></ul><h5 id="2021年5月：地方公共团体信息系统标准法"><a href="#2021年5月：地方公共团体信息系统标准法" class="headerlink" title="2021年5月：地方公共团体信息系统标准法"></a>2021年5月：地方公共团体信息系统标准法</h5><p>地方公共团体信息系统标准化法是日本为推进地方行政数字化和信息系统标准化而制定的法律。这项法律的目的是统一地方政府的信息系统，以促进数据互通和标准化。以下是关于该法律的一些关键点：</p><ol><li><p><strong>统一信息系统</strong>: 该法律要求地方政府的信息系统应统一为国家指定的格式，以实现不同地方政府间的信息共享和系统互通。</p></li><li><p><strong>标准化对象</strong>: 标准化的对象包括儿童津贴、居民基本台帐、选举人名簿管理、固定资产税、个人居民税、法人居民税、轻型汽车税、就学、国民健康保险、国民年金、残疾人福利、后期高龄者医疗护理保险等。</p></li><li><p><strong>制定主体</strong>: 由中央政府负责制定地方公共团体信息系统标准化的基本方针；具体主管上述领域的负责人负责制定信息系统标准；首相和总务大臣负责制定数据协作、网络安全、云利用等各信息系统共通事项的标准。</p></li><li><p><strong>地方政府的义务</strong>: 地方政府必须在省厅规定的期限内使其信息系统达标，并努力在国家准备的“云活用”环境中活用信息系统。</p></li><li><p><strong>提高行政效率</strong>: 通过标准化，旨在提高行政手续线上操作的便捷性，削减行政运营成本，实现更高效的政府服务。</p></li><li><p><strong>促进数据共享</strong>: 该法律有助于打破数据孤岛，促进不同地方政府和中央政府之间数据的共享和利用。</p></li><li><p><strong>支持数字化改革</strong>: 作为数字改革关联六法的一部分，该法律支持日本政府推动的全面数字化改革，包括数字厅的设立和运作。</p></li></ol><p>地方公共团体信息系统标准化法是日本数字化转型战略的关键组成部分，它通过标准化措施，加强了地方政府信息系统的整合和互操作性，为建立一个更加高效和透明的行政体系奠定了基础。</p><h3 id="2）相关名词概念"><a href="#2）相关名词概念" class="headerlink" title="2）相关名词概念"></a>2）相关名词概念</h3><table><thead><tr><th>年份</th><th>法规&#x2F;法律&#x2F;政策&#x2F;定义</th><th>名词</th><th>解释</th><th>属于哪类的范围</th></tr></thead><tbody><tr><td>2021年</td><td>数字社会形成基本法</td><td>个人数据商店（Personal Data Store，PDS）</td><td>个人数据商店代表<strong>用户管理其个人数据</strong>，<strong>并根据用户个人意愿将其提供给第三方。它允许用户控制自己的数据，并在第三方需要时提供数据，从而实现数据的有序流通及价值增值。</strong></td><td>个人</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>数据银行</td><td>数据银行模式下，银行根据与用户个人签订的合同管理个人数据，并根据个人的指示或预先指定的条件向第三方提供数据。</td><td>政府</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>政务数据GBiz平台、农业数据WAGRI平台、防灾信息SIP4D平台</td><td>这些平台作为<strong>数据空间</strong>，促进不同领域数据的安全、可信、高效流通共享，属于数据流通的基础设施。</td><td>政府</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>Data Plaza</td><td>富士通公司2013年4月建立的数据交易机构，为客户提供互通有无、促进合作创新的平台，打破数据孤岛。</td><td>企业</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>数据使用权交易市场</td><td>这个市场属于“数据的流通、开发利用”类别，因为它提供了一个平台，使得数据使用权可以像证券一样被交易和流通，从而促进了数据的开发利用。</td><td>企业&#x2F;政府</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>个人号码制度</td><td>每位拥有日本在留卡的居民都将拥有一个12位数字的号码，用于多种行政和服务场合的制度。</td><td>政府</td></tr><tr><td>2021年</td><td>数字厅设置法</td><td>数字厅</td><td>日本政府设立的统一领导部门，推进数字化改革，负责制定和推进相关政策。</td><td>政府</td></tr><tr><td>-</td><td>《综合数据战略》的背景下</td><td>DATA-EX</td><td>建立一个数据协作平台，促进不同领域和不同行业的数据交换与利用，目标是连接各行业的特定数据平台，通过提供一个统一的数据交换环境，促进不同领域的数据交换和协作。</td><td>日本数据社会联盟</td></tr></tbody></table><h3 id="3）数据基础设施相关概念介绍"><a href="#3）数据基础设施相关概念介绍" class="headerlink" title="3）数据基础设施相关概念介绍"></a>3）数据基础设施相关概念介绍</h3><table><thead><tr><th>年份</th><th>法规&#x2F;法律&#x2F;政策&#x2F;定义</th><th>名词</th><th>解释</th><th>属于哪类的范围</th><th>属于哪种基础设施</th></tr></thead><tbody><tr><td>2021年</td><td>数字社会形成基本法</td><td>个人数据商店（Personal Data Store，PDS）</td><td>个人数据商店代表<strong>用户管理其个人数据</strong>，<strong>并根据用户个人意愿将其提供给第三方。它允许用户控制自己的数据，并在第三方需要时提供数据，从而实现数据的有序流通及价值增值。</strong></td><td>个人</td><td>数据的流通</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>数据银行</td><td>数据银行模式下，银行根据与用户个人签订的合同管理个人数据，并根据个人的指示或预先指定的条件向第三方提供数据。</td><td>个人</td><td>数据的供给</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>政务数据GBiz平台、农业数据WAGRI平台、防灾信息SIP4D平台</td><td>这些平台作为<strong>数据空间</strong>，促进不同领域数据的安全、可信、高效流通共享，属于数据流通的基础设施。</td><td>政府</td><td>数据的流通、供给</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>Data Plaza</td><td>富士通公司2013年4月建立的数据交易机构，为客户提供互通有无、促进合作创新的平台，打破数据孤岛。</td><td>企业</td><td>数据的供给、流通</td></tr><tr><td>2021年</td><td>数字社会形成基本法</td><td>数据使用权交易市场</td><td>以“数据使用权证书”作为交易标的，将合法使用数据的权利证券化，激活数据交易流通的市场。</td><td>企业&#x2F;政府</td><td>数据的流通</td></tr><tr><td>-</td><td>《综合数据战略》的背景下</td><td>DATA-EX</td><td>建立一个数据协作平台，促进不同领域和不同行业的数据交换与利用，目标是连接各行业的特定数据平台，通过提供一个统一的数据交换环境，促进不同领域的数据交换和协作。</td><td>日本数据社会联盟（政府）</td><td>数据的流通</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 调研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础设施 </tag>
            
            <tag> 数据空间 </tag>
            
            <tag> 数字化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（七）案例研究</title>
      <link href="/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89%E6%A1%88%E4%BE%8B%E7%A0%94%E7%A9%B6/"/>
      <url>/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89%E6%A1%88%E4%BE%8B%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="案例研究"><a href="#案例研究" class="headerlink" title="案例研究"></a>案例研究</h1><h4 id="7-1-分布式文件系统"><a href="#7-1-分布式文件系统" class="headerlink" title="7.1 分布式文件系统"></a>7.1 分布式文件系统</h4><p>GFS</p><p><a href="https://blog.csdn.net/tianwailaibin/article/details/6722956/?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%B7%E6%98%AF%E4%BB%80%E4%B9%88&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-6722956.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(459条消息) 什么是簇：什么是卷_tianwailaibin的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/354450124">【MIT 6.824】学习笔记 3: GFS - 知乎 (zhihu.com)</a></p><p><img src="https://s2.loli.net/2024/06/26/zCHi1YPJGlQMZUo.webp" alt="v2-75851b9c18c4b4b4b84507a9122129fa_1440w[1].webp"></p><h4 id="7-2-分布式协调服务"><a href="#7-2-分布式协调服务" class="headerlink" title="7.2 分布式协调服务"></a>7.2 分布式协调服务</h4><p>Zookeeper</p><p><a href="https://zhuanlan.zhihu.com/p/62526102">什么是ZooKeeper？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/64702090">zookeeper原理详解 - 知乎 (zhihu.com)</a></p><p>[Zookeeper纸上谈兵——Zookeeper与CAP原则-CSDN博客](<a href="https://blog.csdn.net/qq_38194699/article/details/109016025?ops_request_misc=%7B%22request_id%22:%22171939403416800178545807%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171939403416800178545807&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-109016025-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Zookeeper%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5%E2%80%94%E2%80%94Zookeeper%E4%B8%8ECAP%E5%8E%9F%E5%88%99_cap">https://blog.csdn.net/qq_38194699/article/details/109016025?ops_request_misc=%7B%22request%5Fid%22%3A%22171939403416800178545807%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=171939403416800178545807&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-109016025-null-null.142^v100^pc_search_result_base8&amp;utm_term=Zookeeper纸上谈兵——Zookeeper与CAP原则_cap</a> zookeeper_Amazing Coder的博客-CSDN博客]&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（五）分布式事务</title>
      <link href="/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="5-1-什么是分布式事务"><a href="#5-1-什么是分布式事务" class="headerlink" title="5.1 什么是分布式事务"></a>5.1 什么是分布式事务</h2><p><strong>ACID:</strong></p><ul><li>原子性（Atomicity）：一个事务被视为一个不可分割的最小工作单位，事务中的所有操作要么全部完成，要么全部撤销回滚，不允许出现部分完成的情况。</li><li>一致性（Consistency）：事务开始前和结束后，数据库必须处于一致的状态，即事务执行后所得的结果必须符合预期的规定的结构和约束条件。</li><li>隔离性（Isolation）：多个事务相互隔离不受干扰，每个事务只能“看到”其所执行的数据和其他事务已提交的数据，而看不到其他事务未提交的数据。</li><li>持久性（Durability）：一个事务提交后，它对数据库的改变必须被永久保存到数据库中，即使出现断电等故障，其对数据库的改变也不能丢失。</li></ul><p>分布式事务两种变体：</p><ul><li>同一份数据需要在多个副本上更新，一个分布式事务需要更新所有的副本，如果有的节点提交了事务，有的节点回滚了事务，那么这样的结果对于用户来说是无法接受的。（可利用单主复制解决）</li><li>数据进行了分区，事务跨越多个节点，还要同时保证整体数据一致和事务的ACID属性。（常见且重点）</li></ul><p>分布式事务通常不讨论ACID中的一致性。</p><p>想要实现持久性，只需在向客户端返回响应之前，确保将数据存储再非易失性存储设备即可，通常还会包括一些WAL或其他日志文件，虽然非易失性存储设备可能会损坏，但不考虑极端的情况，通过备份就可以解决该问题。、</p><p>原子性：原子提交（Atomic Commit）</p><p>隔离性：并发控制（Concurrency Control）(锁和MVCC)</p><h2 id="5-2-原子提交"><a href="#5-2-原子提交" class="headerlink" title="5.2 原子提交"></a>5.2 原子提交</h2><p>原子性的保证在分布式和单机系统中都很难。</p><p>方法：日志&#x2F;WAL，可以回滚，撤销</p><p>分布式的原子性的实现：</p><ul><li>原子提交协议（Atomic Commit Protocol）<ul><li>协定性：所有的都同意一个值，那么所有进程要么一起提交事务，要么一起终止事务</li><li>有效性：如果所有进程都没问题，就提交，但凡有一个有问题，就终止</li><li>终止性：<ul><li>弱终止条件：如果没有任何故障发生，那么<strong>所有进程</strong>最终都会作出决议</li><li>强终止条件：<strong>没有发生故障的进程</strong>最终会做出决议</li></ul></li></ul></li></ul><h3 id="5-2-1-两阶段提交协议"><a href="#5-2-1-两阶段提交协议" class="headerlink" title="5.2.1 两阶段提交协议"></a>5.2.1 两阶段提交协议</h3><p><img src="https://s2.loli.net/2024/06/26/ngkdOJCI5bAxcLz.png" alt="两阶段提交.png"></p><p><a href="https://blog.csdn.net/a1102325298/article/details/96481642">(443条消息) 两阶段提交协议（two phase commit protocol，2PC）详解_两阶段协议_延迟满足的博客-CSDN博客</a></p><p>两阶段协议存在的问题：</p><ul><li>同步阻塞问题</li><li>单点故障问题</li><li>数据不一致问题</li><li>提交阶段不确定问题</li></ul><p>基于 2PC 存在的问题，后来有人提出了三阶段提交协议，在其中引入超时的机制，将阶段 1 分解为两个阶段：在超时发生以前，系统处于不确定阶段；在超时发生以后，系统则转入确定阶段。</p><p>还有解决方法：Parallel Commits，第一阶段的结果已知（写入全局日志中），返回给客户端，异步执行第二阶段，该方法要跟共识算法一起工作。</p><h3 id="5-2-2-三阶段提交"><a href="#5-2-2-三阶段提交" class="headerlink" title="5.2.2 三阶段提交"></a>5.2.2 三阶段提交</h3><p>非阻塞协议，可以在协调者寄了的时候选出新的协调者推进事务执行</p><p><a href="https://blog.csdn.net/m0_37840000/article/details/119743288?ops_request_misc=%7B%22request_id%22:%22168174759216800225586584%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168174759216800225586584&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119743288-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE&spm=1018.2226.3001.4187">(443条消息) 三阶段提交协议(3PC)_愿好的博客-CSDN博客</a></p><p>缺点：并没有解决所有的问题。</p><ul><li>可用性以正确性为代价，同时很容易收到网络分区的影响（导致脑裂选出多个协调者）</li><li>至少三轮往返消息，增加了事务的完成时间</li></ul><p>满足强终止性</p><p>二阶段提交依然是</p><h3 id="5-2-3-Paxos提交算法"><a href="#5-2-3-Paxos提交算法" class="headerlink" title="5.2.3 Paxos提交算法"></a>5.2.3 Paxos提交算法</h3><p><img src="https://s2.loli.net/2024/06/26/zKvrtxhjepDL52d.jpg" alt="B8468E68C68D719758DFA7091B1C834D.jpg"></p><h3 id="5-2-4-基于Quorum的提交协议"><a href="#5-2-4-基于Quorum的提交协议" class="headerlink" title="5.2.4 基于Quorum的提交协议"></a>5.2.4 基于Quorum的提交协议</h3><p>每个节点有一票，总共V票：</p><ul><li>Vc：最小提交票数，要提交必须达到这个票数，0&lt;Vc&lt;&#x3D;V</li><li>Va：最小中止票数，要中止必须达到这个票数，0&lt;Va&lt;&#x3D;V</li></ul><p>Vc+Va&gt;V</p><p>三个子协议：</p><ul><li>提交协议：事务开始时使用（类似三阶段中的pre commit，但是需要等待Vc票数）</li><li>中止协议：网络分区时开始使用（出现网络分区，会在与协调者失联的分区中选出代理协调者，如果在失联分区中有在提交&#x2F;中止状态（哪怕一个），都推进所有参与者到该状态；如果至少有一个参与者处于预提交状态，并且至少Vc个参与者在等待提交投票的结果，则代理协调者向所有参与者发送预提交消息，如果有超过Vc个参与者恢复响应，那么代理协调者就会发送真正的提交消息;如果没有处于准备提交状态的参与者，并且至少Va个参与者在等待中止事务的投票结果，那么代理协调者就会发送真正的中止消息）</li><li>合并协议：当系统从网络分区中恢复过来的时候使用</li></ul><h3 id="5-2-5-Saga事务"><a href="#5-2-5-Saga事务" class="headerlink" title="5.2.5 Saga事务"></a>5.2.5 Saga事务</h3><p>用来处理长活事务（Long-Lived Transaction，LLT）</p><p><a href="https://blog.csdn.net/flynetcn/article/details/124592621?ops_request_misc=%7B%22request_id%22:%22168183647416800211561980%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168183647416800211561980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124592621-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=saga%E4%BA%8B%E5%8A%A1&spm=1018.2226.3001.4187">(443条消息) 分布式事务系列：Saga_saga事务_码出钞能力的博客-CSDN博客</a></p><h2 id="5-3-并发控制"><a href="#5-3-并发控制" class="headerlink" title="5.3 并发控制"></a>5.3 并发控制</h2><p>悲观并发控制（Pessimistic Concurrency Control）：假设多个事务之间会相互干扰，因此在任何时候都将资源加锁，避免其他事务修改该资源。悲观并发控制的主要优点是简单易懂，但由于频繁加锁导致效率低下，不适合高并发场景。</p><p>乐观并发控制（Optimistic Concurrency Control）：假设多个事务之间不会相互干扰，并行访问数据，而在提交时进行冲突检测。如果两个事务的修改发生冲突，则其中一个事务必须回滚并重试。乐观并发控制可以最大程度地提高并发性，但需要开发人员自己实现数据版本控制，相对较为复杂。</p><p>多版本并发控制（Multi-Version Concurrency Control）：每当一个事务对数据库进行更新操作时，会将当前数据的快照存储为新的版本，并使用版本号进行标识。在读取数据时，事务不会阻塞其他事务的读写操作，同时也不会锁定当前版本的数据。如果发现其他事务已经更新了数据，则会从前一个版本中获取数据。多版本并发控制的主要优点是高效、可扩展性好，但需要占用更多的磁盘空间。</p><h3 id="5-3-1-两阶段锁"><a href="#5-3-1-两阶段锁" class="headerlink" title="5.3.1 两阶段锁"></a>5.3.1 两阶段锁</h3><p>两阶段锁（Two-Phase Locking）是一种常用于并发控制的技术，旨在解决并发操作下出现的数据一致性问题。</p><p>在两阶段锁策略中，事务必须分为两个阶段：增长阶段和收缩阶段。</p><ol><li><p>增长阶段：当事务请求资源时，该事务会先申请锁定所需资源。在此阶段中，锁可以被占用但不能被释放，每个事务只能逐渐获得锁，不能释放锁。</p></li><li><p>收缩阶段：当事务完成所需工作时，它将释放所有已经锁定的资源，并且这些锁不再被使用。在此阶段中，锁可以被释放但不能被继续占用，每个事务只能逐渐释放锁。</p></li></ol><p>在这个过程中，锁的状态保持不变。所有的事务都必须遵循这些规则，以确保并发操作的正确性和一致性。</p><p>两阶段锁的优点是可以避免死锁的发生，但是也有一些缺点，例如可能会导致事务等待时间较长，从而影响系统的响应速度。此外，还有许多其他的并发控制技术，如乐观并发控制、基于时间戳的并发控制等，可以用于替代或补充两阶段锁。</p><p><strong>三种方法避免死锁：</strong></p><p>死锁是一种并发控制问题，指两个或多个事务或进程相互等待释放已经占用的资源，导致所有事务或进程都无法继续执行。为了避免死锁，可以采取以下几种方法：</p><ol><li>死锁预防（破坏死锁条件）：通过约定加锁顺序、引入超时机制、限制某些进程对资源的访问等方式，在程序设计时直接避免死锁发生。</li><li>死锁避免（银行家算法）：通过安全序列算法对每个事务或进程的资源请求进行安全性检查，只有当该事务或进程的资源请求不会导致死锁时才会被允许。<ul><li>等待-死亡：该方案是基于非剥夺方法。当进程Pi请求的资源正被进程Pj占有时，只有当Pi的时间戳比进程Pj的时间戳小时，Pi才能等待。否则Pi被卷回（roll-back），即死亡。</li><li>伤害-等待：它是一种基于剥夺的方法。当进程Pi请求的资源正被进程Pj占有时，只有当进程Pi的时间戳比进程Pj的时间戳大时，Pi才能等待。否则Pj被卷回（roll-back），即死亡。</li></ul></li><li>死锁检测与恢复：在程序运行过程中，周期性地监测系统中是否发生了死锁，一旦检测到死锁，就采取资源抢夺或事务回滚等方式，进行死锁恢复。</li></ol><p>以上三种方法可以单独或组合使用，以达到更好的死锁预防效果。同时，在程序设计时，应注意不要通过不合理的代码逻辑、数据库设计等导致死锁现象的出现。</p><h3 id="5-3-2-乐观并发控制（不要锁）"><a href="#5-3-2-乐观并发控制（不要锁）" class="headerlink" title="5.3.2 乐观并发控制（不要锁）"></a>5.3.2 乐观并发控制（不要锁）</h3><p>两类，基于检查的并发控制和基于时间戳的并发控制。</p><ol><li><p>基于检查的并发控制</p><ul><li>读取：创建副本，放到私有空间，读是读的副本，写操作被记录到私有空间的临时文件中。</li><li>校验：没有冲突就提交，有冲突就中止。</li><li>写入：校验没问题，就把私有空间的数据持久化存储。</li></ul></li><li><p>基于时间戳的并发控制</p><p>每个数据项有两个时间戳</p><ul><li><p>写时间戳： W-TS(X)</p></li><li><p>读时间戳：R-TS(X)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#1.读操作</span><br><span class="line">if TS(T_i) &lt; W-TS(X)&#123;</span><br><span class="line">abort(R_i(X))</span><br><span class="line">&#125;else&#123;</span><br><span class="line">accept(R_i(X))</span><br><span class="line">R-TS(X)=TS(T_i)</span><br><span class="line">&#125;</span><br><span class="line">#2.写操作</span><br><span class="line">TS(T_i)必须大于R-TS(X)和W-TS(X)，否则丢弃</span><br><span class="line">if TS(T_i)&lt;R-TS(X)||TS(T_i)&lt;W-TS(X)&#123;</span><br><span class="line">abort(W_i(X))</span><br><span class="line">&#125;else &#123;</span><br><span class="line">accept(W_i(X))</span><br><span class="line">W-TS(X)=TS(T_i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>难点：</p><ol><li>时间戳的精确性</li><li>可能产生不可恢复的操作（后面的读事务基于前面的写事务，但前面的写事务回滚）</li></ol><p>看起来没有锁，但是实际上在修改时间戳的时候，仍可能要获取锁</p></li></ul></li></ol><h3 id="5-3-3-多版本并发控制（很像celldb啊）"><a href="#5-3-3-多版本并发控制（很像celldb啊）" class="headerlink" title="5.3.3 多版本并发控制（很像celldb啊）"></a>5.3.3 多版本并发控制（很像celldb啊）</h3><p>可以看作在乐观并发控制的基础上增加了多个版本，为每个数据项存储多个版本</p><p>读到的是某个版本的数据，写是增加版本而并非覆盖</p><p>衍生出三种主流多版本并发控制：</p><ul><li>多版本两阶段锁</li><li>多版本乐观并发控制</li><li>多版本时间戳排序</li></ul><p>元数据（Tuple存储到数据项头部）：</p><ul><li><p>Tid：唯一单调递增的时间戳（事务开始的时间戳）</p></li><li><p>txn-id：获得当前写锁的事务的Tid，如果没有事务持有该数据的写锁，则为0，可通过<strong>CAS</strong>来修改此字段，避免使用锁</p><ul><li><p>CAS，即 Compare-And-Swap，是一种原子操作，用于实现并发控制。在多线程编程中，CAS可以保证对共享变量的操作在多线程情况下能够正确地执行。</p><p>CAS操作需要三个参数：内存地址 V、旧的预期值 A 和新值 B。当且仅当当前内存地址的值等于旧的预期值 A 时，才会将该内存地址的值更新为新值 B。否则，不做任何操作。</p><p>CAS操作的基本流程如下：</p><ol><li>线程读取内存地址 V 的当前值；</li><li>线程比较内存地址 V 的当前值与旧的预期值 A 是否相等；</li><li>如果相等，线程将新值 B 写入内存地址 V，并返回操作成功；</li><li>如果不相等，线程不做任何操作，并返回操作失败。</li></ol><p>通过CAS操作，可以避免传统并发控制方法（如锁定）的一些问题，例如死锁和竞争条件。但同时，也存在一些限制。例如，CAS只能应用于单个变量的操作；如果需要对多个变量进行联合操作，则需要使用其他并发控制方式。</p></li></ul></li><li><p>begin-ts: 创建该版本的数据项的事务提交的时间戳（开始肯定是提交了才有嘛）,Tcommit</p></li><li><p>end-ts：最新版本的话，则为无限大，否则该数据项等于上一个或下一个版本数据项的begin-ts</p></li></ul><ol><li><p>多版本两阶段锁(这里的锁，是根据对于数据的元数据的版本来进行判断来实现的)：</p><p>代表MySQL,Oracle,Postgres</p><ul><li><p>txn-id</p></li><li><p>read-cnt：当前数据的读锁的数量。可以将read-cnt和txn-id组合成一个64位整型值，用CAS来更新两个</p></li><li><p>begin-ts</p></li><li><p>end-ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#对于读操作Ti Xv为版本</span><br><span class="line">find Xv where begin-ts(Xv) &lt;= Ti &lt;end-ts(Xv)</span><br><span class="line">if txn-id(Xv)==0 || txn-id(Xv)==Ti&#123;</span><br><span class="line">read-cnt(Xv)+=1</span><br><span class="line">accept(Read(Xv))</span><br><span class="line">&#125;else&#123;</span><br><span class="line">abort()and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#对于写操作 找到最新版本Xv</span><br><span class="line">finx Xv where end-ts(Xv) ==INF</span><br><span class="line">if txn-id(Xv)==0||txn-id(Xv)==Ti&#123;</span><br><span class="line">txn-id(Xv)=Ti</span><br><span class="line">new(Xv+1)</span><br><span class="line">txn-id(Xv+1)=Ti</span><br><span class="line">accept(Write(Xv+1))</span><br><span class="line">&#125;else&#123;</span><br><span class="line">abort() and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#善后</span><br><span class="line">#for write</span><br><span class="line">for all write data item&#123;</span><br><span class="line">txn-id(Xv+1)=0</span><br><span class="line">begin-ts(Xv+1)=Tcommit</span><br><span class="line">end-ts(Xv+1)=INF</span><br><span class="line">txn-id(Xv)=0</span><br><span class="line">end-ts(Xv)=Tcommit</span><br><span class="line">&#125;</span><br><span class="line">#for read</span><br><span class="line">for all read data item&#123;</span><br><span class="line">read-cnt(Xv) -=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多版本乐观并发控制</p><p>MemSQL用这个</p><p>Metadata:</p><ul><li>txn-id</li><li>begin-ts</li><li>end-ts</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#读</span><br><span class="line">find Xv where begin-ts(Xv)&lt;= Ti &lt; end-ts(Xv)</span><br><span class="line">if txn-id(Xv)==0 || txn-id(Xv)==Ti&#123;</span><br><span class="line">accept(Read(Xv))</span><br><span class="line">&#125;else&#123;</span><br><span class="line">abort()and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#写</span><br><span class="line">find Xv where end-ts(Xv) == INF //确保最新</span><br><span class="line">if txn-id(Xv) == 0 ||txn-id(Xv)==Ti&#123;</span><br><span class="line">txn-id(Xv) = Ti</span><br><span class="line">new(Xv+1)</span><br><span class="line">txn-id(Xv+1) = Ti</span><br><span class="line">begin-ts(Xv+1) = INF</span><br><span class="line">accept(Write(Xv+1))</span><br><span class="line">&#125;else&#123;</span><br><span class="line">abort() and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#提交事务</span><br><span class="line">for all read data item&#123;</span><br><span class="line">if begin-ts(Xv) &gt;Ti&#123;</span><br><span class="line"> //数据项被其他事务修改过，读到了过期的数据</span><br><span class="line"> abort() and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for all write data item&#123;</span><br><span class="line">txn-id(Xv+1) = 0</span><br><span class="line">begin-ts(Xv+1) = Tcommit</span><br><span class="line">end-ts(Xv+1) = INF</span><br><span class="line">txn-id(Xv) = 0</span><br><span class="line">end-ts(Xv) = Tcommit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多版本时间戳排序</p><ul><li><p>txn-id</p></li><li><p>read-ts(最大的读过的事务的Tid)</p></li><li><p>begin-ts</p></li><li><p>end-ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#读</span><br><span class="line">find Xv where begin-ts(Xv)&lt;=Ti&lt;end-ts(Xv)</span><br><span class="line">if txn-id(Xv) == 0 || txn-id(Xv) == Ti&#123;</span><br><span class="line">accept(read(Xv))</span><br><span class="line">read-ts(Xv)=max(Ti,read-ts(xV))</span><br><span class="line">&#125;else&#123;</span><br><span class="line"> abort() rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#写</span><br><span class="line">find Xv where end-ts(Xv) ==INF</span><br><span class="line">if txn-id(Xv)=0&amp;&amp;Ti &gt; read-ts(Xv)&#123;</span><br><span class="line">txn-id(Xv) = Ti</span><br><span class="line">new(Xv+1)</span><br><span class="line">txn-id(Xv+1) =Ti</span><br><span class="line">read-ts(Xv+1) = 0</span><br><span class="line">accept(Write(Xv+1))</span><br><span class="line">&#125;else &#123;</span><br><span class="line">abort() and rollback(T)</span><br><span class="line">&#125;</span><br><span class="line">#善后</span><br><span class="line">for all write data item&#123;</span><br><span class="line">txn-id(Xv+1) = 0</span><br><span class="line">begin-ts(Xv+1) = Ti</span><br><span class="line">end-ts(Xv+1) = INF</span><br><span class="line">txn-id(Xv) = 0</span><br><span class="line">end-ts(Xv) = Ti</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>版本存储和垃圾回收</p><p>版本存储：</p><ol><li>仅追加存储（Append-Only Storage）<ul><li>有指针</li><li>如果说恰好有很大数据的一个属性，在新版本中又不发生改变，则很占空间（所以要复用）</li><li>MemSQL、PG</li></ul></li><li>时间旅行存储（Time-Travel Storage）<ul><li>单独用一个时间旅行表来存储历史版本</li><li>最新版本的数据存储到主表</li></ul></li><li>增量存储（Delta Storage）<ul><li>只将发生变化的字段信息存储到增量存储中</li><li>增量存储在MySQL和Oracle中被称为回滚段</li><li>对于更新频繁的工作负载，可以减少内存分配，对于读操作频繁的工作负载，需要访问回滚段才能重新拼出需要的信息，开销会更高</li></ul></li></ol><p>垃圾回收：</p><ol><li>元组级别（Tuple-Level Garbage Collection) ：<ul><li>后台清理（Background Vaccuuming, VAC）:后台线程周期性清理:star2:</li><li>协同清理 (Cooperative Cleaning, COOP)：遍历最老到最新，事务执行时清理</li></ul></li><li>事务级别垃圾回收（Transaction-Level Garbage Collection）:<ul><li>如果一个事务创建的版本不被任何活跃事务访问，意味着该事务已经过期。</li><li>系统会根据该事务读写的数据集合（Read&#x2F;Write Sets）清理相对应的版本</li></ul></li></ol></li></ol><h2 id="5-4-Percolator"><a href="#5-4-Percolator" class="headerlink" title="5.4 Percolator"></a>5.4 Percolator</h2><p>分布式事务解决方案：Percolator</p><p>构建于Bigtable的基础上，主要用于网页搜索索引等服务</p><p>支持多行事务</p><p>依赖一个单点授时，单时间源的授时服务（TSO，Timestamp Oracle）</p><p>使用多版本时间戳排序来实现快照隔离</p><p>利用如下元数据实现快照隔离：</p><ul><li>lock:锁信息</li><li>write：事务提交时间戳</li><li>data：数据</li></ul><p>事务处理步骤：</p><ol><li><p>分配事务开始时间戳:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start_ts=oracle.GetTimestamp()</span><br></pre></td></tr></table></figure></li><li><p>将所有写操作缓冲起来，直到提交时再一并写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void set(Write w)&#123;</span><br><span class="line">writes_.push_back(w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>preWrite:</p><ul><li><p>所有写操作挑选一个作为主锁（随意挑选，固定使用第一个写操作作为主锁）：锁住事务中写操作涉及的所有数据</p></li><li><p>其他写操作作为次锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool preWrite(Write w,Write primary)&#123;</span><br><span class="line"> Column c = w.col;</span><br><span class="line"> bigtable::Txn T = bigtable::StartRowTransaction(w.row);</span><br><span class="line"> //如果事务开始后该数据被修改，则中止事务</span><br><span class="line"> if (T.Read(w.row,c+&quot;write&quot;,[start_ts,INF]))return false;</span><br><span class="line"> //尝试获取锁</span><br><span class="line"> if (T.Read(w.row,c+&quot;lock&quot;,[0,INF]))return fasle;</span><br><span class="line">  </span><br><span class="line"> T.Write(w.row,c+&quot;data&quot;,start_ts,w.value);</span><br><span class="line"> T.Write(w.row,c+&quot;lock&quot;,start_ts,&#123;primary.row,primary.col&#125;);</span><br><span class="line"> return T.Commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>提交事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#写</span><br><span class="line">bool Commit()&#123;</span><br><span class="line">Write Primary = writes_[0];</span><br><span class="line">vector&lt;Write&gt; secondaries(writes_.begin()+1,wirtes_.end());</span><br><span class="line">if (!PreWrite(primary,primary))return false;</span><br><span class="line">for (Write w:secondaries)</span><br><span class="line">if (!PreWrite(w,parimary)) return false;</span><br><span class="line"></span><br><span class="line">int commit_ts = oracle.GetTimestamp();</span><br><span class="line">//先提交主锁的写操作</span><br><span class="line">Write p = primary;</span><br><span class="line">bigtable::Txn T= bigtable::StartRowTransaction(p.row);</span><br><span class="line">if (!T.Read(p.row,p.col+&quot;lock&quot;,[start_ts,start_ts]))</span><br><span class="line">return false;</span><br><span class="line">T.Write(p.row,p.col+&quot;write&quot;,commit_ts,start_ts);</span><br><span class="line">T.Erase(p.row,p.col+&quot;lock&quot;,commit_ts);</span><br><span class="line">if (!T.commit())return false;</span><br><span class="line">//第二阶段，更新所有次(secondary)锁的写操作</span><br><span class="line">for (Write w:secondaries)&#123;</span><br><span class="line">bigtable::Write(w.row,w.rol+&quot;write&quot;,commit_ts,start_ts);</span><br><span class="line">bigtable::Erase(w.row,w.rol+&quot;lock&quot;,commit_ts);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">#读</span><br><span class="line">bool Get(Row row,Column c,string *value)&#123;</span><br><span class="line">while(true)&#123;</span><br><span class="line">bigtable::Txn T = bigtable::StartRowTransaction(row);</span><br><span class="line">//检查是否有并发写入的锁</span><br><span class="line">if (T.Read(row,c+&quot;lock&quot;,[0,start_ts]))&#123;</span><br><span class="line">//存在锁，尝试清理并等待锁释放</span><br><span class="line">BackoffAndMaybeCleanupLock(row,c);</span><br><span class="line">Continue;</span><br><span class="line">&#125;</span><br><span class="line">//找到小于开始时间戳的最新写入版本</span><br><span class="line">latest_write=T.Read(row,c+&quot;write&quot;,[0,start_ts]);</span><br><span class="line">if (!latest_write.found()) return false; //没有找到</span><br><span class="line">int data_ts =latest_write.start_timestamp();</span><br><span class="line">*value = T.Read(row,c+&quot;data&quot;,[data_ts,data_ts]);</span><br><span class="line">return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（三）分布式系统基础</title>
      <link href="/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统基础"><a href="#分布式系统基础" class="headerlink" title="分布式系统基础"></a>分布式系统基础</h1><h2 id="3-1-分区"><a href="#3-1-分区" class="headerlink" title="3.1 分区"></a>3.1 分区</h2><p>在分布式系统中，分区是指将数据分成若干个部分，分别存储在不同的节点上，以达到提高系统性能和可扩展性的目的。分区是分布式系统中数据管理的基础。</p><p>在分区中，通常采用哈希算法对数据进行划分。具体来说，首先根据数据的某个属性进行哈希计算，得到一个哈希值，然后将这个哈希值映射到某个节点上，将对应的数据存储到这个节点上。通过这种方式，相同属性的数据会被分配到同一个节点上，从而提高数据访问的效率。</p><p>分区可以带来以下好处：</p><ol><li>提高系统的可扩展性：由于数据被分割成多个部分，每个部分可以分别存储在不同的节点上，因此可以更容易地进行横向扩展，增加节点数量来提高系统的处理能力。</li><li>提高系统的性能：由于相同属性的数据被分配到同一个节点上，因此可以更快地访问这些数据，从而提高系统的处理效率。</li><li>提高系统的容错性：当某个节点发生故障时，只有该节点上的数据会受到影响，而其他节点上的数据仍然可以正常访问，从而提高了系统的容错性。</li></ol><p>但是，分区也会带来一些挑战和问题，如数据的一致性和分区策略的选择等。因此，在设计分布式系统时，需要仔细考虑分区策略和数据一致性等问题，以确保系统的正确性和稳定性。</p><p>水平分区、垂直分区、列式数据库和行式数据库是关系型数据库的四种常见的数据分区和存储方式。</p><ol><li><strong>水平分区</strong></li></ol><p>水平分区是指将数据按照行进行切分，将每个分区的数据存储在不同的节点上。每个节点独立维护一个数据子集，这些数据子集之间相互独立。通常，水平分区的数据切分依据是数据的关键字或者某个属性，以便于查询时能够快速地定位数据。</p><p>使用场景：水平分区通常适用于<strong>数据访问压力比较大的场景</strong>，如互联网应用、金融等领域，这些场景中<strong>需要高效的读写操作和数据访问</strong>。</p><p>特点：水平分区的优点是能够将数据分散在多个节点上，减少单节点的压力，提高系统性能和可扩展性。缺点是需要考虑数据一致性的问题，当某个节点发生故障时，需要采取相应的措施保证数据的一致性。</p><ol start="2"><li><strong>垂直分区</strong></li></ol><p>垂直分区是指将数据按照列进行切分，将不同的列存储在不同的节点上。不同的节点维护不同的数据子集，但是数据之间存在关联关系。垂直分区的目的是将数据分开存储，减少节点之间的冗余数据。</p><p>使用场景：垂直分区适用于需要对数据进<strong>行复杂查询和分析</strong>的场景，如数据仓库等。</p><p>特点：垂直分区的优点是可以减少冗余数据，提高系统性能和存储效率，同时也能提高数据的安全性。缺点是可能会增加系统的复杂度，同时需要进行多表连接查询，对系统性能有一定影响。</p><ol start="3"><li>列式数据库</li></ol><p>列式数据库是指将数据按照列进行存储和访问的数据库系统。相比于传统的行式数据库，列式数据库更加适用于大规模数据的分析和查询，能够提供更高的查询效率和存储效率。列式数据库将每列数据存储在一个独立的文件或数据块中，这样可以避免读取不必要的数据，从而提高查询效率。</p><p>使用场景：列式数据库适用于大规模数据的分析和查询，如数据仓库、在线分析处理等领域。</p><p>特点：列式数据库的优点是<strong>查询效率高，存储效率高，能够快速响应复杂查询请求。缺点是更新效率相对较低，不适用于需要频繁进行更新操作的场景</strong>。</p><ol start="4"><li>行式数据库</li></ol><p>行式数据库是指将数据按照行进行存储和访问的数据库系统。行式数据库将同一行的数据存储在一起，这样能够提高数据的插入和更新效率。相比于列式数据库，行式数据库更适用于需要频繁进行更新操作的场景。</p><p>使用场景：行式数据库适用于需要频繁进行更新操作的场景，如在线交易系统、客户关系管理等领域。</p><p>特点：行式数据库的优点是<strong>支持高并发的写入操作，适用于需要频繁进行更新操作的场景。缺点是查询效率相对较低，尤其是对于大规模数据的查询</strong>，查询效率明显低于列式数据库。</p><h3 id="3-1-1-水平分区算法"><a href="#3-1-1-水平分区算法" class="headerlink" title="3.1.1 水平分区算法"></a>3.1.1 水平分区算法</h3><p>水平分区算法是指将数据按照某个属性值进行分区的一种算法。以下是几种常见的水平分区算法：</p><ol><li>范围分区</li></ol><p>范围分区是将数据按照某个属性值的范围进行分区的算法。例如，对于一个学生表，可以将学生按照年龄范围进行分区，比如0-10岁、11-20岁、21-30岁等等。</p><ol start="2"><li>哈希分区</li></ol><p>哈希分区是将数据按照某个属性值的哈希值进行分区的算法。例如，对于一个学生表，可以将学生按照学生编号进行哈希分区，将相同哈希值的学生存储在同一个分区中。</p><ol start="3"><li>轮询分区</li></ol><p>轮询分区是将数据按照一定的轮询方式进行分区的算法。例如，对于一个负载均衡系统，可以将请求按照轮询的方式分配给不同的服务器处理，以达到负载均衡的效果。</p><p>以上算法只是水平分区的几种常见方法，实际应用中还可以根据具体的需求和数据特点进行适当的调整和优化。</p><p><strong>一致性哈希：</strong></p><p><strong>一致性哈希</strong>（Consistent Hashing）是一种分布式哈希算法，它可以将数据和节点映射到同一个哈希环上，从而方便进行数据的分布式存储和访问。一致性哈希算法的核心思想是通过哈希函数将数据和节点映射到同一个环上，然后根据数据的哈希值在环上查找节点，从而实现分布式存储和访问。</p><p>一致性哈希算法的优点是可以有效地解决节点的动态增加和删除问题。当新的节点加入系统时，只需要将它的哈希值插入到哈希环上，然后将相邻的数据重新映射到新节点上即可。当节点离开系统时，只需要将它的哈希值从哈希环上移除，然后将相邻的数据重新映射到其他节点上即可。</p><p>另外，一致性哈希算法也可以有效地解决数据倾斜问题。由于哈希函数的随机性，一些节点可能会负责更多的数据，从而导致负载不均衡的问题。为了解决这个问题，一致性哈希算法引入了虚拟节点的概念，将每个物理节点映射到多个虚拟节点上，从而平衡节点的负载。</p><p>总之，一致性哈希算法是一种简单有效的分布式哈希算法，可以在分布式系统中实现数据的高效分布式存储和访问。</p><h3 id="3-1-2-分区的挑战"><a href="#3-1-2-分区的挑战" class="headerlink" title="3.1.2 分区的挑战"></a>3.1.2 分区的挑战</h3><p>查询困难和事务</p><h2 id="3-2-复制"><a href="#3-2-复制" class="headerlink" title="3.2 复制"></a>3.2 复制</h2><p>  在分布式系统中，复制（Replication）是一种常见的技术，它将数据和计算资源复制到多个节点上。复制的好处包括：</p><ol><li>高可用性：如果一个节点失效，复制的数据和计算资源可以在其他节点上继续运行，保证系统的可用性。</li><li>改善性能：通过将数据和计算资源复制到多个节点上，可以减少网络延迟和瓶颈，提高系统的响应速度和吞吐量。</li><li>容错性：复制可以提高系统的容错性，即使某个节点发生故障，也可以在其他节点上继续运行，从而保障数据的完整性和可用性。</li><li>提高可扩展性：复制可以提高系统的可扩展性，因为复制的数据和计算资源可以在不同的节点上进行并行处理，从而提高系统的处理能力。</li></ol><p>需要注意的是，复制也会带来一些负面影响，例如增加系统的复杂度和维护成本，以及可能导致数据一致性的问题。因此，在使用复制技术时，需要仔细考虑各种因素，并根据具体情况进行权衡。</p><h3 id="3-2-1-单主复制"><a href="#3-2-1-单主复制" class="headerlink" title="3.2.1 单主复制"></a>3.2.1 单主复制</h3><p>单主复制是指在分布式系统中，只有一个节点拥有写入权限，其他节点只能进行读取操作，并且该节点负责将写入的数据复制到其他节点上。单主复制的好处包括：</p><ol><li>简单易用：单主复制相对于其他复制方案来说比较简单，易于实现和维护。</li><li>数据一致性：由于只有一个节点拥有写入权限，所以数据的一致性相对较容易维护，可以避免多个节点同时对同一数据进行写入操作导致的数据不一致问题。</li><li>安全性：单主复制可以避免多个节点同时写入数据可能导致的数据冲突问题，从而保证数据的安全性。</li></ol><p>需要注意的是，单主复制也有一些缺点，例如：</p><ol><li>单点故障：由于只有一个节点拥有写入权限，如果该节点发生故障，整个系统将不可用。</li><li>性能瓶颈：由于所有的写入操作都要经过单个节点，可能会成为性能瓶颈，限制了系统的扩展性和吞吐量。</li><li>可用性问题：如果节点之间的网络连接出现问题，可能会导致数据无法及时复制到其他节点，从而影响系统的可用性。</li></ol><p>因此，在使用单主复制技术时，需要仔细考虑各种因素，并根据具体情况进行权衡。</p><p>在单主复制中，可以进一步分为以下两种类型：</p><ol><li>主从复制（Master-Slave Replication）：在主从复制中，只有一个节点（主节点）拥有写入权限，其他节点（从节点）只能进行读取操作，并且主节点负责将写入的数据复制到从节点上。主节点的写入操作会被异步地复制到从节点上，从节点的数据与主节点可能<strong>存在一定的延迟</strong>，但从节点的数据最终会与主节点保持一致。主从复制可以提供高可用性和数据一致性，并且相对简单易用。</li><li>主备复制（Master-Standby Replication）：在主备复制中，也只有一个节点（主节点）拥有写入权限，其他节点（备节点）只能进行读取操作，并且备节点与主节点之间的数据同步是<strong>实时的</strong>。当主节点发生故障时，备节点会接管主节点的功能，成为新的主节点，从而保证系统的高可用性。主备复制相对于主从复制来说，可用性更高，但是实现和维护的复杂度更高。</li></ol><p><strong>脑裂：</strong></p><p>脑裂（Split-Brain）是指在分布式系统中，由于网络分区或者其他原因，导致系统中的节点失去联系，无法进行通信，进而导致系统出现数据不一致或者操作冲突的问题。</p><p>当出现网络分区时，系统中的节点可能会被分为两个或者多个独立的部分，每个部分都认为自己是整个系统的唯一部分，而且可能会独立地进行写入操作，导致数据不一致的问题。这种情况被称为脑裂。</p><p>脑裂可能会导致系统数据的不一致性，从而影响系统的正确性和可用性。为了避免脑裂的发生，可以采取以下措施：</p><ol><li>使用复制技术：通过将数据和计算资源复制到多个节点上，可以提高系统的可用性和容错性，减少脑裂的可能性。</li><li>使用投票机制：在系统中使用投票机制，可以避免脑裂的发生。例如，在主从复制中，主节点可以将写入操作同步到多个从节点上，然后通过投票机制来确定哪个从节点应该成为新的主节点，从而避免脑裂的发生。</li><li>限制节点的数量：在分布式系统中，可以限制节点的数量，从而减少系统的复杂度和容错难度，降低脑裂的风险。</li><li>监控系统状态：对系统状态进行监控，及时发现和解决潜在的问题，可以有效地避免脑裂的发生。</li></ol><p>需要注意的是，虽然可以通过上述措施来减少脑裂的风险，但是完全避免脑裂是非常困难的，因此需要在设计和实现分布式系统时充分考虑脑裂的风险，并制定相应的应对策略。</p><h3 id="3-2-2-多主复制"><a href="#3-2-2-多主复制" class="headerlink" title="3.2.2 多主复制"></a>3.2.2 多主复制</h3><p>在分布式系统中，多主复制（Multi-Master Replication）是指多个节点拥有写入权限，并且可以同时进行写入操作的一种复制方式。每个节点都可以独立地进行写入操作，写入的数据会被异步地复制到其他节点上，从而实现数据的复制和同步。</p><p>多主复制相对于单主复制来说，具有以下几个优点：</p><ol><li><strong>高并发性</strong>：多主复制允许多个节点同时进行写入操作，可以提高系统的并发性和吞吐量，从而满足高并发场景下的需求。</li><li><strong>高可用性</strong>：多主复制允许多个节点同时拥有写入权限，当某个节点出现故障时，其他节点可以继续进行写入操作，从而保证系统的高可用性和容错性。</li><li><strong>灵活性</strong>：多主复制可以根据实际需求进行灵活配置，可以在多个节点之间平衡负载，提高系统的稳定性和可靠性。</li></ol><p>但是，多主复制也存在一些挑战和限制：</p><ol><li>冲突问题：当多个节点同时进行写入操作时，可能会发生数据冲突的问题，需要采取相应的冲突解决策略来避免数据不一致的问题。</li><li>一致性问题：多主复制需要保证节点之间数据的一致性，需要使用相应的协调机制来保证数据的正确性和一致性。</li><li>实现和维护的复杂度：多主复制的实现和维护相对复杂，需要考虑节点之间的同步和冲突解决等问题，增加了系统的复杂度和维护难度。</li></ol><p>需要注意的是，在设计和实现多主复制时，需要综合考虑系统的性能、可用性和一致性等方面的需求，以及各种冲突解决和协调机制的复杂度和实现难度，从而选择最合适的复制方式。</p><p><strong>解决冲突：</strong></p><p>在多主复制中，当多个节点同时对同一个数据进行写入操作时，可能会发生冲突，从而导致数据的不一致性。为了避免冲突问题，可以采用以下几种解决办法：</p><ol><li><p>乐观锁机制：每个节点在进行写入操作前，先获取当前数据的版本号，并在写入时附带版本号信息。当其他节点进行写入时，会发现版本号不一致，从而引发冲突。此时，节点可以根据具体的策略进行相应的处理，例如选择最新的版本进行更新，或者放弃当前的写入操作等。</p></li><li><p>悲观锁机制：每个节点在进行写入操作时，先尝试获取对应的锁，如果获取不到，则说明有其他节点正在进行写入操作，此时可以等待一段时间后再次尝试获取锁，或者放弃当前的写入操作。</p></li><li><p>时序复制机制：在多主复制中，通过使用全局唯一的时间戳或序列号来协调多个节点之间的写入操作，从而避免冲突。每个节点在进行写入操作时，需要带上对应的时间戳或序列号，当其他节点接收到写入请求时，会根据时间戳或序列号来确定写入的先后顺序，从而保证数据的一致性。</p></li><li><p>基于版本向量的机制：每个节点在进行写入操作时，不仅记录当前数据的版本号，还记录其他节点最近的版本号信息。当其他节点进行写入时，会将自己的版本号信息传递给其他节点，从而形成一个版本向量，用于判断不同节点之间的数据冲突和一致性。</p></li><li><p>由客户端解决冲突</p></li><li><p>“最后写入胜利”（Last Writer Wins，LWW）是一种常见的多主复制冲突解决策略。该策略的基本思想是，当多个节点对同一个数据进行写入时，以最后写入的节点为准，即后来的写入操作会覆盖之前的写入操作。</p><p>具体实现时，每个节点在进行写入操作时，都会记录对应的时间戳或版本号，当其他节点收到写入请求时，会比较当前节点的时间戳或版本号和自身记录的时间戳或版本号，以此来判断哪个写入操作更晚，从而决定是否接受该写入请求。当发生冲突时，以最后写入的节点为准，更新数据。</p><p>需要注意的是，LWW策略虽然简单易实现，但也存在一些潜在的问题，例如可能导致数据的丢失、数据的不一致性等。因此，在选择冲突解决策略时，需要根据具体的应用场景和需求进行综合考虑，权衡不同策略的优缺点。</p></li><li><p>因果关系跟踪</p><p>因果关系跟踪（Causal tracing）是一种在分布式系统中用于跟踪不同节点之间交互的技术。在分布式系统中，不同节点之间的交互往往是异步的，并且可能经过多个中间节点，因此需要一种机制来跟踪交互的因果关系，以便分析和调试系统的行为。</p><p>因果关系跟踪通常基于事件模型，即将系统的行为抽象为一系列事件，并记录事件之间的因果关系。具体来说，当一个节点发送请求给另一个节点时，需要将请求的相关信息（例如请求ID、时间戳等）附加到请求中，并在接收到响应时将响应的相关信息（例如响应ID、时间戳等）附加到响应中。这样，每个事件就可以通过相关的信息与之前和之后的事件建立因果关系。</p><p>通过因果关系跟踪，可以实现分布式系统中的故障定位、性能调优、容错处理等功能。例如，在进行故障定位时，可以根据事件之间的因果关系，追溯出故障的来源；在进行性能调优时，可以通过分析事件之间的时间关系，找出系统中的瓶颈和优化空间；在进行容错处理时，可以根据因果关系判断不同节点之间的依赖关系，从而决定如何进行容错处理。</p><p>目前，因果关系跟踪已经成为分布式系统中的一个重要组成部分，并且在开源工具和云服务平台中得到了广泛应用，例如OpenTelemetry、Zipkin、Jaeger等。</p></li></ol><p>需要注意的是，不同的解决办法适用于不同的场景和需求，选择合适的冲突解决策略需要综合考虑多方面的因素，包括系统的性能、可靠性、一致性和复杂度等。</p><h3 id="3-2-3-无主复制"><a href="#3-2-3-无主复制" class="headerlink" title="3.2.3 无主复制"></a>3.2.3 无主复制</h3><p>无主复制（Masterless replication）是一种分布式系统中常见的数据复制策略，与单主复制和多主复制不同，无主复制不需要指定特定的节点作为主节点，而是让<strong>所有节点都能够读取和写入数据</strong>。具体来说，无主复制通常采用以下两种方式实现：</p><ol><li>基于<strong>副本集</strong>：无主复制可以基于副本集实现，即将数据复制到多个节点上，并保证每个节点上的数据副本是一致的。当进行写入操作时，所有节点都可以接受写入请求，并将<strong>写入操作广播</strong>给其他节点进行更新。当进行读取操作时，每个节点都可以从自己本地的数据副本中读取数据。</li><li>基于<strong>分片</strong>：无主复制也可以基于分片实现，即将数据划分为多个分片，并将每个分片复制到多个节点上。当进行写入操作时，只需要将<strong>写入操作发送给对应的分片所在的节点</strong>，并更新该节点上的数据副本。当进行读取操作时，只需要根据读取请求所涉及的分片，从对应的节点中读取数据。</li></ol><p>无主复制相比于单主复制和多主复制，具有<strong>更好的可伸缩性和容错性</strong>，因为每个节点都可以独立地接受读写请求，并且可以通过增加节点数目来提高系统的容错能力和吞吐量。但同时，无主复制也需要考虑数据一致性和冲突解决等问题，例如如何解决并发写入操作导致的冲突，如何保证数据的一致性等。</p><p>Dynamo架构中的两种数据修复方法：</p><ol><li><p>读修复（Read repair）：读修复是一种在读取数据时自动修复损坏或不一致数据的技术。在分布式系统中，由于数据副本之间可能存在网络分区或写冲突等问题，导致某些节点上的数据副本可能已经过期或损坏。当客户端<strong>从一个节点读取数据时，如果发现该节点上的数据副本已经过期或与其他节点上的副本不一致，该节点会尝试从其他节点中读取最新的数据，并将其与自己的数据副本进行比较和合并，从而实现数据的修复。</strong></p></li><li><p>反熵过程（Anti-entropy）：反熵过程是一种<strong>定期检查</strong>和修复数据不一致问题的技术。在分布式系统中，由于网络故障或其他原因，不同节点上的数据副本可能会出现不一致的情况，为了解决这个问题，系统可以定期启动反熵过程来检查和修复数据不一致。具体来说，反熵过程会<strong>周期性地比较不同节点之间的数据副本，将不同的数据副本进行合并，从而实现数据的一致性。</strong></p><p><strong>反熵过程通常会使用Merkle树来检测和修复数据不一致问题。</strong></p><p>Merkle树是一种树形结构，它可以用来验证分布式系统中的数据一致性。在Merkle树中，每个叶子节点都是数据块的哈希值，每个非叶子节点都是其子节点哈希值的哈希值。通过比较不同节点之间的Merkle树，可以快速检测数据不一致的位置，并将不同的数据块进行合并。</p><p>在反熵过程中，系统会对不同节点之间的Merkle树进行比较，检测不一致的位置，并将不同的数据块进行合并。具体来说，反熵过程会周期性地对所有节点的Merkle树进行比较，如果发现两个节点的Merkle树有不一致的位置，系统会将不同的数据块进行合并，并更新相应的节点。</p><p>使用Merkle树来进行反熵过程有以下优点：</p><ol><li>高效性：Merkle树具有高效的验证和合并性能，可以快速检测和修复数据不一致问题。</li><li>安全性：Merkle树可以有效地保护数据的安全性，因为如果任何一个节点的数据发生了改变，其对应的哈希值也会发生改变，从而导致整个Merkle树的哈希值发生改变。</li></ol><p>因此，Merkle树是反熵过程中常用的技术之一，可以有效地检测和修复分布式系统中的数据不一致问题。</p></li></ol><p><strong>Quorum的数据冗余机制：</strong></p><p>Quorum是一种基于Raft协议的分布式一致性算法，它允许在一个集群中同时运行多个副本来提高系统的可靠性和容错性。在Quorum中，数据冗余机制通常通过副本集群来实现。</p><p>具体来说，Quorum通过将数据复制到多个节点来实现数据冗余。在一个Quorum集群中，通常会有多个节点运行相同的应用程序，每个节点上都有一个或多个副本存储相同的数据。这些副本可以保证在节点故障或网络故障时，数据仍然可用。</p><p>Quorum的数据冗余机制具有以下特点：</p><ol><li>多副本：每个节点上通常会运行多个副本，确保数据的可靠性和容错性。</li><li>复制同步：Quorum使用Raft协议来保证多个副本之间的数据同步，确保每个副本都存储相同的数据。</li><li>副本数量：Quorum要求在集群中<strong>至少有一半以上的节点存储相同的数据</strong>，这样可以确保在一定程度上抵御节点故障和网络故障。</li><li>容错性：Quorum可以在节点故障或网络故障的情况下继续工作，确保数据的可用性。</li></ol><p>除了数据冗余机制，Quorum还支持其他一些功能，如数据复制和数据恢复。数据复制是指在集群中将数据从一个节点复制到另一个节点，以确保数据的可靠性和容错性。数据恢复是指在节点故障或网络故障的情况下，将数据从备份节点恢复到故障节点，以确保数据的可用性。这些功能都可以提高Quorum集群的可靠性和容错性。</p><p>W&gt;N&#x2F;2</p><p>W和R通常比N小（因为为了降低延迟）</p><h2 id="3-3-CAP定理"><a href="#3-3-CAP定理" class="headerlink" title="3.3 CAP定理"></a>3.3 CAP定理</h2><p>CAP定理是指在一个分布式系统中，一致性（Consistency）、可用性（Availability）和分区容错性（Partition Tolerance）这三个特性无法同时满足，只能满足其中的两个。</p><p>具体来说：</p><ul><li>一致性：所有节点在同一时刻看到的数据是相同的。</li><li>可用性：客户端能够获得系统的响应，即使某些节点出现故障。</li><li>分区容错性：即使网络中断或节点故障，系统仍能继续运行。</li></ul><p>CAP定理的核心观点是，在分布式系统中，当网络分区发生时，系统必须要做出选择：是保证一致性还是可用性。由于分布式系统不可避免地会发生网络分区，因此系统必须要容忍分区，否则会导致系统的不可用性。因此，CAP定理的实质是，在网络分区发生时，系统必须要在一致性和可用性之间做出取舍。</p><p>需要注意的是，CAP定理中提到的一致性和可用性是指强一致性和高可用性，而不是最终一致性和可接受的可用性。最终一致性是指在一定时间内，系统最终会达到一致的状态；而可接受的可用性是指系统可以在一定时间内保证响应客户端的请求，但可能不是实时的。</p><p>CAP定理是分布式系统设计和实现的基础原则之一，它提醒我们在设计分布式系统时要充分考虑系统的一致性、可用性和分区容错性之间的关系，并根据具体需求进行取舍。</p><p>在网络分区发生时，分布式系统可能无法同时满足高可用性和强一致性，但是可以通过实现最终一致性来保证系统的可用性，并在一定时间内达到一致的状态。同时，如果系统对一致性要求不是非常高，也可以采用可接受的可用性来满足系统的需求。</p><p>需要注意的是，最终一致性并不是一个具体的算法或协议，而是一种设计思想或范式。不同的分布式系统可以采用不同的最终一致性策略，例如基于版本的控制、基于时间戳的控制、基于向量时钟的控制等，来保证数据在不同节点之间的最终一致性。</p><p><strong>意义：</strong></p><ul><li>系统开发需要取舍！不存在完美的系统！</li><li>CP</li><li>AP</li></ul><h3 id="3-3-1-PACELC定理"><a href="#3-3-1-PACELC定理" class="headerlink" title="3.3.1 PACELC定理"></a>3.3.1 PACELC定理</h3><p><a href="https://zhuanlan.zhihu.com/p/348923238">分布式理论 PACELC 了解么？ - 知乎 (zhihu.com)</a></p><p>PACELC定理是指，在分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）三者不可同时兼备，只能选择其中的两项。</p><p>PACELC定理是基于CAP定理发展而来的。CAP定理指出，在一个分布式系统中，Consistency（一致性）、Availability（可用性）、Partition tolerance（分区容错性）这三个因素不可同时保证。在分布式系统出现网络分区时，必须选择放弃一致性还是可用性中的一项，以保证系统的可靠性。</p><p>PACELC定理是对CAP定理的进一步扩展和细化，将一致性进一步划分为了强一致性（Strong Consistency）和弱一致性（Weak Consistency），并在此基础上提出了三种情况：当出现网络分区时，系统只能保证两项中的其中之一，而具体保证哪两项则取决于分布式系统的设计和应用场景。</p><p>具体来说，PACELC定理认为，在分布式系统中，当发生网络分区时，可以选择以下三种策略：</p><ol><li>保证分区容错性和强一致性，放弃可用性（PA&#x2F;EC）：这种情况下，系统会在网络分区发生时，停止接受请求，以保证数据的一致性。</li><li>保证分区容错性和可用性，放弃强一致性（PA&#x2F;EL）：这种情况下，系统会允许不同节点的数据出现短时间的不一致，以保证系统的可用性。</li><li>保证可用性和强一致性，放弃分区容错性（CA&#x2F;EL）：这种情况下，系统会在网络分区发生时，仍然继续接受请求，但可能会导致节点之间的数据不一致，以保证系统的可用性和数据的一致性。</li></ol><p>在实际应用中，选择哪种策略取决于具体的应用场景和需求，需要根据系统的性能要求、可用性要求、数据一致性要求以及成本等因素进行权衡和选择。</p><h3 id="3-3-2-BASE"><a href="#3-3-2-BASE" class="headerlink" title="3.3.2 BASE"></a>3.3.2 BASE</h3><p>在分布式系统的上下文中，BASE 是 “Basically Available, Soft state, Eventually consistent” 的缩写。这是一组原则，可用于设计和实现分布式系统，优先考虑可用性和分区容忍性，而不是强一致性。</p><p>Basically Available 指的是分布式系统应始终能够响应客户端请求，即使系统遇到故障或网络分区。Soft state 指的是系统状态随时间变化的想法，只要变化不是关键的，系统最终能够收敛到一致的状态，就是可接受的。Eventually consistent 指的是在足够的时间和适当的同步下，系统最终会在所有节点上变得一致。</p><p>与优先考虑强一致性的 ACID（原子性，一致性，隔离性，持久性）原则不同，BASE 是一种更为松散的方法，可以在分布式系统中实现更高的可用性和可伸缩性，但代价是一些一致性上的权衡。</p><h2 id="3-4-一致性模型"><a href="#3-4-一致性模型" class="headerlink" title="3.4 一致性模型"></a>3.4 一致性模型</h2><p>一致性模型是指在分布式计算中，确保多个节点之间数据的一致性和可靠性的模型。在分布式系统中，节点可能会同时读取和写入共享数据，因此必须确保在所有节点上数据的状态是一致的。</p><p>常见的一致性模型包括：</p><ol><li>强一致性模型（线性一致性）：在任何时候，所有节点都能够读取到相同的数据。强一致性模型可以保证数据的完全一致性，但可能会影响系统的性能。</li><li>弱一致性模型：在任何时候，不同节点读取到的数据可能会不一样。弱一致性模型通常可以提高系统的性能，但需要更复杂的算法来确保数据的一致性。</li><li>最终一致性模型：在一定时间内，所有节点最终都能够读取到相同的数据。最终一致性模型通常是弱一致性模型和强一致性模型之间的一种妥协方案。</li></ol><p>一致性模型的选择取决于系统的需求和设计目标，需要综合考虑系统的性能、可靠性、一致性和可扩展性等方面。</p><h3 id="3-4-1-线性一致性模型"><a href="#3-4-1-线性一致性模型" class="headerlink" title="3.4.1 线性一致性模型"></a>3.4.1 线性一致性模型</h3><p>线性一致性模型是一种强一致性模型，它保证在分布式系统中所有节点读取到的数据是一致的，即如果一个节点在时间轴上比另一个节点先写入数据，则先写入的数据一定先于后写入的数据被读取到。线性一致性模型是对强一致性模型的一种加强形式，它要求所有节点读取到的数据的顺序与它们写入的顺序一致，即数据的全局顺序与它们的时间戳有关。</p><p>线性一致性模型的实现通常需要使用一些特殊的算法和技术，例如基于向量时钟（vector clock）的数据版本控制机制、分布式锁机制等。这些技术可以确保所有节点读取到的数据的顺序是一致的，同时还可以保证系统的性能和可扩展性。</p><p>线性一致性模型通常用于需要强一致性保证的分布式应用，例如金融交易系统、在线游戏等。</p><p><strong>向量时钟：</strong></p><p>向量时钟是一种用于分布式系统中维护事件顺序的数据结构。它可以帮助分布式系统中的不同节点确定事件的先后顺序，并保证在不同节点中的时间戳的一致性。</p><p>向量时钟的基本思想是：每个节点都维护一个向量，向量的长度等于节点的数量，每个节点的向量元素表示该节点上的事件数目。当节点上发生一个事件时，它会将该节点的向量元素加1，并将整个向量发送给其它节点。接收到向量后，节点会将它的本地向量与接收到的向量进行合并，并更新本地向量的元素值，以反映出其它节点上发生的事件情况。这样，每个节点都可以通过比较向量来判断事件的先后顺序。</p><p>具体来说，如果向量V和W都是节点数为N的向量时钟，则V &lt;&#x3D; W的含义是V中的每个元素都小于等于W中对应元素。如果V &lt;&#x3D; W并且W &lt;&#x3D; V，则V和W是相等的。当向量V和W不相等时，就可以根据它们的比较结果来判断事件的先后顺序。</p><p>向量时钟通常用于实现一些需要维护事件顺序的分布式应用，例如分布式数据库系统、分布式文件系统、分布式共识算法等。</p><p><strong>分布式锁：</strong></p><p>分布式锁是一种在分布式系统中实现互斥访问的机制，它可以帮助不同节点之间协调并发操作，避免出现冲突和竞争条件。</p><p>在分布式系统中，多个节点可能同时访问共享资源，例如数据库、文件系统等。为了避免多个节点同时修改同一份数据，需要使用分布式锁来保证资源的互斥访问。当一个节点想要访问共享资源时，它需要先获取一个分布式锁，确保其他节点不能同时访问该资源。当节点完成操作后，需要释放锁，以允许其他节点继续访问资源。</p><p>实现分布式锁的方法有很多种，其中比较常见的包括：</p><ol><li>基于数据库实现的分布式锁：将锁状态保存在数据库中，节点需要先获取数据库的一个排他锁，才能对锁进行操作。</li><li>基于ZooKeeper实现的分布式锁：利用ZooKeeper提供的原子操作和临时节点机制，实现分布式锁。</li><li>基于Redis实现的分布式锁：利用Redis提供的SETNX命令和expire命令，实现分布式锁。</li></ol><p>需要注意的是，在使用分布式锁时，需要考虑锁的粒度和性能等问题。如果锁的粒度过大，可能会导致锁竞争和性能瓶颈；如果锁的粒度过小，可能会导致锁冲突和死锁等问题。因此，在实际应用中，需要根据具体情况选择合适的锁粒度，并进行性能测试和优化。</p><p><a href="https://blog.csdn.net/m0_67645544/article/details/124768505?ops_request_misc=%7B%22request_id%22:%22168594407216800192234961%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168594407216800192234961&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124768505-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&spm=1018.2226.3001.4187">(459条消息) 什么是分布式锁？几种分布式锁分别是怎么实现的？_Java后端架构猛猛的博客-CSDN博客</a></p><h3 id="3-4-2-线性一致性的代价"><a href="#3-4-2-线性一致性的代价" class="headerlink" title="3.4.2 线性一致性的代价"></a>3.4.2 线性一致性的代价</h3><p>线性一致性通常需要付出较高的代价，因为要保证数据的全局顺序一致性，需要牺牲一定的可用性和延迟。</p><p>在实现线性一致性时，需要考虑以下几个方面的代价：</p><ol><li>通信代价：为了保证数据的一致性，需要不断进行节点间的通信和同步操作，这会增加网络带宽的使用和延迟。</li><li>吞吐量代价：由于要对所有的操作进行全局排序，需要在整个系统范围内协调所有节点的操作，这会对系统的吞吐量产生影响。</li><li>可用性代价：在实现线性一致性时，如果某个节点发生故障，会影响整个系统的可用性。因此，在实现线性一致性时，需要采取一些机制来保证故障时的容错和恢复能力。</li><li>性能代价：由于要保证全局顺序一致性，系统可能需要进行多轮操作和协调，这会增加系统的延迟和响应时间。</li></ol><p>因此，在实际应用中，需要根据具体需求和场景，综合考虑各种代价，选择合适的一致性模型和实现方式，以达到最优的性能和可用性。</p><h3 id="3-4-3-顺序一致性"><a href="#3-4-3-顺序一致性" class="headerlink" title="3.4.3 顺序一致性"></a>3.4.3 顺序一致性</h3><p>顺序一致性是一种弱一致性模型，它要求系统的操作按照提交的顺序执行，但不要求所有节点都看到相同的执行顺序。</p><p>具体来说，对于任意两个操作，如果它们在一个节点上执行并且提交的顺序是相同的，则在所有节点上的执行顺序必须保持一致。但是，如果两个操作在不同节点上执行，则可能存在不同的执行顺序，即存在并发执行的可能性。因此，顺序一致性保证了操作的有序性，但是不保证全局的一致性。</p><p>在实现顺序一致性时，系统可以采用一些机制来保证操作的有序性，例如对操作进行时间戳或序列号标记，或者采用基于向量时钟的算法来实现。</p><p>相对于线性一致性来说，顺序一致性的代价较低，因为它不需要保证所有节点都看到相同的执行顺序。因此，顺序一致性通常用于一些对一致性要求不是特别高的场景，例如社交网络应用、在线游戏等。</p><h3 id="3-4-4-因果一致性（微信朋友圈）"><a href="#3-4-4-因果一致性（微信朋友圈）" class="headerlink" title="3.4.4 因果一致性（微信朋友圈）"></a>3.4.4 因果一致性（微信朋友圈）</h3><p>因果一致性是一种弱一致性模型，它要求系统的操作按照因果关系执行，即如果一个操作A在另一个操作B之前发生，那么操作B在所有节点上的执行必须在操作A之后。这意味着，因果一致性可以保证操作的有序性和因果关系，但不要求所有节点都看到相同的执行顺序。</p><p>具体来说，因果一致性要求系统中的所有节点都按照相同的因果顺序执行操作。在实现因果一致性时，通常采用向量时钟或其他类似的机制来维护操作的因果关系。</p><p>因果一致性相对于线性一致性和顺序一致性来说，代价更低，因为它不需要对所有操作进行全局排序，只需要保证操作的因果关系即可。因此，因果一致性通常用于一些对一致性要求不是特别高的场景，例如分布式日志系统、分布式数据库等。</p><p>值得注意的是，因果一致性仅仅保证了操作的因果关系和有序性，而不保证操作的结果和值。因此，在使用因果一致性时，需要考虑数据一致性和可用性等方面的问题。</p><h3 id="3-4-5-最终一致性（搜索引擎、社交网络）"><a href="#3-4-5-最终一致性（搜索引擎、社交网络）" class="headerlink" title="3.4.5 最终一致性（搜索引擎、社交网络）"></a>3.4.5 最终一致性（搜索引擎、社交网络）</h3><p>最终一致性是一种弱一致性模型，它允许系统中的不同节点在一段时间内保持数据的不一致性，但最终会达到一致的状态。这意味着，当系统中存在多个副本时，这些副本在某个时间点上的状态可能不同，但经过一段时间的同步和协调后，最终会达到一致的状态。</p><p>在实现最终一致性时，通常采用异步复制或延迟复制的方式，即不要求所有节点在短时间内达到一致的状态，而是允许节点在本地更新数据，并在后续的时间点上将更新的数据同步到其他节点。这样做可以提高系统的可用性和性能，并减少系统之间的通信负担。</p><p>最终一致性适用于一些对数据一致性要求不是特别高的场景，例如<strong>搜索引擎、社交网络</strong>等。但是，最终一致性也存在一些问题，例如数据冲突和合并、数据同步的延迟等，需要在实际应用中进行适当的处理和解决。</p><h3 id="3-4-6-以客户端为中心的一致性模型"><a href="#3-4-6-以客户端为中心的一致性模型" class="headerlink" title="3.4.6 以客户端为中心的一致性模型"></a>3.4.6 以客户端为中心的一致性模型</h3><p> 以客户端为中心的一致性模型是一种应用程序在客户端上维护数据一致性的模型。在这个模型中，客户端负责维护数据的一致性，而不是依赖于分布式系统来维护数据的一致性。</p><p>具体来说，以客户端为中心的一致性模型通常采用乐观并发控制的策略。在这个策略中，客户端通过在本地缓存中保存数据副本来维护数据的一致性，并在修改数据时对缓存中的数据进行验证。如果数据未被其他客户端修改，则客户端可以直接提交修改。否则，客户端需要处理数据冲突，并根据一些策略来解决冲突。</p><p>以客户端为中心的一致性模型适用于一些对一致性要求不是特别高的场景，例如移动应用、离线应用等。这种模型具有良好的可用性和性能，因为客户端可以通过本地缓存快速读写数据，而不必依赖于分布式系统进行通信。但是，它也存在一些问题，例如数据冲突和合并、数据同步的延迟等，需要在实际应用中进行适当的处理和解决。</p><p>单调读（Monotonic Reads）和单调写（Monotonic Writes）是指一个线程对于一个特定变量的读操作或写操作，必须按照执行顺序，按照先后顺序看到最近的操作结果。</p><p>例如，如果线程A先写入变量x，然后线程B读取变量x，那么线程B必须看到线程A的写入结果，而不是之前的旧值。</p><p>读你所写（Read Your Writes，RYW）是指一个线程对于一个特定变量的读操作，必须在它自己的最近的写操作之后进行。这个特性在分布式系统中非常重要，因为它可以保证一个线程在写入某个变量之后，能够看到它自己的写入结果，而不是其他线程的旧值。</p><p>PRAM（Parallel Random Access Machine）是一种并行计算模型，它描述了一种在共享内存并行计算机上进行并行计算的方式。PRAM模型中，所有处理器共享一个全局内存，并且可以在O(1)时间内进行读写操作。</p><p>在PRAM模型中，单调读、单调写和读你所写是非常重要的一些性质，因为它们可以保证在并行计算中不会发生数据冲突和数据不一致的问题，从而保证并行计算的正确性和性能。</p><h2 id="3-5-隔离级别"><a href="#3-5-隔离级别" class="headerlink" title="3.5 隔离级别"></a>3.5 隔离级别</h2><p>隔离级别是指在数据库事务中不同事务之间对数据的读写所采用的不同的隔离策略。常见的隔离级别有四种：读未提交、读已提交、可重复读和串行化。</p><ol><li>读未提交（Read Uncommitted）：最低的隔离级别，允许一个事务读取另一个事务未提交的数据，可能导致脏读、不可重复读、幻读等问题。</li><li>读已提交（Read Committed）：在一个事务中，读取数据时只能读取已经提交的数据，可以避免脏读问题，但是可能会出现不可重复读和幻读问题。</li><li>可重复读（Repeatable Read）：保证一个事务在多次读取同一数据时，能够看到同样的数据，即同一事务内多次查询结果集相同。但是，其他事务可以向该数据表中插入新的数据，导致幻读问题。</li><li>串行化（Serializable）：最高的隔离级别，完全隔离每个事务，事务只能一个接一个地执行，避免了所有并发问题，但是效率较低。</li></ol><p>不同的隔离级别在事务处理中的性能和正确性上有不同的影响，需要根据具体的业务需求进行选择。一般来说，读已提交和可重复读是应用比较广泛的隔离级别。</p><h2 id="3-6-一致性和隔离级别的对比"><a href="#3-6-一致性和隔离级别的对比" class="headerlink" title="3.6 一致性和隔离级别的对比"></a>3.6 一致性和隔离级别的对比</h2><p>线性一致性和串行化都是数据库中保证事务正确性的机制，但是它们有不同的实现方式和应用场景。</p><p>线性一致性（Linearizability）是指，在分布式系统中，每个操作都有一个全局的先后顺序，该顺序满足原子性、顺序性、一致性和实时性的要求。也就是说，线性一致性保证了分布式系统中的操作顺序与单个系统中的操作顺序相同，而且保证了操作的原子性、一致性和实时性。线性一致性保证了分布式系统中的操作表现出和单个系统一样的行为，对于应用程序来说，感知不到分布式环境的存在。</p><p>串行化（Serialization）是指，在多个事务并发访问同一份数据时，数据库系统会把这些事务串行执行，以保证数据的正确性。串行化可以消除脏读、不可重复读和幻读等问题，但是会降低并发性能。</p><p>虽然线性一致性和串行化都能保证数据的正确性，但是它们的应用场景不同。线性一致性更适用于分布式环境下的系统，例如分布式缓存、分布式队列等。而串行化更适用于事务并发访问同一份数据时，需要严格控制并发执行顺序的场景，例如银行转账、订单处理等。</p><p>需要注意的是，线性一致性和串行化都会影响数据库的并发性能，因此需要根据具体的业务需求和系统架构来选择适合的一致性控制机制，以保证系统的正确性和并发性能。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（四）分布式共识</title>
      <link href="/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/"/>
      <url>/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式共识"><a href="#分布式共识" class="headerlink" title="分布式共识"></a>分布式共识</h1><h2 id="4-1-分布式共识简介"><a href="#4-1-分布式共识简介" class="headerlink" title="4.1 分布式共识简介"></a>4.1 分布式共识简介</h2><p>分布式共识（Distributed Consensus）是指在分布式系统中，多个节点（或进程）协同完成某个任务或达成某个决策的过程。在这个过程中，每个节点需要就该任务或决策达成一致，并且能够互相通信、协调、协作。</p><p>分布式共识的一个重要应用是在区块链技术中，用于解决双花问题（Double-spending problem）和确定哪些交易会被写入区块链。比特币等加密货币就是通过共识算法来实现去中心化的交易记录。</p><p>常见的分布式共识算法包括拜占庭将军问题（Byzantine fault tolerance, BFT）、Raft、Paxos、Proof of Work（PoW）、Proof of Stake（PoS）等。这些算法都有各自的优缺点，适用于不同的场景。例如，PoW 算法被应用在比特币等加密货币中，而 PoS 算法则被用在以太坊等区块链平台中。</p><h3 id="4-1-1-什么是分布式共识"><a href="#4-1-1-什么是分布式共识" class="headerlink" title="4.1.1 什么是分布式共识"></a>4.1.1 什么是分布式共识</h3><p>分布式共识是指在一个分布式系统中，多个节点之间需要就某些决策达成一致意见的过程。在这个过程中，各个节点通过相互通信和协作来达成共识，以保证系统能够正常运作并避免出现错误或冲突。</p><p>在分布式系统中，由于节点之间的网络延迟、节点故障等原因，不同节点的状态可能存在不一致的情况。因此，需要通过分布式共识算法来解决这些问题。常用的分布式共识算法包括 Paxos、Raft、Byzantine Fault Tolerance 等。</p><p>分布式共识算法的基本思路是，通过节点之间的通信和协作，选出一个“领导者”节点来负责提出某个决策，其他节点通过投票和确认的方式来达成共识，以保证系统在多个节点之间的一致性和可靠性。这种算法在分布式数据库、区块链等系统中都得到了广泛应用。</p><h3 id="4-1-2-为什么要达成共识"><a href="#4-1-2-为什么要达成共识" class="headerlink" title="4.1.2 为什么要达成共识"></a>4.1.2 为什么要达成共识</h3><p>在分布式系统中，节点之间的状态可能存在不一致的情况，如果不对这些状态进行协调，就可能导致系统出现错误或冲突。为了避免这种情况的发生，需要在分布式系统中实现共识机制，保证各个节点之间的状态达成一致，从而保证系统的正确性和可靠性。</p><p>具体来说，如果在一个分布式系统中，某些节点的状态发生了变化，但其他节点还没有收到这个变化的通知，那么这些节点就会基于过期的状态进行操作，从而导致数据不一致或操作冲突。通过分布式共识算法，可以确保所有节点在进行操作前都已经达成了共识，从而保证了数据的一致性和操作的正确性。</p><p>另外，分布式共识还能够防止拜占庭错误的发生。拜占庭错误是指分布式系统中存在恶意节点或网络攻击，导致节点之间的通信受到干扰或伪造。通过分布式共识算法，可以检测和排除这些恶意行为，确保系统的安全性和可靠性。</p><h2 id="4-2-异步系统中的共识"><a href="#4-2-异步系统中的共识" class="headerlink" title="4.2 异步系统中的共识"></a>4.2 异步系统中的共识</h2><h3 id="4-2-1-FLP不可能定理"><a href="#4-2-1-FLP不可能定理" class="headerlink" title="4.2.1 FLP不可能定理"></a>4.2.1 FLP不可能定理</h3><p>FLP不可能定理是指，<strong>在一个异步的分布式系统中，不存在一个算法能够保证在存在至少一个节点故障的情况下，仍然能够保证所有节点能够在有限时间内达成共识。</strong></p><p>该定理由Fischer、Lynch和Paterson在1985年提出，是分布式共识领域的一个重要理论。其基本思想是，由于节点之间的通信存在延迟和不可靠性，因此在存在故障节点的情况下，无法确定某个节点是否已经停止工作或者只是延迟。这种不确定性会导致共识过程无法完成。</p><p>FLP不可能定理的证明使用了卡慕尔异步通信模型，即假设节点之间的消息传输可以无限制地延迟，但必须保证每个节点最终能够收到所有消息。基于这种通信模型，可以证明在存在至少一个节点故障的情况下，无法保证所有节点能够在有限时间内达成共识。</p><p>虽然FLP不可能定理指出了分布式共识问题的困难性，但是在实际应用中，往往会使用一些近似算法来解决共识问题。例如，Paxos算法、Raft算法等就是通过一些特殊的约束条件来实现了共识，从而在实际应用中得到了广泛的应用。</p><ul><li>安全性: 在一个任期内只会确定一个值（something wrong not happen）</li><li>活性：分布式系统最终会认同某一个值(something right must happen)</li><li>容错性</li></ul><p><a href="https://lrita.github.io/2018/10/23/safety-and-liveness-in-distributed/">分布式系统中的 safety 和 liveness — 源代码 (lrita.github.io)</a></p><p>和CAP一样，三选二</p><p><strong>证明：</strong></p><p>FLP不可能定理的证明是基于卡慕尔异步通信模型的，该模型假设节点之间的消息传输可以无限制地延迟，但必须保证每个节点最终能够收到所有消息。在这种通信模型下，证明FLP不可能定理的基本思路是，通过构造一个反例来说明在异步通信模型下，不存在一个算法能够保证在存在至少一个节点故障的情况下，仍然能够保证所有节点能够在有限时间内达成共识。</p><p>具体来说，假设有一个分布式系统，其中包含n个节点，节点之间通过消息传递来达成共识。为了方便起见，假设系统中只有两种状态：0和1。初始状态下，每个节点的状态都是不确定的。节点之间的通信是异步的，消息传输可以无限制地延迟，且无法保证消息的可靠性。</p><p>接下来，假设有一个算法A，可以在存在至少一个节点故障的情况下，仍然能够保证所有节点能够在有限时间内达成共识。为了证明FLP不可能定理，需要构造一个反例来说明这个算法是不可行的。</p><p>具体来说，假设存在两个节点p和q，它们的状态初始时均为不确定状态。为了达成共识，节点p发送一个消息m给节点q，告诉节点q它当前的状态是0。但由于通信是异步的，消息m可能会被延迟或者丢失，导致节点q无法知道节点p的状态。因此，节点q可以选择继续等待消息m，或者猜测节点p的状态是1。如果节点q猜测节点p的状态是1，那么节点q会发送一个消息n给节点p，告诉节点p它当前的状态是1。由于节点p也无法确定节点q的状态，节点p也有可能会猜测节点q的状态是0，从而发送一个消息k给节点q，告诉节点q它当前的状态是0。这样，就形成了一个死锁状态，导致节点p和q无法达成共识。</p><p>从上述分析可以看出，由于异步通信模型的存在，无法保证消息的可靠性和节点状态的一致性，从而导致FLP不可能定理的存在。虽然该定理证明了在异步通信模型下，不存在一个算法能够保证在存在至少一个节点故障的情况下，仍然能够保证所有节点能够在有限时间内达成共识，但在实际应用中，可以采用一些近似算法来解决共识问题。</p><ul><li>故障屏蔽</li><li>使用故障检测器</li><li>使用随机性算法</li></ul><p>这三种方法可以绕开FLP不可能定理</p><h3 id="4-2-2-故障屏蔽"><a href="#4-2-2-故障屏蔽" class="headerlink" title="4.2.2 故障屏蔽"></a>4.2.2 故障屏蔽</h3><p>故障屏蔽（Fault tolerance）和故障检测器（Fault detection）是分布式系统中常用的技术，用于提高系统的可靠性和鲁棒性。使用随机性算法是实现这些技术的一种常用方法。</p><p>故障屏蔽是一种技术，可以在系统中发生故障时保证系统的正常运行。一种常见的故障屏蔽技术是冗余备份（Redundancy），即在系统中增加多个备份，当一个节点发生故障时，备份节点可以接管其任务，保证系统的正常运行。在实现冗余备份时，常常使用随机性算法，如随机化选举（Randomized election）和随机化复制（Randomized replication）等技术，来提高系统的可靠性和鲁棒性。</p><h3 id="4-2-3-使用故障检测器"><a href="#4-2-3-使用故障检测器" class="headerlink" title="4.2.3 使用故障检测器"></a>4.2.3 使用故障检测器</h3><p>故障检测器是一种技术，用于检测分布式系统中的故障节点。一种常见的故障检测器是心跳检测（Heartbeat detection），即每个节点定期向其他节点发送心跳消息，检测是否有节点故障。在实现心跳检测时，常常使用随机性算法，如随机化时间间隔（Randomized interval）和随机化路线（Randomized routing）等技术，来避免故障检测过程中的死锁和瓶颈等问题，提高检测的准确性和效率。</p><p>虽然完美的故障检测器具备以下条件：</p><ul><li>完全性：每一个故障的进程都会被每一个正确的进程怀疑</li><li>精确性：每一个正确的进程都不会被其他进程怀疑</li></ul><p>但实际上，实现困难。而论文证明，即使使用”不完美”的故障检测器，只要通信可靠，失效进程不超过一半，依然可以用来解决共识问题。因此实现最终弱故障检测器：</p><ul><li>最终弱完全性：每一个故障的进程最终都会被一些正确的进程检测到。</li><li>最终弱精确性：经过一段时间后，一个正确的进程不会被其他正确的进程怀疑。</li></ul><h3 id="4-2-4-使用随机性算法"><a href="#4-2-4-使用随机性算法" class="headerlink" title="4.2.4 使用随机性算法"></a>4.2.4 使用随机性算法</h3><p>随机性算法是指在算法设计和实现中引入随机性的一种技术，可以用于解决一些分布式系统中的复杂问题，如分布式计算、分布式存储、分布式共识等问题。随机性算法具有一些优点，如简单、快速、容易实现和分布式化等特点，可以提高分布式系统的性能和效率。</p><p><strong>区块链：</strong></p><p>Proof of Work（PoW）和Proof of Stake（PoS）是两种常见的区块链共识机制，用于保证区块链的安全性和去中心化特性。它们的主要区别在于如何选举出下一个区块的记账节点。</p><p>PoW机制是通过计算一定难度的工作量来选举出下一个区块的记账节点。矿工需要通过计算一个随机数，使得计算结果符合一定的规则，以此获得记账权。这种机制需要大量的计算能力和电力消耗，因此存在能源浪费和环境污染等问题。</p><p>PoS机制则是通过拥有一定数量的代币来选举出下一个区块的记账节点。持有更多代币的用户会有更大的概率被选中作为记账节点。这种机制可以避免计算资源和能源的浪费，但需要考虑如何避免寡头垄断和激励机制的问题。</p><p>以下是PoW和PoS机制的一些优缺点：</p><p>Proof of Work（PoW）:</p><ul><li>优点：安全性高，攻击成本高，可预测性好。</li><li>缺点：能源浪费，环境污染，效率低，中心化问题。</li></ul><p>Proof of Stake（PoS）:</p><ul><li>优点：节省能源，环保，效率高，可扩展性好，分散化程度高。</li><li>缺点：可能导致寡头垄断，激励机制难以设计，安全性有待验证。</li></ul><p>[(459条消息) [区块链]共识算法（POW,POS,DPOS,PBFT）介绍和心得_dpos共识机制_乐扣老师lekkoliu的博客-CSDN博客](<a href="https://blog.csdn.net/lsttoy/article/details/61624287?ops_request_misc=%7B%22request_id%22:%22168594614916800186538613%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168594614916800186538613&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-61624287-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=pow">https://blog.csdn.net/lsttoy/article/details/61624287?ops_request_misc=%7B%22request%5Fid%22%3A%22168594614916800186538613%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168594614916800186538613&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-61624287-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=pow</a> pos&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[(459条消息) 区块链必知基础知识、POS、POW、DPOS、公有链、私有链、联盟链_区块链pos_yida&amp;yueda的博客-CSDN博客](<a href="https://blog.csdn.net/qq_40585384/article/details/124678390?ops_request_misc=&request_id=&biz_id=102&utm_term=pow">https://blog.csdn.net/qq_40585384/article/details/124678390?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=pow</a> pos&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-124678390.142^v88^control_2,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="4-3-同步系统中的共识"><a href="#4-3-同步系统中的共识" class="headerlink" title="4.3 同步系统中的共识"></a>4.3 同步系统中的共识</h2><p>Dolev-Strong算法是一种用于解决密码学中的安全多方计算（Secure Multiparty Computation，SMC）问题的算法。该算法由Danny Dolev和Hadas Shachnai-Strong于1991年提出。</p><p>安全多方计算是一种加密技术，允许多个参与者在不泄露私有信息的情况下共同计算出一个结果。在安全多方计算中，每个参与者需要负责保护自己的私有信息，同时协调计算过程以达到预期的结果。Dolev-Strong算法就是一种用于实现安全多方计算的算法之一。</p><p>Dolev-Strong算法基于一种名为交互式验证协议（Interactive Verification Protocol，IVP）的技术，通过多轮的通信和验证来确保计算的正确性和安全性。该算法可以在不需要信任第三方的情况下完成安全计算，因此具有很好的去中心化特性。</p><p>Dolev-Strong算法的主要思想是，<strong>将计算任务分解成多个子任务，每个参与者只负责计算其中的一部分，并将计算结果加密后传递给下一个参与者。在每个子任务之间，参与者需要进行验证，以确保计算的正确性和安全性。通过多轮的交互和验证，参与者最终可以得到正确的计算结果，同时保护自己的私有信息不被泄露。</strong></p><p>总的来说，Dolev-Strong算法是一种基于<strong>交互式验证协议</strong>的安全多方计算算法，可以在不需要信任第三方的情况下实现安全计算，具有很好的<strong>去中心化特性</strong>，被广泛应用于密码学、区块链和分布式系统等领域。</p><h2 id="4-4-Paxos"><a href="#4-4-Paxos" class="headerlink" title="4.4 Paxos"></a>4.4 Paxos</h2><p><a href="https://blog.csdn.net/weixin_45525272/article/details/127698249?ops_request_misc=%7B%22request_id%22:%22168174848616800213085420%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168174848616800213085420&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-127698249-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=paxos&spm=1018.2226.3001.4187">(443条消息) 分布式共识算法——Paxos算法（图解）_杨 戬的博客-CSDN博客</a></p><p>Paxos算法是一种用于解决分布式系统中达成一致性的算法，由Leslie Lamport于1998年提出。Paxos算法的目的是保证分布式系统中各个节点之间的状态一致性，即在不可靠的网络环境下，保证不同节点对共享资源的操作具有相同的效果。</p><p>Paxos算法的核心思想是通过一个协调者（coordinator）和多个参与者（acceptor）之间的协作来达成共识。在Paxos算法中，协调者的主要任务是向参与者发起提案（proposal），而参与者的主要任务是接受并决策是否通过提案，进而达成一致性。</p><p>具体来说，Paxos算法分为三个阶段：</p><ol><li>准备阶段（prepare phase）：协调者向参与者发起提案，并请求参与者发送自己曾经接受的最大提案编号（proposal number），以便协调者了解当前的提案状态。</li><li>接受阶段（accept phase）：如果协调者获得了大多数参与者的反馈，并且没有其他提案正在进行，那么协调者就可以向参与者发起新的提案，并请求参与者接受该提案。</li><li>学习阶段（learn phase）：一旦协调者成功地向大多数参与者发送了新的提案，并得到了反馈，那么协调者就可以通知所有参与者接受该提案，从而完成一致性达成的过程。</li></ol><p>总的来说，Paxos算法是一种用于解决分布式系统中达成一致性的算法，通过协调者和参与者之间的协作来实现共识。该算法被广泛应用于分布式存储、分布式计算、分布式数据库和区块链等领域。</p><p>Paxos算法是一种非常复杂的算法，实现和理解上有一些细节需要注意：</p><ol><li>提案编号（proposal number）的生成方式需要确保唯一性和可比较性，一般使用时间戳和节点编号等信息组合而成。</li><li>在准备阶段，参与者需要检查当前提案的编号是否比自己之前接受的所有提案编号都要大。如果有更大的提案编号，参与者就需要返回该提案的编号和对应的值，以便协调者做出决策。</li><li>在接受阶段，协调者需要确保至少有半数的参与者接受了新的提案，并将其值写入日志。如果无法达成一致，协调者需要回退并重新发起提案。</li><li>在学习阶段，协调者需要通知所有参与者已经达成共识，并将提案值写入共享存储中。</li><li>Paxos算法还需要考虑一些异常情况，例如节点宕机、网络延迟和网络分区等，需要通过复杂的协议来保证系统的可用性和一致性。</li></ol><p>需要注意的是，Paxos算法是一种非常复杂的算法，对于初学者来说理解起来比较困难。因此，建议在实践中结合阅读相关文献和代码实现，逐步理解其细节和原理。</p><p><strong>为什么要提案编号？</strong></p><ul><li>分布式系统使用时间戳之类的物理时间可能并不准确</li><li>轮次+服务器id</li></ul><h2 id="4-5-Go实现Paxos"><a href="#4-5-Go实现Paxos" class="headerlink" title="4.5 Go实现Paxos"></a>4.5 Go实现Paxos</h2><h2 id="4-6-Multi-Paxos"><a href="#4-6-Multi-Paxos" class="headerlink" title="4.6 Multi-Paxos"></a>4.6 Multi-Paxos</h2><p>Multi-Paxos是Paxos算法的一个变种，用于优化Paxos算法在多次提案的情况下的性能。在Paxos算法中，每次提案都需要执行一次完整的Paxos流程，包括准备、接受和学习三个阶段，这会导致Paxos算法的性能比较低。</p><p>Multi-Paxos通过引入领导者（leader）的概念来优化Paxos算法的性能。在Multi-Paxos中，领导者负责向参与者发起提案，而参与者则只需要根据领导者的指示来决策是否接受提案。因此，领导者可以在一段时间内发起多个提案，从而避免了每次提案都需要执行完整的Paxos流程的问题。</p><p>具体来说，Multi-Paxos的流程如下：</p><ol><li>领导者向参与者发起一个提案，包括提案编号和提案值。</li><li>参与者根据提案编号进行决策：如果当前的提案编号比之前接受的所有提案编号都要大，那么参与者就接受该提案，并向领导者发送接受消息；否则，参与者就拒绝该提案，并向领导者发送拒绝消息。</li><li>如果领导者收到了大多数参与者的接受消息，那么该提案就被确定，并向所有参与者发送确定消息，完成该提案的学习阶段。</li><li>如果领导者收到了大多数参与者的拒绝消息，那么领导者就需要重新选择一个提案编号，并重新发起提案。</li></ol><p>需要注意的是，Multi-Paxos仍然需要保证Paxos算法的正确性和一致性，但通过引入领导者来优化性能，使得Multi-Paxos在实际应用中更加高效。</p><h2 id="4-8-Raft算法"><a href="#4-8-Raft算法" class="headerlink" title="4.8 Raft算法"></a>4.8 Raft算法</h2><p><strong>要持久化存储的信息：</strong></p><ul><li>currentTerm：当前任期，用于恢复</li><li>votefor:向谁投票，只投个第一个发送RequestVote RPC的人而拒绝其他发送RequestVote RPC的人</li><li>日志：包含索引位置，任期号，命令本身，如果日志在半数节点上被存储，则该记录可提交。注意，领导者先将日志持久化存储到本地，再并行用AppendEntries RPC发送到其他节点上。这时，如果收到超过半数的响应，则领导者将命令应用于自己的状态机，提交该日志，然后向客户端返回响应。后续的日志复制RPC中还包含LeaderCommit表明领导者已经提交的日志的最大索引，跟随者收到此RPC时也会提交所有小于该索引的日志</li></ul><p><strong>两个RPC：</strong></p><ul><li>RequestVote RPC ：用于领导者选举，包含term,id,lastLogIndex,lastLogTerm，同样在用于领导者选举中，最后两个属性若term&gt;跟随者的term或者term相等但index大于跟随者最后一条日志的index，则跟随者才会投票，同理也需要一半投票才行，这确保了领导者在超过半数给他投票的节点中拥有最完整的日志。</li><li>AppendEntries RPC ： 用于复制日志&#x2F;发送心跳信息，后续的日志复制RPC中还包含LeaderCommit表明领导者已经提交的日志的最大索引，跟随者收到此RPC时也会提交所有小于该索引的日志</li></ul><p><strong>节点转换流程：</strong></p><ul><li><p><img src="https://s2.loli.net/2024/06/26/Ta59hwiKOP8bEAI.jpg" alt="184BF7AF3986E254E406FB773D48170F.jpg"></p></li><li><p>只有发生以下三种情况之一才更新自己的状态</p><ul><li>RequestVote RPC收到超过半数的选票，变为领导者</li><li>收到来自其他领导者的AppendEntries，退化为跟随者</li><li>没发生上述两种情况，任期++，投自己一票</li><li><img src="https://s2.loli.net/2024/06/26/PAk64Yw2OWc7rzm.jpg" alt="D2DEF7CFA7530BD2C2B1301FAA8C0159.jpg"></li></ul></li></ul><p><strong>保证两个特性：</strong></p><ul><li>安全性：一个任期内最多只有一个领导者被选出来</li><li>活性：系统最终能选出一个领导者</li></ul><p><strong>解决活锁问题（没人可以获得超过一半选票）：</strong></p><ul><li>节点随机选择超时时间（T-2T期间，T越大于网络传播时间效果越加，但同时不能太大，否则性能会受到影响）</li></ul><p><strong>两个特性：</strong></p><ul><li>如果任期和索引相同，则日志条目完全相同，日志内容相同，且之前的日志也完全相同（数学归纳法？）</li><li>RAFT不允许出现日志空洞，必须连续提交日志</li><li>为了维护这两个特性，在AppendEntries中还有之前一个日志的prevLogIndex和任期prevLogTerm，跟随者收到后，会检查自己最后一条日志的index和term是否匹配，若匹配，则接受，否则拒绝。（一致性检查）</li></ul><p><strong>延迟提交：</strong></p><ul><li>为什么需要延迟提交？<ul><li>若出现网络分区，导致B分区中的一个服务器拥有更新任期的日志（比如3），而A分区中的领导者（此时在任期4，而最新的日志任期为2），若提交后宕机（而A分区中其他服务器的日志任期也为2，但未提交），而B分区中的服务器此时恰好又成为新的领导者（任期5），此时则会覆盖掉A分区中未提交任期为日志2的服务器的日志，而实际上，A分区之前的领导者实际上已经提交了该日志，这不符合已提交日志不能被修改的需求</li></ul></li><li>怎么延迟提交<ul><li>日志必须存储在超过半数节点上</li><li>领导者必须看到超过半数节点上还存储着至少一条自己任期内的记录</li><li>领导者只能提交自己任期的日志，从而间接提交之前任期的日志</li><li>no-op日志：只有索引和日期，保持领导者的权威<ul><li>在领导者刚选举成功时，就本地追加no-op日志（只包含任期），同时appendEntries到其他的节点，显然，no-op日志的任期就是领导者当前的任期，当然能提交，从而间接提交之前的任期的日志</li></ul></li></ul></li></ul><p><strong>清理不一样的日志：</strong></p><ul><li>两种不一样的日志，缺失&#x2F;多出来的<ul><li>前者直接AppendEntries来补齐（也要用到nextIndex）</li><li>后者，领导者为每个跟随者保存nextIndex[]变量，存储领导者最后一条日志的索引+1</li></ul></li><li>流程<ul><li>针对缺失的：领导者检查自己的日志，最新index为10，然后比如对于跟随者1，nextIndex[1]&#x3D;11,带上前一个日志条目的唯一标识（10，任期6），跟随者1索引为10处没有日志，递减nextIndex[1],直到nextIndex[1]&#x3D;5,索引4且任期4的日志匹配，补齐索引5-10</li><li>针对多出来的，跟上面一样，直到找到匹配的index，而之后的全部删除即可</li></ul></li></ul><p><strong>处理旧领导者：</strong></p><ul><li>RPC请求有自己的任期，如果发生网络分区，老的领导者还以为自己是领导者，他的RPC在被其他Follower接收到的时候，但凡Follower已知的任期比他新，都会返回拒绝消息，但凡接收到拒绝消息，老的领导者就跟咽了气的皮球似的变为跟随者。</li></ul><p><strong>配置变更：</strong></p><ul><li>使用 <strong>Joint Consensus</strong>（联合共识）完成两阶段协议<ul><li>第一阶段,C<strong>old+new</strong>，多数派，提交</li><li>第二阶段,Cnew，多数派，提交，提交后后续配置都基于Cnew（不在Cnew的领导者下台）<ul><li>不在Cnew的领导者下台会导致一个问题就是，不在Cnew的跟随者将不再收到心跳，因此其会参与领导者选举（尽管会因为日志不够新而导致竞选失败，但是还是会影响竞选过程导致可用性变差）<ul><li>解决：Pre-Vote阶段，就还是发送Pre-Vote请求询问整个系统“我到底有没有资格参与竞选”（这个资格还是根据任期以及日志Index来判断的）。但这样会有个问题就是，如果在Cnew集群中的领导者还没有把Cnew的日志发到其跟随者上，也就是说，跟随者的日志还不够新，那么就算有Pre-Vote，可能还是会影响选举，导致不在Cnew的服务节点竞选成功</li><li>增强Pre-Vote判断条件：<ul><li>任期更大，或者任期相同索引更大</li><li>至少一次选举时间内没有收到领导者心跳</li></ul></li><li>注意到在Pre-Vote阶段不会增加自己的任期，所以Pre-Vote不仅可以解决配置更改干扰领导者的问题，还能解决网络分区脑裂和任期爆炸增长的问题</li><li>示例：etcd，将候选者细分为预候选者和候选者，前者发送Pre-Vote，不增加日期，后者发送RequestVote，会增加任期</li></ul></li></ul></li></ul></li></ul><p><strong>日志压缩：</strong></p><ul><li>关注最终状态</li><li>压缩后得到快照，持久化存储</li><li>每个服务器独立地压缩其已提交的日志</li><li>保存最后一条被丢弃的日志的索引和任期，用AppendEntries进行日志一致性的检查</li><li>一旦丢弃了前面部分的日志，领导者要承担两个责任：<ul><li>如果服务器重启了，则需要将最新的快照加载到状态机后再接收日志</li><li>向较慢的跟随着发送一致的状态快照(InstrallSnapshot RPC)</li></ul></li><li>LastIncludeIndex和LastIncludeTerm，记录状态，之前的日志全部丢弃</li><li>在正常运行期间通过写时复制技术（COW）生成快照（开源LogCabin）</li></ul><h2 id="4-9-Raft和Paxos"><a href="#4-9-Raft和Paxos" class="headerlink" title="4.9 Raft和Paxos"></a>4.9 Raft和Paxos</h2><p>Raft和Paxos都是分布式一致性算法，它们都被广泛应用于构建高可用性、高可靠性的分布式系统。</p><p>Paxos是最早提出的分布式一致性算法之一，由Leslie Lamport在1990年代初期提出。Paxos算法包含了两个主要的组件：leader选举和状态复制。它的核心思想是通过在节点之间达成共识来实现状态的复制和一致性。</p><p>Raft是一种新近出现的分布式一致性算法，由Diego Ongaro和John Ousterhout于2013年提出。Raft算法也包含了leader选举和状态复制两个主要部分，它强化了容错机制和可读性，使得它更容易被理解和实现。</p><p>相比而言，Raft与Paxos相比较具有以下优势：</p><ol><li>理解和实现容易：Raft算法把分布式一致性问题分成了几个独立的子问题，分别处理，每个子问题都比较容易理解和实现，使得整个算法更加容易理解和实现。</li><li>更好的可读性：Raft的算法描述更接近日常使用中的术语，更容易理解，在阅读和修改代码时更加方便。</li><li>更好的性能：Raft算法的性能比Paxos算法更好，特别是在网络不稳定或者出现网络分区的情况下，Raft算法的表现更加优秀。</li></ol><p>总之，虽然Raft和Paxos都是用于实现分布式一致性的算法，但是它们有着不同的设计思路和实现方式。Raft算法在易用性和可读性方面，相对Paxos算法更胜一筹，但在实际的应用场景中，不同的问题需要选择最适合的算法来解决。</p><h2 id="4-10-拜占庭容错和PBFT算法"><a href="#4-10-拜占庭容错和PBFT算法" class="headerlink" title="4.10 拜占庭容错和PBFT算法"></a>4.10 拜占庭容错和PBFT算法</h2><p>Raft和Paxos，都是非常高效的算法，他们只支持CFT（Crash fault tolerance），只允许系统内节点宕机（crash），并不考虑系统内有作恶节点。</p><p><a href="https://zhuanlan.zhihu.com/p/53897982">共识算法系列：PBFT算法关键点综述、优缺点总结 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/35847127">共识算法系列之一：raft和pbft算法 - 知乎 (zhihu.com)</a></p><p><img src="https://s2.loli.net/2024/06/26/KorHVJc7exkftXw.webp" alt="v2-1b29af254f0cc338876f232e32415878_1440w[1].webp"></p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（六）时间和事件顺序</title>
      <link href="/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89%E6%97%B6%E9%97%B4%E5%92%8C%E4%BA%8B%E4%BB%B6%E9%A1%BA%E5%BA%8F/"/>
      <url>/2024/06/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89%E6%97%B6%E9%97%B4%E5%92%8C%E4%BA%8B%E4%BB%B6%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="时间和事件顺序"><a href="#时间和事件顺序" class="headerlink" title="时间和事件顺序"></a>时间和事件顺序</h1><h2 id="6-1-物理时钟"><a href="#6-1-物理时钟" class="headerlink" title="6.1 物理时钟"></a>6.1 物理时钟</h2><ul><li>机械时钟</li><li>石英时钟</li><li>原子钟：原子共振频率标准来计算</li><li>GPS</li></ul><h2 id="6-2-时钟同步"><a href="#6-2-时钟同步" class="headerlink" title="6.2 时钟同步"></a>6.2 时钟同步</h2><p>NTP:<a href="https://blog.csdn.net/weixin_45057618/article/details/120200341?ops_request_misc=%7B%22request_id%22:%22168243248816800182751293%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168243248816800182751293&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-120200341-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=NTP%E5%8D%8F%E8%AE%AE&spm=1018.2226.3001.4187">(430条消息) NTP详解(网络时间协议)_127.127.1.0 ntp含义_思福迪小白的博客-CSDN博客</a></p><p>针对NTP同步导致时间回退甚至是负数的情况–单调时钟，保证返回的时间严格单调增长</p><p>Cloudflare没用单调时钟，而是在发现时间差为负数或者0时变为一个默认值（golang没暴露单调时钟）</p><p>单调时钟的局限性：以自身所在的计算机的某个时间为起点，也就是说，来自同一个节点的单调时钟才有意义。</p><p>如何发明分布式系统中的单调时钟？</p><h2 id="6-3-逻辑时钟"><a href="#6-3-逻辑时钟" class="headerlink" title="6.3 逻辑时钟"></a>6.3 逻辑时钟</h2><p>Lamport Clock</p><p>Happens-Before:</p><p>​if a-&gt;b</p><ul><li>if a and b are in the same process, and a is before b, then a-&gt;b</li><li>if a is the event that sends a message , b is the event that receives the message, then a-&gt;b.</li><li>if a-&gt;b and b-&gt;c, then a-&gt;c; if a &#x2F;-&gt;b or b&#x2F;-&gt;a, then a and b are in concurrency(a||b).</li></ul><p>a-&gt;b, then C(a)&lt;C(b)</p><p>C(a)&lt;C(b), a&#x2F;-&gt;b</p><ul><li>每个进程都有自己的逻辑时钟，初始值为0</li><li>如果进程i内部发生一个新的事件，那么将其逻辑时钟加一，即Ci&#x3D; Ci+1</li><li>if process i sends a message to process j , and the logic clock in process i is C(i), then, firstly, C(i)&#x3D;C(i)+1, and then, i sends Ci and the message to process j, and then, process j updates its logic clock Cj&#x3D; max(Ci,Cj)+1</li></ul><p>根据离散数学的关系而言，逻辑时钟和物理时钟的区别在于，物理时钟的先后关系是一种total ordering，是全局可见的一种关系，谁先谁后一目了然；然而逻辑时钟 is a kind of partial ordering，只有部分元素的先后关系（本质原因是，我们不能根据逻辑时间的先后去判定逻辑业务的先后）</p><p>如何使逻辑时钟也具有全序关系？给进程加上优先级，但是赋予进程不同的优先级排序会有不同的全序关系</p><p>RAFT的任期、选举算法、日志和状态机的思想等都出自这篇论文（Lamport,Leslie.”Time,clocks,and the ordering of events in a distributed system.”Concurrency: the Works of Leslie Lamport. 2019.179-196）：</p><ul><li>一个<strong>去中心化的算法</strong>，通过逻辑时钟实现分布式资源互斥来分配资源</li><li>每个进程维护一个消息队列，消息的格式为Tm: Pi, 即为第i个进程在Tm的逻辑时钟下发送的消息</li><li>进程维护自己的消息，也接收别人的消息，决定自己是否能够获取资源的条件<ul><li>消息队列中除开自己的消息之外的消息的逻辑时间，均大于自己的消息</li><li>排在队头的消息是自己的消息（这里消息的插入可以是对头队尾，也可以是中间）</li></ul></li></ul><h2 id="6-4-向量时钟"><a href="#6-4-向量时钟" class="headerlink" title="6.4 向量时钟"></a>6.4 向量时钟</h2><p>跟逻辑时钟很类似，只不过逻辑时钟只考虑了本地的逻辑时间，而向量时钟的维度为节点数，维护全局的时间。</p><p>向量时钟（Vector Clock）是一种在分布式系统中用于记录事件发生顺序的机制。它通过给每个节点分配一个独特的向量来跟踪每个节点上的事件发生次数，这个向量被称为向量时钟。</p><p>向量时钟的大小等于节点数，每个元素代表了一个节点的时间戳。当一个事件发生时，对应节点的时间戳会自增1。如果两个事件发生在不同的节点上，那么它们的时间戳是相互独立的，无法比较先后顺序；但如果它们发生在同一个节点上，就可以用向量时钟来比较它们的先后顺序。比如说，设有A,B,C三个节点，此时在A节点上发生了一个事件，那么其向量时钟会变为[1,0,0]，因为这是A节点上第一个事件。如果随后在C节点上发生了一个事件，那么其向量时钟会变为[0,0,1]，因为这是C节点上第一个事件。如果再在B节点上发生了一个事件，那么其向量时钟会变为[0,1,0]，因为这是B节点上第一个事件。这样，在整个分布式系统中，我们得到了A为[1,0,0]，B为[0,1,0]，C为[0,0,1]的向量时钟。</p><p>当一条消息从一个节点传递到另一个节点时，消息中会包含发送方的向量时钟。接收方在收到消息后，将它自己的向量时钟和接收到的消息中的向量时钟进行比较，取每个位置上较大的值作为新的时间戳。然后将接收到的消息的时间戳同步到本地，再加上1，表示接收到了这条消息。这样，接收方就可以知道这条消息是在哪个节点上发送的，以及这条消息的先后顺序。</p><p>向量时钟不仅能够帮助我们比较事件间的先后关系，还能检测出并发事件。比如说，如果两个事件A和B同时发生，那么它们对各自持有的向量时钟都会影响到相应的位置上，导致这两个节点上的向量时钟不一致。这样，我们就可以检测出这两个事件的并发性。</p><p>缺点在于，向量的维度与节点数正相关，随着节点增多，向量时钟越大，向量时钟需要大量的磁盘和内存空间，同时需要更长的时间来计算和比较。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4&amp;SRV6</title>
      <link href="/2024/06/24/B-EP2/"/>
      <url>/2024/06/24/B-EP2/</url>
      
        <content type="html"><![CDATA[<h1 id="B-EP2"><a href="#B-EP2" class="headerlink" title="B-EP2"></a>B-EP2</h1><p>背景：互联网变得臃肿，网络管理员迫切需要一种快速高效的<strong>网络遥测方案</strong>，能够利用采集到的实时准确的网络状态信息来快速检测和定位常见网络故障，然后需要一个有效的<strong>网络控制和管理（NC&amp;M）方案</strong>，以实现只能及时决策以在网络路径上<strong>梳理和路由流量</strong>，以同时实现<strong>高效的利用和高质量的服务（QoS</strong>）。</p><ul><li>采集网络信息，定位故障</li><li>有效的网络控制和管理方案</li></ul><p><a href="https://blog.csdn.net/hjxzb/article/details/91141685?ops_request_misc=%7B%22request_id%22:%22168753985816782427413509%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168753985816782427413509&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-91141685-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=P4&spm=1018.2226.3001.4187">(465条消息) P4学习笔记（一）初识P4_p4接口是干嘛的_程序员学编程的博客-CSDN博客</a></p><ol><li><p>基于P4的主动遥测</p><ul><li><p>探针代替数据分组进行遥测，降低了遥测开销（因为数组分组比如INT即带内网络遥测<a href="https://blog.csdn.net/weixin_47104688/article/details/123229563?ops_request_misc=%7B%22request_id%22:%22168606788516800222871187%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168606788516800222871187&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123229563-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=INT%E5%B8%A6%E5%86%85&spm=1018.2226.3001.4187">(460条消息) 带内网络遥测INT–In-band Network Telemetry_袁冬至的博客-CSDN博客</a></p><p><img src="https://s2.loli.net/2024/06/24/pdxWMcIf7mgeRLJ.jpg" alt="SDN.png"></p><p><a href="https://www.sdnlab.com/23822.html">https://www.sdnlab.com/23822.html</a></p><p><a href="https://blog.csdn.net/changqing1234/article/details/103669835?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-103669835-blog-123229563.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-103669835-blog-123229563.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=1">(465条消息) Telemetry 技术概述_LeocenaY的博客-CSDN博客</a></p><p>，在转发数据分组时能够在数据在网络结构流动的过程中，通过在路径中间节点插入元数据，监控系统可以通过这些元数据进行收集网络状态，但这样载荷比就大)，INT之类的带内网络遥测也存在一些局限性，难以获取全局网络试图。这样就加入了探针进行主动遥测，提高数据分组的有效载荷比。</p><p><a href="https://www.sdnlab.com/23822.html">一文读懂带内网络遥测技术 | SDNLAB | 专注网络创新技术</a></p></li></ul></li><li><p>基于段路由（基于IPV6的一向技术）</p><p><img src="https://s2.loli.net/2024/06/26/CJNZUQIAzHT2E6O.png" alt="image-20230607005803362.png"></p><p><a href="https://blog.csdn.net/m0_49864110/article/details/123591943?ops_request_misc=%7B%22request_id%22:%22168606977016800225513092%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168606977016800225513092&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123591943-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=SRV6&spm=1018.2226.3001.4187">(460条消息) 广域网技术——SRv6 SID讲解_静下心来敲木鱼的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Ether_Dzh/article/details/119847548?ops_request_misc=%7B%22request_id%22:%22168754187716800227440687%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168754187716800227440687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-119847548-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=SRV6&spm=1018.2226.3001.4187">(465条消息) 1.2、SRv6(Segment Routing Over IPv6) 介绍_srv6技术是什么_Ether_Dzh的博客-CSDN博客</a></p><p><img src="https://s2.loli.net/2024/06/24/zMpDeVWXRC46Fnd.jpg" alt="网络编程.png"></p><ul><li>改变SR标签和排列顺序指定探测路径</li><li>探针加入SR标签栈获取全面的网络视图，环形探测路径，单个探测点具备探针发送端和接收端功能，减少多个探测点之间同步协调探针等复杂操作。</li><li>减少遥测冗余，探针分组中加入遥测指示域，指定需要采集的遥测数据</li><li>将可编程设备的内部状态的状态信息嵌入到探针中，通过可编程设备的定制化能力自定义数据分组处理逻辑来是实现。</li></ul></li></ol><p>SDN控制面：可编程环境</p><p>可集中控制网络：SDN域由集中统一的控制单元实施管理</p><p>转发和控制分离</p><p>P4：</p><ul><li><p>可以对网络设备芯片逻辑进行编程</p></li><li><p>可重配置性：支持转发逻辑代码经过编译部署到具体平台上之后动态修改报文</p></li><li><p>不绑定某个具体的网络协议</p></li><li><p>平台无关性：独立于特定的底层运行平台来编写数据报文处理逻辑</p></li><li><p>需要特定交换机的支持</p></li><li><p>数据采集与感知：</p><ol><li>通过ONOS（一体化的网络操作系统）的Restful北向接口查询得到的ONOS特有数据库内的全局网络信息（但忽略细节）<a href="https://blog.csdn.net/weixin_34384681/article/details/91849632?ops_request_misc=%7B%22request_id%22:%22168606907716800227458444%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168606907716800227458444&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-6-91849632-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=ONOS&spm=1018.2226.3001.4187">(460条消息) ONOS预热篇之ONOS简介_weixin_34384681的博客-CSDN博客</a></li><li>数据层交换机中的数据流，插入探针，数据采集服务链，提取各个包的特征进行统计</li><li>基于段路由机制，进行INT主动遥测（INT本身是有局限性的，探测路径需要提前指定，而借助段路由机制进行主动网络遥测，降低成本提高了灵活性），流量包中插入探针，快速获取探测包路径上的第一手数据平面遥测数据</li></ol></li><li><p>这里的智能分析与决策采用深度学习相关的东西</p></li><li><p>可编程动态管控（P4）：仅管理数据平面如何处理数据包，定义控制平面与数据平面通信的接口，但不描述控制平面功能</p></li><li><p>传统交换机和P4交换机</p><p>在传统交换机中，制造商定义了数据平面的功能，控制平面通过一些管理表（如路由表）中的条目以及处理控制数据包（如路由协议数据包）或异步事件（如链路状态更改或学习通知）来控制数据平面。</p><p>P4可编程交换机与传统交换机的区别主要体现在两个方面：</p><ul><li>数据平面功能不是预先固定的，而是由 P4 程序定义的。数据平面在初始化时配置为实现 P4 程序描述的功能（由红色长箭头显示），并且没有现有网络协议的内置知识。</li><li>控制平面使用与固定功能设备中相同的通道与数据平面进行通信，但数据平面中的表集合和其他对象不再是固定的，因为它们由 P4 程序定义。P4 编译器生成控制平面用于与数据平面通信的 API。</li></ul></li><li><p>控制平面（SDN控制器）如何与P4的设备进行通信？</p><ul><li><p>P4Runtime（基于gRPC框架）</p></li><li><p>OpenFlow协议中，控制器和设备是由控制器开放端口，设备才能连接上控制器；而P4Runtime是设备上开始gRPC,控制器连接设备，因此，在支持P4的设备上也会有一个代理的Agent去处理控制器来的连接</p></li></ul></li></ul><p>鉴于基于P4的被动网络遥测可扩展性不足的缺点，首先要保证的就是主动遥测的探测路径在运行时是灵活可控的，我们采用段路由机制来灵活控制探针的探测路径（这里的路径生成采用了<a href="https://blog.csdn.net/KCDCY/article/details/124732427?ops_request_misc=%7B%22request_id%22:%22168606887816800222897225%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168606887816800222897225&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124732427-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AC%A7%E6%8B%89%E9%80%9A%E8%B7%AF%E7%AE%97%E6%B3%95">Hierholzer <em>算法</em>，欧拉回路</a>）。段路由机制简单易用，不需要额外的协议支持，通过组合一系列简单的网络操作指令就可以完全控制数据分组的转发路径。在降低了网络成本的同时也提高了灵活性。最后段路由能够支持增量部署，降低了部署难度，可行性好。该系统下可以灵活定义遥测路径，按需探测可能或已经出现问题的路径，快速定位故障位置。同时，可以在探针格式中加入探测遥测数据类型的字段来支持按需获取遥测数据。同时要保证能够采集到网络设备内部的状态信息等细粒度准确的遥测数据，我们可以通过修改可编程设备的数据平面处理逻辑来区分正常数据分组和探针数据分组，对于正常数据分组直接正常转发，而对于探针数据分组匹配其中的路径转发标签以及遥测指令字段，将实时的网络状态信息封装在探针数据分组中。</p>]]></content>
      
      
      <categories>
          
          <category> SDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> P4 </tag>
            
            <tag> SRV6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研复习准备</title>
      <link href="/2024/06/24/%E4%BF%9D%E7%A0%94/"/>
      <url>/2024/06/24/%E4%BF%9D%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="保研"><a href="#保研" class="headerlink" title="保研"></a>保研</h1><p><a href="https://blog.csdn.net/zqm_0015/article/details/109236372">(453条消息) 2021年计算机保研面试题_一个主机将两个端口接到网络上是否会提升吞吐量_Challow的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Baoyan_cs/article/details/124314177">(453条消息) 吐血整理，20个计算机保研常见问题及回答模板_计算机专业20个面试常见问题_Baoyan_cs的博客-CSDN博客</a></p><p>[(453条消息) 2021计算机保研经历(清软, 北深, 浙大, 南大, 中科大, 北航, 哈深, 南开, 华科, 武大, 中大)_inicho的博客-CSDN博客](<a href="https://blog.csdn.net/qq_43280818/article/details/123450451?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C">https://blog.csdn.net/qq_43280818/article/details/123450451?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=计算机网络</a> 保研&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-9-123450451.142^v87^insert_down28,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h2><p>[(453条消息) 计算机网络保研面试题整理（自用）_乌鸡摸鱼的博客-CSDN博客](<a href="https://blog.csdn.net/m0_52571748/article/details/119513761?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C">https://blog.csdn.net/m0_52571748/article/details/119513761?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=计算机网络</a> 保研&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-119513761.142^v87^insert_down28,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[(453条消息) 计算机专业保研面试复习笔记——计算机网络_计算机保研复习_欧二lord的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_43117620/article/details/109198194?ops_request_misc=%7B%22request_id%22:%22168433738716800227438825%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168433738716800227438825&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109198194-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C">https://blog.csdn.net/weixin_43117620/article/details/109198194?ops_request_misc=%7B%22request%5Fid%22%3A%22168433738716800227438825%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168433738716800227438825&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109198194-null-null.142^v87^insert_down28,239^v2^insert_chatgpt&amp;utm_term=计算机网络</a> 保研&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/weixin_46893257/article/details/116306838?ops_request_misc=%7B%22request_id%22:%22168470925916800215052847%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168470925916800215052847&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-116306838-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=IPv6%E6%B5%81%E6%A0%87%E7%AD%BE&spm=1018.2226.3001.4187">(454条消息) IPV6基本报头_ipv6报头_yibasuo18176的博客-CSDN博客</a></p><p>[(454条消息) BGP、IBGP、EBGP、IGP、EGP_bgp和egp的区别_zhaomax的博客-CSDN博客](<a href="https://blog.csdn.net/zhaomax/article/details/52399403?ops_request_misc=&request_id=&biz_id=102&utm_term=IGP">https://blog.csdn.net/zhaomax/article/details/52399403?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=IGP</a> BGP&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-4-52399403.142^v87^insert_down28,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p><a href="https://blog.csdn.net/m0_52571748/article/details/119512934">(453条消息) 计算机操作系统保研面试题整理（自用）_乌鸡摸鱼csdn_乌鸡摸鱼的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/love521314123/article/details/119682266">(453条消息) 操作系统笔记（含王道计算机考研——操作系统课件）_操作系统考研笔记_一只不吃老鼠的猫的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/lishanleilixin/article/details/89709194">(454条消息) OS之存储管理 — 磁盘调度算法_os 对磁盘操作 写优先_如是说如是的博客-CSDN博客</a></p><h2 id="计组"><a href="#计组" class="headerlink" title="计组"></a>计组</h2><p><a href="https://blog.csdn.net/m0_52571748/article/details/119530739?ops_request_misc=%7B%22request_id%22:%22168433894316800197057897%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168433894316800197057897&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119530739-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BF%9D%E7%A0%94&spm=1018.2226.3001.4187">(453条消息) 计算机组成原理保研面试题整理（自用）_计算机组成原理面试题_乌鸡摸鱼的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/love521314123/article/details/122825247#comments_26524593">(453条消息) 王道计算机考研——计算机组成原理笔记_王道计算机组成原理_一只不吃老鼠的猫的博客-CSDN博客</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><a href="https://blog.csdn.net/weixin_43790779/article/details/120934734?ops_request_misc=%7B%22request_id%22:%22168433902416800226547104%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168433902416800226547104&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120934734-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BF%9D%E7%A0%94&spm=1018.2226.3001.4187">(453条消息) 保研面试复习之数据结构篇_数据结构保研复习_abtgu的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_40113925/article/details/100938378?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-100938378-blog-120934734.235%5Ev36%5Epc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-100938378-blog-120934734.235%5Ev36%5Epc_relevant_anti_vip&utm_relevant_index=3">(453条消息) 数据结构基础概念知识点_保研&#x2F;考研&#x2F;面试复习_顺序哈希分块折半_Raising_的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/whz_zb/article/details/7425152?ops_request_misc=%7B%22request_id%22:%22168465798116800182114693%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168465798116800182114693&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-7425152-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=%E8%83%9C%E8%80%85%E6%A0%91%E5%92%8C%E8%B4%A5%E8%80%85%E6%A0%91&spm=1018.2226.3001.4187">(454条消息) 胜者树与败者树_胜者树和败者树_whz_zb的博客-CSDN博客</a></p><p>[(454条消息) 详解全局变量，全局变量与静态变量的区别_静态变量和全局变量_舒泱的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_43222324/article/details/106989714?ops_request_misc=%7B%22request_id%22:%22168474123716800226594104%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168474123716800226594104&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-106989714-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">https://blog.csdn.net/weixin_43222324/article/details/106989714?ops_request_misc=%7B%22request%5Fid%22%3A%22168474123716800226594104%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168474123716800226594104&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-106989714-null-null.142^v87^insert_down28,239^v2^insert_chatgpt&amp;utm_term=全局变量</a> 静态变量&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><p><a href="https://uestc.feishu.cn/file/boxcnT7mKncOLwyhbDjSGrCPhed">概率论.pdf - 成电飞书云文档 (feishu.cn)</a></p><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><p><a href="https://uestc.feishu.cn/file/QdMtbKWaDofazmxMw6EcHqFyndc">高等数学知识点最全汇总.pdf - 成电飞书云文档 (feishu.cn)</a></p><p><a href="https://blog.csdn.net/crj0926/article/details/101761433?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%92%8C%E5%8F%98%E6%8D%A2%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-101761433.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(454条消息) 傅里叶级数和傅里叶变换简介和推导_傅里叶级数和傅里叶变换的区别和联系_HKDER的博客-CSDN博客</a></p><h2 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h2><p><a href="https://uestc.feishu.cn/file/PjBcbDESvoKrngxSYHScvkCInJd">离散数学.docx - 成电飞书云文档 (feishu.cn)</a></p><h2 id="线代"><a href="#线代" class="headerlink" title="线代"></a>线代</h2><p><a href="https://uestc.feishu.cn/file/HzV3b1Wxno1LFaxF6G9c1VKunzg">线代.pdf - 成电飞书云文档 (feishu.cn)</a></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://uestc.feishu.cn/file/boxcn0xg2vSIlKrccY2Y32c7Hye">数据库.pdf - 成电飞书云文档 (feishu.cn)</a></p><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h2 id="JAVA-C"><a href="#JAVA-C" class="headerlink" title="JAVA&amp;C++"></a>JAVA&amp;C++</h2><p>[(454条消息) java—垃圾回收算法(GC)_会飞的猪zhu的博客-CSDN博客](<a href="https://blog.csdn.net/m0_58196614/article/details/126426266?ops_request_misc=&request_id=&biz_id=102&utm_term=Java">https://blog.csdn.net/m0_58196614/article/details/126426266?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Java</a> 的垃圾回收算法&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-126426266.142^v87^insert_down28,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="经验贴"><a href="#经验贴" class="headerlink" title="经验贴"></a>经验贴</h2><p><a href="https://zhuanlan.zhihu.com/p/415169966">2021年计算机保研经验帖 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/569448591">2022南大cs夏令营笔试面试准备 - 知乎 (zhihu.com)</a></p><p><a href="https://www.rstk.cn/news/624725.html?action=onClick">https://www.rstk.cn/news/624725.html?action=onClick</a></p><p><a href="https://zhuanlan.zhihu.com/p/377444777">2021年半跨CS保研经历（已上岸pku） - 知乎 (zhihu.com)</a></p><h2 id="机试真题"><a href="#机试真题" class="headerlink" title="机试真题"></a>机试真题</h2><p><a href="https://github.com/Muyiyunzi/BUAA-CS-Codes">Muyiyunzi&#x2F;BUAA-CS-Codes: 北京航空航天大学计算机学院研究生考试复试上机部分往年试题及解答 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴</title>
      <link href="/2024/06/24/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
      <url>/2024/06/24/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="保研经验贴"><a href="#保研经验贴" class="headerlink" title="保研经验贴"></a>保研经验贴</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天被两三个25届的同学问到保研的事 尘封许久的记忆再次打开 再次汇总了之前收到的所有信息和仅存的记忆 给一点模板上的参考<br>注:是疫情解封后第一次线下 故之前很多经验贴没有参考性</p><p>bg: 985本SE</p><p>rank: 3&#x2F;181 3.99&#x2F;4.00</p><p>论文: 无</p><p>竞赛: 双国三 双省一 一省三 n校奖</p><p>奖学金: 两年国奖</p><p>方向: 分布式系统&#x2F;存储 偏架构和系统设计方向</p><p>实习: 某自驾公司地图存储系统&#x2F;字节抖音电商开发岗</p><p>由于夏令营已经上岸 故没有参加后续预推免</p><p>入营:</p><p>夏令营:</p><p>①北大计算机 直博（放弃且意愿不强 真不想读博）</p><p>②北大软微 硕士（计算机学院组➕老师 最终去向）</p><p>③中国科学院计算所 硕士</p><p>④上海交通大学电院 硕士</p><p>⑤南京大学计算机学院 硕士</p><p>⑥北京航空航天大学计算机学院 硕士（放弃）</p><p>⑦中国人民大学信院 硕士</p><p>⑧西安交通大学计算机学院 硕士</p><p>被拒:</p><p>①复旦大学计算机学院（只要第一我也没办法）</p><p>参加:</p><p>由于在实习真抽不开时间去其他地方参营</p><p>①北大软微</p><p>②北航计算机</p><p>③南大计算机（参加了部分 获得软件所的通过了但后面不是很想去参加了…跟北大有冲突也是个重要原因）<br>优营</p><p>①北大软微</p><p>②北航计算机</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>数学方面:</p><p>①概率论②线性代数③微积分④离散数学</p><p>这部分需要从头到尾过一遍 相关概念、联系一定要熟，各部分重点其实网上总结🉐十分详细了 一定好好准备！</p><p>英语方面:</p><p>①各种日常口语➕部分计算机相关专业的词汇 不需要特别详细 但我建议提早一个月进入状态</p><p>专业知识:</p><p>①数据结构②计算机网络③操作系统④计组⑤编译原理⑥机试！！！（别说其他语言了 现在学c++还来得及 STL弄熟➕王道机试指南➕力扣➕到处搜集真题 爆！！！）</p><p>四五很少考 南大计算机的笔试特别喜欢考编译原理——题简直又多又长又难 数据结构重中之重 机试一定好好准备！！！</p><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><p>南大计算机（流程繁琐）</p><p>①最开始我记得是软件所有个面试，线上的，会问一些离散数学（平面图 哈密顿图等等）和一些数据结构的题 差不多十五分钟（这一部分是提前了差不多两个月进行的）</p><p>②后续在临近夏令营的时候还有一轮线上笔试 巨难（如果没学过编译原理就寄了）</p><p>③后续就是去线下啦 但遗憾没去看看美丽的仙林校区😭</p><p>北航计算机（特色大模拟➕不报销车费路费 甚至不包吃）</p><p>①第一天就是两道机试 总共两小时 第一道大模拟真的搞的头大（好在还是写对了） 第二道真是完全一点不会（不是常规的算法题） 这一轮🉐至少做对一个才能进入下一轮</p><p>②第二天面试 数学➕英语➕各种专业问题 甚至还问了我前端➕后端➕java和c++ python语言特性使用场景（好在哥们也是实习面试了几十轮还是信手拈来的）</p><p>老师全程压力面，不能怂！</p><p>然后优营发的很快，我记得是7月2号就发了，也是我第一个优营</p><p>北大软微</p><p>软微从22年开始比较特殊，首先据说要退学费，其次夏令营的师资和实验室可以是计算机学院&#x2F;智能学院的，加上还是硕士简直不要太香好吧</p><p>①第一天闲聊吹水 我就记得紫燕百味鸡外卖还挺好吃</p><p>②先来三道算法题！（30min 我们组跟系统方向强相关三道分别是mid mid hard难度的 可以写伪代码）其实我第三道有点问题但由于太自信甚至后续面试当场给出来数学证明让老师也疑惑住了</p><p>③面试: 自我介绍➕各种问题的提问 甚至问到我一些关于实习用到的juiceFS和一些底层的概念&#x2F;分布式共识&#x2F;运维&#x2F;缓存等，还问到代码量（必然是多多），以及数学上面的证明➕算法题复盘➕一些其他的问题，其实都还好，虽然没全准备过但意外达的非常好（最终拟录取看复试分数排名竟然差不多前1％）</p><p>优营隔了几天就发了 </p><h2 id="一些被问到的问题"><a href="#一些被问到的问题" class="headerlink" title="一些被问到的问题"></a>一些被问到的问题</h2><ol><li><p>论文是必须的吗？</p><p>有最好，如果搞ai必须有相关实习&#x2F;科研经历，如果走system路线有实习或者经历都行</p></li><li><p>四六级真的重要吗？</p><p>我觉得一般重要 不要太低就行</p></li><li><p>给计算机专业课重要程度排个序</p><p>数据结构＞计算机网络&#x3D;操作系统＞计组＞编译原理</p></li><li><p>事先套磁了吗？</p><p>五月份套了一个，但强com。我建议现在3月份就可以开始套了，越早越好！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验贴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java刷题</title>
      <link href="/2024/06/24/Java%20algo/"/>
      <url>/2024/06/24/Java%20algo/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><a href="https://blog.csdn.net/leader_song/article/details/132094080?ops_request_misc=%7B%22request_id%22:%22171151104816800211548110%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171151104816800211548110&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-132094080-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=java%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%872023&spm=1018.2226.3001.4187">2024年 Java 面试八股文（20w字）_java八股文2023-CSDN博客</a></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><a href="https://blog.csdn.net/weixin_43004044/article/details/126557968?ops_request_misc=%7B%22request_id%22:%22172025351316800188511203%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172025351316800188511203&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126557968-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=SQL%E9%A2%98&spm=1018.2226.3001.4187">SQL 50 题（MySQL 版，包括建库建表、插入数据等完整过程，适合复习 SQL 知识点）_sql50题-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_47882020/article/details/120826208?ops_request_misc=%7B%22request_id%22:%22172025532416800215087064%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172025532416800215087064&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-120826208-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=sql%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187">SQL常见语句及用法_sql语句大全及用法-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq7652401741/article/details/100121549?ops_request_misc=%7B%22request_id%22:%22172033820916800188561235%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172033820916800188561235&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-100121549-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=SQL%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E5%92%8Cwhere&spm=1018.2226.3001.4187">SQL中的 聚合函数 ,where ,having_where后面可以跟聚合函数吗-CSDN博客</a></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><a href="https://blog.csdn.net/qq_62124267/article/details/135418799?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-135418799-blog-124295453.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=1">面试被问了几百遍的 IOC 和 AOP ，一篇文章带你搞清楚！！！_ioc和aop的原理面试-CSDN博客</a></p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p><a href="https://blog.csdn.net/crazymakercircle/article/details/125059491?ops_request_misc=%7B%22request_id%22:%22171164453116800225568300%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171164453116800225568300&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125059491-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=sentinel&spm=1018.2226.3001.4187">sentinel （史上最全）-CSDN博客</a></p><h2 id="Gradle-Maven"><a href="#Gradle-Maven" class="headerlink" title="Gradle&amp;Maven"></a>Gradle&amp;Maven</h2><p><a href="https://flydean.blog.csdn.net/article/details/113803536?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-113803536-blog-133955312.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-113803536-blog-133955312.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=2">gradle中的build script详解_gradle buildscript-CSDN博客</a></p><p>[Gradle和Maven的区别-CSDN博客](<a href="https://blog.csdn.net/weixin_45626288/article/details/131973787?ops_request_misc=%7B%22request_id%22:%22172024305816800185819613%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024305816800185819613&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131973787-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=gradle">https://blog.csdn.net/weixin_45626288/article/details/131973787?ops_request_misc=%7B%22request%5Fid%22%3A%22172024305816800185819613%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=172024305816800185819613&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131973787-null-null.142^v100^pc_search_result_base8&amp;utm_term=gradle</a> maven&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="线程池和锁"><a href="#线程池和锁" class="headerlink" title="线程池和锁"></a>线程池和锁</h2><p><a href="https://blog.csdn.net/qq_54070103/article/details/124108541?ops_request_misc=%7B%22request_id%22:%22172024328716800184129598%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024328716800184129598&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124108541-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E9%94%81&spm=1018.2226.3001.4187">面试+基础—–详细解读多线程（线程池、锁、死锁…）_多线程井发、死锁问题、线程池原理等-CSDN博客</a></p><p><a href="https://blog.csdn.net/u013541140/article/details/95225769?ops_request_misc=%7B%22request_id%22:%22172024532116800211519152%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024532116800211519152&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-95225769-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E7%BA%BF%E7%A8%8B%E6%B1%A0&spm=1018.2226.3001.4187">Java 多线程：彻底搞懂线程池_java线程池-CSDN博客</a></p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p><a href="https://blog.csdn.net/qq_35190492/article/details/113174359?ops_request_misc=%7B%22request_id%22:%22172024555916800184190893%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024555916800184190893&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113174359-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=netty&spm=1018.2226.3001.4187">【硬核】肝了一月的Netty知识点-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_33384191/article/details/129187707?ops_request_misc=%7B%22request_id%22:%22172024555916800184190893%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024555916800184190893&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129187707-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=netty&spm=1018.2226.3001.4187">超详细Netty入门，看这篇就够了！_netty框架-CSDN博客</a></p><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p><a href="https://blog.csdn.net/qq_41317495/article/details/108553894?ops_request_misc=%7B%22request_id%22:%22172024618916800185817050%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024618916800185817050&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108553894-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=JUnit&spm=1018.2226.3001.4187">JUnit详解-CSDN博客</a></p><h2 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a>Pytest</h2><p><a href="https://blog.csdn.net/lovedingd/article/details/98952868?ops_request_misc=%7B%22request_id%22:%22172024619416800226527972%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024619416800226527972&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-98952868-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=pytest&spm=1018.2226.3001.4187">Python测试框架之pytest详解_pytest框架详解-CSDN博客</a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><a href="https://blog.csdn.net/m0_61503020/article/details/125456520?ops_request_misc=%7B%22request_id%22:%22172024335816800225519741%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172024335816800225519741&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125456520-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=docker&spm=1018.2226.3001.4187">docker入门，这一篇就够了。-CSDN博客</a></p><blockquote><p>docker run [可选参数] image 命令 #启动容器（无镜像会先下载镜像）<br>#参数说明<br>–name &#x3D; “Name”   容器名字<br>-c   后面跟待完成的命令<br>-d   以后台方式运行并且返回ID，启动守护进程式容器<br>-i   使用交互方式运行容器，通常与t同时使用<br>-t   为容器重新分配一个伪输入终端。也即启动交互式容器<br>-p   指定容器端口    -p 容器端口:物理机端口  映射端口<br>-P   随机指定端口<br>-v   给容器挂载存储卷</p></blockquote><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>[JAVA内存分配原理解析–栈、堆、常量池_堆,栈,常量池详解-CSDN博客](<a href="https://blog.csdn.net/gb702250823/article/details/92801716?ops_request_misc=%7B%22request_id%22:%22171151029816800225558425%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171151029816800225558425&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-92801716-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=java">https://blog.csdn.net/gb702250823/article/details/92801716?ops_request_misc=%7B%22request%5Fid%22%3A%22171151029816800225558425%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171151029816800225558425&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-92801716-null-null.142^v100^pc_search_result_base2&amp;utm_term=java</a> 常量池 栈 堆&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/LJWfbj666/article/details/139120947?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-139120947.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">java的垃圾回收(GC)详解_java gc-CSDN博客</a></p><p><a href="https://blog.csdn.net/ZHHX666/article/details/124484199?ops_request_misc=%7B%22request_id%22:%22172025262616800182710898%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172025262616800182710898&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124484199-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8&spm=1018.2226.3001.4187">Java - 类加载器_java类加载器-CSDN博客</a></p><h2 id="常用数据结构和库"><a href="#常用数据结构和库" class="headerlink" title="常用数据结构和库"></a>常用数据结构和库</h2><p><a href="https://blog.csdn.net/CodePlayMe/article/details/130724568?ops_request_misc=%7B%22request_id%22:%22170261719316777224420083%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170261719316777224420083&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-130724568-null-null.142%5Ev96%5Epc_search_result_base2&utm_term=java%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&spm=1018.2226.3001.4187">java刷题前常用的数据结构及方法_java刷题常用方法-CSDN博客</a></p><h3 id="ACM模式"><a href="#ACM模式" class="headerlink" title="ACM模式"></a>ACM模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="int-转Integer"><a href="#int-转Integer" class="headerlink" title="int 转Integer"></a>int 转Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(num);</span><br></pre></td></tr></table></figure><h3 id="Integer转int"><a href="#Integer转int" class="headerlink" title="Integer转int"></a>Integer转int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> integer.intValue();</span><br></pre></td></tr></table></figure><h3 id="int到String数据类型的转换"><a href="#int到String数据类型的转换" class="headerlink" title="int到String数据类型的转换"></a><strong>int到String数据类型的转换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">Integer.toString(num);</span><br></pre></td></tr></table></figure><p>或者<strong>String.valueOf(num);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">// 引号带上数据</span></span><br><span class="line">    <span class="type">int</span> num=<span class="number">100</span>;</span><br><span class="line">    String a=<span class="string">&quot;&quot;</span>+num;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">   <span class="comment">// 直接类型转换</span></span><br><span class="line">    Integer num2=<span class="number">100</span>;</span><br><span class="line">    String b=Integer.toString(num2);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串定义</span></span><br><span class="line">    String c=String.valueOf(num2);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String到int类型的转换"><a href="#String到int类型的转换" class="headerlink" title="String到int类型的转换"></a><strong>String到int类型的转换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">    <span class="comment">// parseInt</span></span><br><span class="line">    <span class="comment">// 加上static的方法，方法属于类，需要使用类名进行调用，没有加上static的，方法属于对象，可以new一个对象再调用</span></span><br><span class="line">    <span class="type">int</span> e=Integer.parseInt(s);</span><br><span class="line">    System.out.println(e);</span><br></pre></td></tr></table></figure><h3 id="ArrayList动态转换为Array数组"><a href="#ArrayList动态转换为Array数组" class="headerlink" title="ArrayList动态转换为Array数组"></a>ArrayList动态转换为Array数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String [] array=list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[size]);</span><br></pre></td></tr></table></figure><p>除此之外，<strong>ArrayList</strong>还有以下的常用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> 将指定元素插入此列表中的指定位置。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>将指定的元素追加到此列表的末尾。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>如果此列表包含指定的元素，则返回 <span class="literal">true</span> 。</span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> 返回此列表中指定位置的元素。</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> 返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> 如果此列表不包含任何元素，则返回 <span class="literal">true</span> 。</span><br><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span>返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line">E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> 删除此列表中指定位置的元素。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>从该列表中删除指定元素的第一个匹配项（如果存在）</span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> 用指定的元素替换此列表中指定位置的元素。</span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> 返回此列表中的元素数。</span><br></pre></td></tr></table></figure><h3 id="Array数组转为ArrayList"><a href="#Array数组转为ArrayList" class="headerlink" title="Array数组转为ArrayList"></a>Array数组转为ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;list= Arrays.asList(array)</span><br></pre></td></tr></table></figure><h3 id="Arrays的常用方法"><a href="#Arrays的常用方法" class="headerlink" title="Arrays的常用方法"></a>Arrays的常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="type">int</span> nums[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line">nums.length;</span><br><span class="line"></span><br><span class="line">Arrays.toString(nums)</span><br><span class="line">Arrays.sort(nums)<span class="comment">//升序</span></span><br><span class="line">Arrays.fill(nums)<span class="comment">//初始化数组的时候会用到（比如全部给-1）</span></span><br><span class="line">Arrays.equal(nums)</span><br><span class="line">Arrays.copyof(nums)</span><br><span class="line">Arrays.compare(nums)</span><br><span class="line">Arrays.binarySearch(nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Arrays.sort()</code>重写Comparator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并区间的例子</span></span><br><span class="line">Arrays.sort(nums,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span> []&gt;()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[]nums1, <span class="type">int</span>[]nums2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums1[<span class="number">0</span>]-nums2[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ArrayList的常用用法"><a href="#ArrayList的常用用法" class="headerlink" title="ArrayList的常用用法"></a>ArrayList的常用用法</h3><p>Array：只可存储基本数据类型和对象。被设置为<strong>固定大小</strong>。所包含的方法没有ArrayList多<br>ArrayList：只能<strong>存储对象</strong>。是一个<strong>可变数组</strong>，大小可自动调整。有很多操作方法：<a href="https://so.csdn.net/so/search?q=addAll&spm=1001.2101.3001.7020">addAll</a>、removeAll、iteration等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.remove(<span class="number">3</span>); <span class="comment">// 删除第四个元素</span></span><br><span class="line"><span class="comment">//计算大小</span></span><br><span class="line">sites.size();</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">Collections.sort(sites);</span><br><span class="line"><span class="comment">//是否包含</span></span><br><span class="line">sites.contains();</span><br><span class="line"><span class="comment">//addAll()</span></span><br><span class="line">这个方法括号中类型是list，拼接</span><br><span class="line">    </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> 将指定元素插入此列表中的指定位置。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>将指定的元素追加到此列表的末尾。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>如果此列表包含指定的元素，则返回 <span class="literal">true</span> 。</span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> 返回此列表中指定位置的元素。</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> 返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> 如果此列表不包含任何元素，则返回 <span class="literal">true</span> 。</span><br><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span>返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line">E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> 删除此列表中指定位置的元素。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>从该列表中删除指定元素的第一个匹配项（如果存在）</span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> 用指定的元素替换此列表中指定位置的元素。</span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> 返回此列表中的元素数。</span><br></pre></td></tr></table></figure><h3 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a><strong>Collections类</strong></h3><p>对list进行反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.reverse(list)</span><br></pre></td></tr></table></figure><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>String获取长度是.length()（要加括号）</p><p><a href="https://blog.csdn.net/weixin_62756510/article/details/124698100?ops_request_misc=%7B%22request_id%22:%22171013865416777224481954%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171013865416777224481954&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124698100-null-null.142%5Ev99%5Epc_search_result_base2&utm_term=stringbuilder&spm=1018.2226.3001.4187">String、StringBuilder类超详细笔记_stringbuilder可以用equalsignorecase-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">重要：<span class="type">char</span> charAt​(<span class="type">int</span> index) 返回指定索引处的 <span class="type">char</span>值。</span><br><span class="line"><span class="type">int</span> indexOf​(String ch) 返回指定字符第一次出现的字符串中的索引。</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(<span class="string">&#x27;c&#x27;</span>); <span class="comment">//效率最高的方法</span></span><br><span class="line">- <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> ，当且仅当， length()是 <span class="number">0</span> 返回 <span class="literal">true</span></span><br><span class="line"><span class="type">int</span> lastIndexOf​(<span class="type">int</span> ch) 返回指定字符最后一次出现的字符串中的索引。</span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> 返回此字符串的长度。</span><br><span class="line">    String <span class="title function_">trim</span><span class="params">()</span> 去除两端的空格</span><br><span class="line">String replace​(CharSequence target, CharSequence replacement) 将此字符串中与文字目标序列匹配的每个子字符串替换为指定的文字替换序列。</span><br><span class="line">String replaceAll​(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换。</span><br><span class="line">String[] split​(String regex) <span class="comment">//将此字符串拆分为给定 regular expression的匹配 项 。（如果有多个空格，则会在Arrays中有空的&quot;&quot;出现）</span></span><br><span class="line"><span class="type">boolean</span> startsWith​(String prefix) 测试此字符串是否以指定的前缀开头。</span><br><span class="line">String substring​(<span class="type">int</span> beginIndex) 返回一个字符串，该字符串是此字符串的子字符串。</span><br><span class="line"><span class="type">char</span>[] toCharArray() 将此字符串转换为新的字符数组。</span><br><span class="line">String <span class="title function_">toLowerCase</span><span class="params">()</span> 使用默认语言环境的规则将此 String所有字符转换为小写。</span><br><span class="line">String <span class="title function_">toUpperCase</span><span class="params">()</span> 使用默认语言环境的规则将此 String所有字符转换为大写。</span><br><span class="line">比较大小的话</span><br><span class="line">    String c= <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">c.compareTo(b);</span><br><span class="line">或者</span><br><span class="line">    c.equals(b);</span><br></pre></td></tr></table></figure><h3 id="字符类Chracter"><a href="#字符类Chracter" class="headerlink" title="字符类Chracter"></a>字符类Chracter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char转Character</span></span><br><span class="line">Character.valueOf(<span class="string">&#x27;I&#x27;</span>);</span><br><span class="line">Character.compare(<span class="type">char</span> x, <span class="type">char</span> y) 以数字方式比较两个 <span class="type">char</span>值。</span><br><span class="line">Character.equals(Object obj) 将此对象与指定的对象进行比较。</span><br><span class="line">Character.isDigit(<span class="type">char</span> ch) 确定指定的字符是否为数字。</span><br><span class="line">Character.isLetter(<span class="type">char</span> ch) 确定指定的字符是否为字母。</span><br><span class="line">Character.isLowerCase(<span class="type">char</span> ch) 确定指定的字符是否为小写字符。</span><br><span class="line">Character.isUpperCase(<span class="type">char</span> ch) 确定指定的字符是否为大写字符。</span><br><span class="line">Character.toString(<span class="type">char</span> c) 返回表示指定的 <span class="type">char</span>的 String对象。</span><br><span class="line">Character.valueOf(<span class="type">char</span> c) 返回表示指定的 <span class="type">char</span>值的 Character实例。</span><br><span class="line">Character.toLowerCase(<span class="string">&quot;A&quot;</span>); 转为小写</span><br><span class="line">Character.toUpperCase(<span class="string">&quot;a&quot;</span>); 转为大写</span><br><span class="line"><span class="comment">//char数组转String</span></span><br><span class="line"><span class="type">char</span>[] data = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data);</span><br><span class="line">System.out.println(str);  <span class="comment">//输出abc</span></span><br></pre></td></tr></table></figure><h3 id="字符串构造器StringBuilder"><a href="#字符串构造器StringBuilder" class="headerlink" title="字符串构造器StringBuilder"></a>字符串构造器StringBuilder</h3><p><a href="https://blog.csdn.net/qq_46634307/article/details/126283200?ops_request_misc=%7B%22request_id%22:%22171014028016800192229813%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171014028016800192229813&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-126283200-null-null.142%5Ev99%5Epc_search_result_base2&utm_term=stringbuilder%E4%BF%AE%E6%94%B9%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%AD%97%E7%AC%A6&spm=1018.2226.3001.4187">Java-修改 String 指定位置的字符最全方法总结（StringBuilder 和 StringBuffer 的使用以及区别）_string替换指定位置字符-CSDN博客</a></p><p><a href="https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-89966303-blog-124698100.235%5Ev43%5Epc_blog_bottom_relevance_base1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-89966303-blog-124698100.235%5Ev43%5Epc_blog_bottom_relevance_base1&utm_relevant_index=1">String、StringBuffer与StringBuilder之间区别_string stringbuffer stringbuilder区别-CSDN博客</a></p><p>可变字符串，StringBuilder对象的内容可以修改。</p><ol><li><p>StringBuilder类的常用方法</p><ol><li><p>append()方法<br>使用append()方法可实现字符串的拼接操作，返回拼接后的StringBuilder对象。</p></li><li><p>reverse()方法<br>使用reverse()方法可实现StringBuilder字符串的反转操作。</p></li><li><p>delete(int start, int end)方法<br>删除字符串中指定索引范围为 [start,end) 的所有内容。</p><p>Java中大多数范围均为左闭右开区间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">sb.delete(<span class="number">5</span>,<span class="number">8</span>);  <span class="comment">//删除索引范围为[5,8)内的所有内容，即从w开始删除到l之前</span></span><br><span class="line">System.out.println(sb);  <span class="comment">//输出hellold</span></span><br></pre></td></tr></table></figure></li><li><p>insert(int start, 任意数据类型)方法<br>在索引start处开始插入任意数据类型的内容。插入内容的起始索引是start。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">sb1.insert(<span class="number">2</span>,<span class="number">77</span>);</span><br><span class="line">System.out.println(sb1);  <span class="comment">//输出he77llo</span></span><br><span class="line">sb1.insert(<span class="number">3</span>,<span class="string">&quot;ooo&quot;</span>);</span><br><span class="line">System.out.println(sb1);  <span class="comment">//输出he7ooo7llo</span></span><br></pre></td></tr></table></figure></li><li><p>setCharAt(index,character)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.setCharAt(j,Character.toUpperCase(sb.charAt(j)));</span><br></pre></td></tr></table></figure></li></ol></li><li><p>StringBuilder与String的相互转换<br> 1）String转为StringBuilder<br> ① 构造方法StringBuilder(String str)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 字符串拼接方法append(String str)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure><p>2）StringBuilder转为String<br>通过StringBuilder对象调用toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">String、StringBuilder、StringBuffer的区别</span><br><span class="line">String为不可变字符串类，StringBuilder、StringBuffer为可变字符串类。</span><br><span class="line">StringBuilder类性能较高，但存在线程安全问题; StringBuffer类线程安全，但性能较差。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="双链表LinkedList"><a href="#双链表LinkedList" class="headerlink" title="双链表LinkedList"></a>双链表LinkedList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> <span class="comment">// 判断链表中是否存在元素o 复杂度O(N)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span></span><br><span class="line">E <span class="title function_">removeFirst</span><span class="params">()</span> <span class="comment">//删除，返回的是删除的元素</span></span><br><span class="line">E getFirst/Last()</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">( E e)</span></span><br><span class="line">Collections.reverse(link); <span class="comment">// 翻转链表</span></span><br></pre></td></tr></table></figure><h3 id="哈希表Hashmap"><a href="#哈希表Hashmap" class="headerlink" title="哈希表Hashmap"></a>哈希表Hashmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span>如果这个映射包含指定键映射，则返回<span class="literal">true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span> 如果此映射将一个或多个键映射到指定值，则返回 <span class="literal">true</span> 。</span><br><span class="line">V <span class="title function_">get</span><span class="params">(Object key)</span> 返回指定键映射到的值，如果此映射不包含键的映射，则返回 <span class="literal">null</span> 。</span><br><span class="line">V <span class="title function_">put</span><span class="params">(K key, V value)</span> 将指定的值与此映射中的指定键相关联。</span><br><span class="line">V <span class="title function_">remove</span><span class="params">(Object key)</span> 从此映射中删除指定键的映射（如果存在）。</span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> 返回此映射中键 - 值映射的数量。</span><br><span class="line">Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> 返回此映射中包含的值的Collection视图。</span><br><span class="line">Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> 返回此映射中包含的键的Set视图。</span><br><span class="line"><span class="keyword">default</span> V <span class="title function_">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> 返回指定键映射到的值，如果此映射不包含键的映射，则返回 defaultValue 。这个方法继承自Map接口</span><br><span class="line"><span class="keyword">default</span> V <span class="title function_">putIfAbsent</span><span class="params">(K key, V value)</span> 如果key存在则什么都不做，否则put()，并且返回当前值</span><br><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 返回此映射中包含的映射的Set视图。</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 初始化哈希表 */</span></span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加操作 */</span></span><br><span class="line"><span class="comment">// 在哈希表中添加键值对 (key, value)</span></span><br><span class="line">map.put(<span class="number">12836</span>, <span class="string">&quot;小哈&quot;</span>);   </span><br><span class="line">map.put(<span class="number">15937</span>, <span class="string">&quot;小啰&quot;</span>);   </span><br><span class="line">map.put(<span class="number">16750</span>, <span class="string">&quot;小算&quot;</span>);   </span><br><span class="line">map.put(<span class="number">13276</span>, <span class="string">&quot;小法&quot;</span>);</span><br><span class="line">map.put(<span class="number">10583</span>, <span class="string">&quot;小鸭&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查询操作 */</span></span><br><span class="line"><span class="comment">// 向哈希表中输入键 key ，得到值 value</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> map.get(<span class="number">15937</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除操作 */</span></span><br><span class="line"><span class="comment">// 在哈希表中删除键值对 (key, value)</span></span><br><span class="line">map.remove(<span class="number">10583</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 遍历哈希表 */</span></span><br><span class="line"><span class="comment">// 遍历键值对 key-&gt;value</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry &lt;Integer, String&gt; kv: map.entrySet()) &#123;</span><br><span class="line">    System.out.println(kv.getKey() + <span class="string">&quot; -&gt; &quot;</span> + kv.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单独遍历键 key</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> key: map.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单独遍历值 value</span></span><br><span class="line"><span class="keyword">for</span> (String val: map.values()) &#123;</span><br><span class="line">    System.out.println(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希集合HashSet"><a href="#哈希集合HashSet" class="headerlink" title="哈希集合HashSet"></a>哈希集合HashSet</h3><p>[【Java 基础篇】Java Set 详解-CSDN博客](<a href="https://blog.csdn.net/qq_21484461/article/details/131383848?ops_request_misc=%7B%22request_id%22:%22171015290416800180682690%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171015290416800180682690&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131383848-null-null.142%5Ev99%5Epc_search_result_base2&utm_term=Java">https://blog.csdn.net/qq_21484461/article/details/131383848?ops_request_misc=%7B%22request%5Fid%22%3A%22171015290416800180682690%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171015290416800180682690&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131383848-null-null.142^v99^pc_search_result_base2&amp;utm_term=Java</a> set&amp;spm&#x3D;1018.2226.3001.4187)</p><p>不能保证集合迭代的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> 如果指定的元素尚不存在，则将其添加到此集合中。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> 如果存在，则从该集合中移除指定的元素。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> 如果此set包含指定的元素，则返回 <span class="literal">true</span> 。</span><br></pre></td></tr></table></figure><h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h3><p>栈，后进先出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入栈 */</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">5</span>);</span><br><span class="line">stack.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问栈顶元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出栈 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈的长度 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> stack.isEmpty();</span><br></pre></td></tr></table></figure><h3 id="队列Queue、双端队列Deque（都可用LinkedList来实例化，因为二者都是接口）"><a href="#队列Queue、双端队列Deque（都可用LinkedList来实例化，因为二者都是接口）" class="headerlink" title="队列Queue、双端队列Deque（都可用LinkedList来实例化，因为二者都是接口）"></a>队列Queue、双端队列Deque（都可用LinkedList来实例化，因为二者都是接口）</h3><p>队列，先进先出，Queue和Deque都是接口，而LinkedList类继承了这两个队列，<strong>可以是用LinkedList来实例化Queue或者Deque</strong>，可以作为单向队列或者双向队列来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Queue</span> <span class="variable">q</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> 将指定元素插入此列表中的指定位置。</span><br><span class="line">E <span class="title function_">element</span><span class="params">()</span> 检索但不删除此列表的头部（第一个元素）。</span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> 返回此列表中指定位置的元素。</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> 返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> 返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-<span class="number">1</span>。</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> 将指定的元素添加为此列表的尾部（最后一个元素）。</span><br><span class="line">E <span class="title function_">peek</span><span class="params">()</span> 检索但不删除此列表的头部（第一个元素）</span><br><span class="line">E <span class="title function_">poll</span><span class="params">()</span> 检索并删除此列表的头部（第一个元素）。</span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> 用指定的元素替换此列表中指定位置的元素。</span><br><span class="line"><span class="comment">/* 翻转队列 */</span></span><br><span class="line">Collections.reverse(queue) </span><br><span class="line"><span class="comment">/* 获取队列的长度 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"><span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> queue.isEmpty();</span><br></pre></td></tr></table></figure><p>双端队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化双向队列 */</span></span><br><span class="line">Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">deque.offerLast(<span class="number">2</span>);   <span class="comment">// 添加至队尾</span></span><br><span class="line">deque.offerLast(<span class="number">5</span>);</span><br><span class="line">deque.offerLast(<span class="number">4</span>);</span><br><span class="line">deque.offerFirst(<span class="number">3</span>);  <span class="comment">// 添加至队首</span></span><br><span class="line">deque.offerFirst(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peekFirst</span> <span class="operator">=</span> deque.peekFirst();  <span class="comment">// 队首元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peekLast</span> <span class="operator">=</span> deque.peekLast();    <span class="comment">// 队尾元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">popFirst</span> <span class="operator">=</span> deque.pollFirst();  <span class="comment">// 队首元素出队</span></span><br><span class="line"><span class="type">int</span> <span class="variable">popLast</span> <span class="operator">=</span> deque.pollLast();    <span class="comment">// 队尾元素出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取双向队列的长度 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断双向队列是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> deque.isEmpty();</span><br></pre></td></tr></table></figure><p>…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList可以作为堆栈使用，并且在类中实现了对应的方法</span><br><span class="line">E <span class="title function_">pop</span><span class="params">()</span> 弹出此列表所代表的堆栈中的元素。</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> 将元素推送到此列表所表示的堆栈上。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优先队列-作为堆来用"><a href="#优先队列-作为堆来用" class="headerlink" title="优先队列(作为堆来用)"></a>优先队列(作为堆来用)</h3><p>默认小顶堆，但如果是数据结构就还是要重写comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">minHeap.peek();</span><br><span class="line">minHeap.poll();(会弹出)</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">minHeap.add();</span><br><span class="line">minHeap.offer();</span><br><span class="line"><span class="comment">//优先队列自然排序示例</span></span><br><span class="line">Queue&lt;Integer&gt; integerPriorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">7</span>);<span class="comment">//容量为7</span></span><br><span class="line"><span class="comment">//优先队列使用示例</span></span><br><span class="line">Queue&lt;Customer&gt; customerPriorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(idComparator);</span><br><span class="line"><span class="comment">//匿名Comparator实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;Customer&gt; idComparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Customer&gt;()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Customer c1, Customer c2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (c1.getId() - c2.getId());<span class="comment">//这是小顶堆，反着写就是大顶堆</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//或者实现Comparator接口也行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">idComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Customer c1, Customer c2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(c1.getId()-c2.getId)());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化堆 */</span></span><br><span class="line"><span class="comment">// 初始化小顶堆</span></span><br><span class="line">Queue&lt;Integer&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 初始化大顶堆（使用 lambda 表达式修改 Comparator 即可）</span></span><br><span class="line">Queue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入堆 */</span></span><br><span class="line">maxHeap.offer(<span class="number">1</span>);</span><br><span class="line">maxHeap.offer(<span class="number">3</span>);</span><br><span class="line">maxHeap.offer(<span class="number">2</span>);</span><br><span class="line">maxHeap.offer(<span class="number">5</span>);</span><br><span class="line">maxHeap.offer(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取堆顶元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> maxHeap.peek(); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 堆顶元素出堆 */</span></span><br><span class="line"><span class="comment">// 出堆元素会形成一个从大到小的序列</span></span><br><span class="line">peek = maxHeap.poll(); <span class="comment">// 5</span></span><br><span class="line">peek = maxHeap.poll(); <span class="comment">// 4</span></span><br><span class="line">peek = maxHeap.poll(); <span class="comment">// 3</span></span><br><span class="line">peek = maxHeap.poll(); <span class="comment">// 2</span></span><br><span class="line">peek = maxHeap.poll(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取堆大小 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> maxHeap.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断堆是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> maxHeap.isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输入列表并建堆 */</span></span><br><span class="line">minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h3 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Math.ceil(<span class="number">3.3</span>); <span class="comment">//向上取整</span></span><br><span class="line">Math.floor(<span class="number">3.3</span>); <span class="comment">//向下取整</span></span><br><span class="line">Math.round(<span class="number">3.4</span>); <span class="comment">//四舍五入</span></span><br><span class="line">Math.pow(<span class="number">3</span>,<span class="number">2</span>) <span class="comment">//幂运算</span></span><br><span class="line">Math.abs(-<span class="number">1</span>); <span class="comment">//绝对值 </span></span><br><span class="line">Math.max(<span class="number">9999</span>,<span class="number">10000</span>);</span><br><span class="line">Math.min(<span class="number">9999</span>,<span class="number">10000</span>);</span><br><span class="line">Math.ramdom(); <span class="comment">//返回0-1的随机数，左闭右开</span></span><br><span class="line">Math.sqrt(<span class="number">3.644</span>); <span class="comment">//开方</span></span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[]arr, <span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;=r)<span class="keyword">return</span> ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(arr,l,mid);</span><br><span class="line">        mergeSort(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">        merge(arr,l,mid,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l ,<span class="type">int</span> mid,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="type">int</span> temp[] = <span class="keyword">new</span> <span class="title class_">int</span>[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=mid&amp;&amp; right&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[left]&lt;arr[right])&#123;</span><br><span class="line">                temp[start++] = arr[left++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[start++] = arr[right++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=mid)&#123;</span><br><span class="line">            temp[start++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;=r)&#123;</span><br><span class="line">            temp[start++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">                arr[l+i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> nums[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;</span><br><span class="line">            <span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span></span><br><span class="line">        &#125;;</span><br><span class="line">        mergeSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        System</span><br><span class="line">        .out.println(Arrays.toString(nums));</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>邻接矩阵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基于邻接矩阵实现的无向图类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphAdjMat</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; vertices; <span class="comment">// 顶点列表，元素代表“顶点值”，索引代表“顶点索引”</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; adjMat; <span class="comment">// 邻接矩阵，行列索引对应“顶点索引”</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GraphAdjMat</span><span class="params">(<span class="type">int</span>[] vertices, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.adjMat = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : vertices) &#123;</span><br><span class="line">            addVertex(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加边</span></span><br><span class="line">        <span class="comment">// 请注意，edges 元素代表顶点索引，即对应 vertices 元素索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">            addEdge(e[<span class="number">0</span>], e[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取顶点数量 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vertices.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加顶点 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addVertex</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> size();</span><br><span class="line">        <span class="comment">// 向顶点列表中添加新顶点的值</span></span><br><span class="line">        vertices.add(val);</span><br><span class="line">        <span class="comment">// 在邻接矩阵中添加一行</span></span><br><span class="line">        List&lt;Integer&gt; newRow = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            newRow.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        adjMat.add(newRow);</span><br><span class="line">        <span class="comment">// 在邻接矩阵中添加一列</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; row : adjMat) &#123;</span><br><span class="line">            row.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除顶点 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeVertex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        <span class="comment">// 在顶点列表中移除索引 index 的顶点</span></span><br><span class="line">        vertices.remove(index);</span><br><span class="line">        <span class="comment">// 在邻接矩阵中删除索引 index 的行</span></span><br><span class="line">        adjMat.remove(index);</span><br><span class="line">        <span class="comment">// 在邻接矩阵中删除索引 index 的列</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; row : adjMat) &#123;</span><br><span class="line">            row.remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加边 */</span></span><br><span class="line">    <span class="comment">// 参数 i, j 对应 vertices 元素索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// 索引越界与相等处理</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= size() || j &gt;= size() || i == j)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        <span class="comment">// 在无向图中，邻接矩阵关于主对角线对称，即满足 (i, j) == (j, i)</span></span><br><span class="line">        adjMat.get(i).set(j, <span class="number">1</span>);</span><br><span class="line">        adjMat.get(j).set(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除边 */</span></span><br><span class="line">    <span class="comment">// 参数 i, j 对应 vertices 元素索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEdge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// 索引越界与相等处理</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= size() || j &gt;= size() || i == j)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        adjMat.get(i).set(j, <span class="number">0</span>);</span><br><span class="line">        adjMat.get(j).set(i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印邻接矩阵 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;顶点列表 = &quot;</span>);</span><br><span class="line">        System.out.println(vertices);</span><br><span class="line">        System.out.println(<span class="string">&quot;邻接矩阵 =&quot;</span>);</span><br><span class="line">        PrintUtil.printMatrix(adjMat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接表的BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 广度优先遍历 */</span></span><br><span class="line"><span class="comment">// 使用邻接表来表示图，以便获取指定顶点的所有邻接顶点</span></span><br><span class="line">List&lt;Vertex&gt; <span class="title function_">graphBFS</span><span class="params">(GraphAdjList graph, Vertex startVet)</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点遍历序列</span></span><br><span class="line">    List&lt;Vertex&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 哈希表，用于记录已被访问过的顶点</span></span><br><span class="line">    Set&lt;Vertex&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    visited.add(startVet);</span><br><span class="line">    <span class="comment">// 队列用于实现 BFS</span></span><br><span class="line">    Queue&lt;Vertex&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    que.offer(startVet);</span><br><span class="line">    <span class="comment">// 以顶点 vet 为起点，循环直至访问完所有顶点</span></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vet</span> <span class="operator">=</span> que.poll(); <span class="comment">// 队首顶点出队</span></span><br><span class="line">        res.add(vet);            <span class="comment">// 记录访问顶点</span></span><br><span class="line">        <span class="comment">// 遍历该顶点的所有邻接顶点</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex adjVet : graph.adjList.get(vet)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.contains(adjVet))</span><br><span class="line">                <span class="keyword">continue</span>;        <span class="comment">// 跳过已被访问的顶点</span></span><br><span class="line">            que.offer(adjVet);   <span class="comment">// 只入队未访问的顶点</span></span><br><span class="line">            visited.add(adjVet); <span class="comment">// 标记该顶点已被访问</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回顶点遍历序列</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接表的DFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 深度优先遍历辅助函数 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(GraphAdjList graph, Set&lt;Vertex&gt; visited, List&lt;Vertex&gt; res, Vertex vet)</span> &#123;</span><br><span class="line">    res.add(vet);     <span class="comment">// 记录访问顶点</span></span><br><span class="line">    visited.add(vet); <span class="comment">// 标记该顶点已被访问</span></span><br><span class="line">    <span class="comment">// 遍历该顶点的所有邻接顶点</span></span><br><span class="line">    <span class="keyword">for</span> (Vertex adjVet : graph.adjList.get(vet)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited.contains(adjVet))</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 跳过已被访问的顶点</span></span><br><span class="line">        <span class="comment">// 递归访问邻接顶点</span></span><br><span class="line">        dfs(graph, visited, res, adjVet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 深度优先遍历 */</span></span><br><span class="line"><span class="comment">// 使用邻接表来表示图，以便获取指定顶点的所有邻接顶点</span></span><br><span class="line">List&lt;Vertex&gt; <span class="title function_">graphDFS</span><span class="params">(GraphAdjList graph, Vertex startVet)</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点遍历序列</span></span><br><span class="line">    List&lt;Vertex&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 哈希表，用于记录已被访问过的顶点</span></span><br><span class="line">    Set&lt;Vertex&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    dfs(graph, visited, res, startVet);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixUDG</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mEdgNum;        <span class="comment">// 边的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] mVexs;       <span class="comment">// 顶点集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] mMatrix;    <span class="comment">// 邻接矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE;   <span class="comment">// 最大值</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floyd最短路径。</span></span><br><span class="line"><span class="comment"> * 即，统计图中各个顶点间的最短路径。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     path -- 路径。path[i][j]=k表示，&quot;顶点i&quot;到&quot;顶点j&quot;的最短路径会经过顶点k。</span></span><br><span class="line"><span class="comment"> *     dist -- 长度数组。即，dist[i][j]=sum表示，&quot;顶点i&quot;到&quot;顶点j&quot;的最短路径的长度是sum。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">(<span class="type">int</span>[][] path, <span class="type">int</span>[][] dist)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mVexs.length; j++) &#123;</span><br><span class="line">            dist[i][j] = mMatrix[i][j];    <span class="comment">// &quot;顶点i&quot;到&quot;顶点j&quot;的路径长度为&quot;i到j的权值&quot;。</span></span><br><span class="line">            path[i][j] = j;                <span class="comment">// &quot;顶点i&quot;到&quot;顶点j&quot;的最短路径是经过顶点j。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算最短路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; mVexs.length; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mVexs.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果经过下标为k顶点路径比原两点间路径更短，则更新dist[i][j]和path[i][j]</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> (dist[i][k]==INF || dist[k][j]==INF) ? INF : (dist[i][k] + dist[k][j]);</span><br><span class="line">                <span class="keyword">if</span> (dist[i][j] &gt; tmp) &#123;</span><br><span class="line">                    <span class="comment">// &quot;i到j最短路径&quot;对应的值设，为更小的一个(即经过k)</span></span><br><span class="line">                    dist[i][j] = tmp;</span><br><span class="line">                    <span class="comment">// &quot;i到j最短路径&quot;对应的路径，经过k</span></span><br><span class="line">                    path[i][j] = path[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印floyd最短路径的结果</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;floyd: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mVexs.length; j++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d  &quot;</span>, dist[i][j]);</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="迪杰斯特拉"><a href="#迪杰斯特拉" class="headerlink" title="迪杰斯特拉"></a>迪杰斯特拉</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixUDG</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mEdgNum;        <span class="comment">// 边的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] mVexs;       <span class="comment">// 顶点集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] mMatrix;    <span class="comment">// 邻接矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE;   <span class="comment">// 最大值</span></span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Dijkstra最短路径。</span></span><br><span class="line"><span class="comment"> * 即，统计图中&quot;顶点vs&quot;到其它各个顶点的最短路径。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *       vs -- 起始顶点(start vertex)。即计算&quot;顶点vs&quot;到其它顶点的最短路径。</span></span><br><span class="line"><span class="comment"> *     prev -- 前驱顶点数组。即，prev[i]的值是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径所经历的全部顶点中，位于&quot;顶点i&quot;之前的那个顶点。</span></span><br><span class="line"><span class="comment"> *     dist -- 长度数组。即，dist[i]是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径的长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dijkstra</span><span class="params">(<span class="type">int</span> vs, <span class="type">int</span>[] prev, <span class="type">int</span>[] dist)</span> &#123;</span><br><span class="line">    <span class="comment">// flag[i]=true表示&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径已成功获取</span></span><br><span class="line">    <span class="type">boolean</span>[] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[mVexs.length];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">        flag[i] = <span class="literal">false</span>;          <span class="comment">// 顶点i的最短路径还没获取到。</span></span><br><span class="line">        prev[i] = <span class="number">0</span>;              <span class="comment">// 顶点i的前驱顶点为0。</span></span><br><span class="line">        dist[i] = mMatrix[vs][i];  <span class="comment">// 顶点i的最短路径为&quot;顶点vs&quot;到&quot;顶点i&quot;的权。</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 对&quot;顶点vs&quot;自身进行初始化</span></span><br><span class="line">    flag[vs] = <span class="literal">true</span>;</span><br><span class="line">    dist[vs] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 遍历mVexs.length-1次；每次找出一个顶点的最短路径。</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 寻找当前最小的路径；</span></span><br><span class="line">        <span class="comment">// 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mVexs.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[j]==<span class="literal">false</span> &amp;&amp; dist[j]&lt;min) &#123;</span><br><span class="line">                min = dist[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 标记&quot;顶点k&quot;为已经获取到最短路径</span></span><br><span class="line">        flag[k] = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 修正当前最短路径和前驱顶点</span></span><br><span class="line">        <span class="comment">// 即，当已经&quot;顶点k的最短路径&quot;之后，更新&quot;未获取最短路径的顶点的最短路径和前驱顶点&quot;。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mVexs.length; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> (mMatrix[k][j]==INF ? INF : (min + mMatrix[k][j]));</span><br><span class="line">            <span class="keyword">if</span> (flag[j]==<span class="literal">false</span> &amp;&amp; (tmp&lt;dist[j]) ) &#123;</span><br><span class="line">                dist[j] = tmp;</span><br><span class="line">                prev[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 打印dijkstra最短路径的结果</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;dijkstra(%c): \n&quot;</span>, mVexs[vs]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; mVexs.length; i++)</span><br><span class="line">        System.out.printf(<span class="string">&quot;  shortest(%c, %c)=%d\n&quot;</span>, mVexs[vs], mVexs[i], dist[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="构建树（前序-中序）"><a href="#构建树（前序-中序）" class="headerlink" title="构建树（前序+中序）"></a>构建树（前序+中序）</h4><p><a href="https://www.hello-algo.com/chapter_divide_and_conquer/build_binary_tree_problem/#3">12.3  构建树问题 - Hello 算法 (hello-algo.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 构建二叉树：分治 */</span></span><br><span class="line">TreeNode <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] preorder, Map&lt;Integer, Integer&gt; inorderMap, <span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">// 子树区间为空时终止</span></span><br><span class="line">    <span class="keyword">if</span> (r - l &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 初始化根节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[i]);</span><br><span class="line">    <span class="comment">// 查询 m ，从而划分左右子树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> inorderMap.get(preorder[i]);</span><br><span class="line">    <span class="comment">// 子问题：构建左子树</span></span><br><span class="line">    root.left = dfs(preorder, inorderMap, i + <span class="number">1</span>, l, m - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 子问题：构建右子树</span></span><br><span class="line">    root.right = dfs(preorder, inorderMap, i + <span class="number">1</span> + m - l, m + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//构建右子树稍微复杂一些。首先，需要确定右子树的根节点在前序遍历中的位置。由于左子树的根节点之后的所有元素都属于右子树，所以右子树的根节点在前序遍历中的位置是 i + 1 + (m - l)。这里的 m - l 表示左子树的大小，即左子树有多少个节点。</span></span><br><span class="line">    <span class="comment">// 返回根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构建二叉树 */</span></span><br><span class="line">TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化哈希表，存储 inorder 元素到索引的映射</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; inorderMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">        inorderMap.put(inorder[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> dfs(preorder, inorderMap, <span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断是不是二叉平衡树"><a href="#判断是不是二叉平衡树" class="headerlink" title="判断是不是二叉平衡树"></a>判断是不是二叉平衡树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//求左子树的深度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> deepFind(root.left);</span><br><span class="line">        <span class="comment">//求右子树的深度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> deepFind(root.right);</span><br><span class="line">        <span class="comment">//判断每个节点是否满足平衡二叉树的定义，全部都是，才是真正的平衡二叉树</span></span><br><span class="line">        <span class="keyword">return</span> (Math.abs(left - right) &lt; <span class="number">2</span> ? <span class="literal">true</span> : <span class="literal">false</span>) &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一棵树的深度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deepFind</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(deepFind(node.left), deepFind(node.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="回溯问题"><a href="#回溯问题" class="headerlink" title="回溯问题"></a>回溯问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(State state, List&lt;Choice&gt; choices, List&lt;State&gt; res)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否为解</span></span><br><span class="line">    <span class="keyword">if</span> (isSolution(state)) &#123;</span><br><span class="line">        <span class="comment">// 记录解</span></span><br><span class="line">        recordSolution(state, res);</span><br><span class="line">        <span class="comment">// 不再继续搜索</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有选择</span></span><br><span class="line">    <span class="keyword">for</span> (Choice choice : choices) &#123;</span><br><span class="line">        <span class="comment">// 剪枝：判断选择是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (isValid(state, choice)) &#123;</span><br><span class="line">            <span class="comment">// 尝试：做出选择，更新状态</span></span><br><span class="line">            makeChoice(state, choice);</span><br><span class="line">            backtrack(state, choices, res);</span><br><span class="line">            <span class="comment">// 回退：撤销选择，恢复到之前的状态</span></span><br><span class="line">            undoChoice(state, choice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回溯算法：全排列 I */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;Integer&gt; state, <span class="type">int</span>[] choices, <span class="type">boolean</span>[] selected, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="comment">// 当状态长度等于元素数量时，记录解</span></span><br><span class="line">    <span class="keyword">if</span> (state.size() == choices.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(state));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有选择</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; choices.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> choices[i];</span><br><span class="line">        <span class="comment">// 剪枝：不允许重复选择元素</span></span><br><span class="line">        <span class="keyword">if</span> (!selected[i]) &#123;</span><br><span class="line">            <span class="comment">// 尝试：做出选择，更新状态</span></span><br><span class="line">            selected[i] = <span class="literal">true</span>;</span><br><span class="line">            state.add(choice);</span><br><span class="line">            <span class="comment">// 进行下一轮选择</span></span><br><span class="line">            backtrack(state, choices, selected, res);</span><br><span class="line">            <span class="comment">// 回退：撤销选择，恢复到之前的状态</span></span><br><span class="line">            selected[i] = <span class="literal">false</span>;</span><br><span class="line">            state.remove(state.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全排列 I */</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permutationsI</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    backtrack(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), nums, <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length], res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子集和问题"><a href="#子集和问题" class="headerlink" title="子集和问题"></a>子集和问题</h4><p>类似于全排列问题，我们可以把子集的生成过程想象成一系列选择的结果，并在选择过程中实时更新“元素和”，当元素和等于 <code>target</code> 时，就将子集记录至结果列表。</p><p>而与全排列问题不同的是，<strong>本题集合中的元素可以被无限次选取</strong>，因此无须借助 <code>selected</code> 布尔列表来记录元素是否已被选择。我们可以对全排列代码进行小幅修改，初步得到解题代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回溯算法：子集和 I */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;Integer&gt; state, <span class="type">int</span> target, <span class="type">int</span> total, <span class="type">int</span>[] choices, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="comment">// 子集和等于 target 时，记录解</span></span><br><span class="line">    <span class="keyword">if</span> (total == target) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(state));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有选择</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; choices.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 剪枝：若子集和超过 target ，则跳过该选择</span></span><br><span class="line">        <span class="keyword">if</span> (total + choices[i] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尝试：做出选择，更新元素和 total</span></span><br><span class="line">        state.add(choices[i]);</span><br><span class="line">        <span class="comment">// 进行下一轮选择</span></span><br><span class="line">        backtrack(state, target, total + choices[i], choices, res);</span><br><span class="line">        <span class="comment">// 回退：撤销选择，恢复到之前的状态</span></span><br><span class="line">        state.remove(state.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解子集和 I（包含重复子集） */</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetSumINaive</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; state = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 状态（子集）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 子集和</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 结果列表（子集列表）</span></span><br><span class="line">    backtrack(state, target, total, nums, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样的问题是，其在进行选取的时候，会造成重复，解决办法是先排序</p><ul><li>在开启搜索前，先将数组 <code>nums</code> 排序。在遍历所有选择时，<strong>当子集和超过 <code>target</code> 时直接结束循环</strong>，因为后边的元素更大，其子集和一定超过 <code>target</code> 。</li><li>省去元素和变量 <code>total</code> ，<strong>通过在 <code>target</code> 上执行减法来统计元素和</strong>，当 <code>target</code> 等于 0 时记录解。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回溯算法：子集和 I */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;Integer&gt; state, <span class="type">int</span> target, <span class="type">int</span>[] choices, <span class="type">int</span> start, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="comment">// 子集和等于 target 时，记录解</span></span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(state));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有选择</span></span><br><span class="line">    <span class="comment">// 剪枝二：从 start 开始遍历，避免生成重复子集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; choices.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 剪枝一：若子集和超过 target ，则直接结束循环</span></span><br><span class="line">        <span class="comment">// 这是因为数组已排序，后边元素更大，子集和一定超过 target</span></span><br><span class="line">        <span class="keyword">if</span> (target - choices[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尝试：做出选择，更新 target, start</span></span><br><span class="line">        state.add(choices[i]);</span><br><span class="line">        <span class="comment">// 进行下一轮选择</span></span><br><span class="line">        backtrack(state, target - choices[i], choices, i, res);</span><br><span class="line">        <span class="comment">// 回退：撤销选择，恢复到之前的状态</span></span><br><span class="line">        state.remove(state.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解子集和 I */</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetSumI</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; state = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 状态（子集）</span></span><br><span class="line">    Arrays.sort(nums); <span class="comment">// 对 nums 进行排序</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 遍历起始点</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 结果列表（子集列表）</span></span><br><span class="line">    backtrack(state, target, nums, start, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="N皇后问题（经典）"><a href="#N皇后问题（经典）" class="headerlink" title="N皇后问题（经典）"></a>N皇后问题（经典）</h4><p><a href="https://www.hello-algo.com/chapter_backtracking/n_queens_problem/#3">13.4  N 皇后问题 - Hello 算法 (hello-algo.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 回溯算法：n 皇后 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> n, List&lt;List&lt;String&gt;&gt; state, List&lt;List&lt;List&lt;String&gt;&gt;&gt; res,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span>[] cols, <span class="type">boolean</span>[] diags1, <span class="type">boolean</span>[] diags2)</span> &#123;</span><br><span class="line">    <span class="comment">// 当放置完所有行时，记录解</span></span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; copyState = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; sRow : state) &#123;</span><br><span class="line">            copyState.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(sRow));</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(copyState);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        <span class="comment">// 计算该格子对应的主对角线和次对角线</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">diag1</span> <span class="operator">=</span> row - col + n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">diag2</span> <span class="operator">=</span> row + col;</span><br><span class="line">        <span class="comment">// 剪枝：不允许该格子所在列、主对角线、次对角线上存在皇后</span></span><br><span class="line">        <span class="keyword">if</span> (!cols[col] &amp;&amp; !diags1[diag1] &amp;&amp; !diags2[diag2]) &#123;</span><br><span class="line">            <span class="comment">// 尝试：将皇后放置在该格子</span></span><br><span class="line">            state.get(row).set(col, <span class="string">&quot;Q&quot;</span>);</span><br><span class="line">            cols[col] = diags1[diag1] = diags2[diag2] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 放置下一行</span></span><br><span class="line">            backtrack(row + <span class="number">1</span>, n, state, res, cols, diags1, diags2);</span><br><span class="line">            <span class="comment">// 回退：将该格子恢复为空位</span></span><br><span class="line">            state.get(row).set(col, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">            cols[col] = diags1[diag1] = diags2[diag2] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解 n 皇后 */</span></span><br><span class="line">List&lt;List&lt;List&lt;String&gt;&gt;&gt; <span class="title function_">nQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化 n*n 大小的棋盘，其中 &#x27;Q&#x27; 代表皇后，&#x27;#&#x27; 代表空位</span></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; state = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        List&lt;String&gt; row = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            row.add(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        state.add(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] cols = <span class="keyword">new</span> <span class="title class_">boolean</span>[n]; <span class="comment">// 记录列是否有皇后</span></span><br><span class="line">    <span class="type">boolean</span>[] diags1 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>]; <span class="comment">// 记录主对角线上是否有皇后</span></span><br><span class="line">    <span class="type">boolean</span>[] diags2 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>]; <span class="comment">// 记录次对角线上是否有皇后</span></span><br><span class="line">    List&lt;List&lt;List&lt;String&gt;&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    backtrack(<span class="number">0</span>, n, state, res, cols, diags1, diags2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2024-09-04蔚来"><a href="#2024-09-04蔚来" class="headerlink" title="2024.09.04蔚来"></a>2024.09.04蔚来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getAns</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span>[][] ans, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">currentX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentY</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> steps[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">        steps[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; steps[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        steps[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; steps[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        steps[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>; steps[<span class="number">2</span>][<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        steps[<span class="number">3</span>][<span class="number">0</span>] = -<span class="number">1</span>; steps[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ans[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> visited[][] = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> backtrace(matrix, visited, currentX, currentY, m, n, flag, steps, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">boolean</span>[][] visited, <span class="type">int</span> currentX, <span class="type">int</span> currentY, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">boolean</span> flag, <span class="type">int</span>[][] steps, <span class="type">int</span>[][] ans)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentY &lt; <span class="number">0</span> || currentY &gt;= n || currentX &lt; <span class="number">0</span> || currentX &gt;= m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempCurrentX</span> <span class="operator">=</span> currentX + steps[j][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempCurrentY</span> <span class="operator">=</span> currentY + steps[j][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (tempCurrentX &lt; <span class="number">0</span> || tempCurrentX &gt;= m || tempCurrentY &lt; <span class="number">0</span> || tempCurrentY &gt;= n || visited[tempCurrentX][tempCurrentY] || matrix[tempCurrentX][tempCurrentY] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tempCurrentX == m - <span class="number">1</span> &amp;&amp; tempCurrentY == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    ans[tempCurrentX][tempCurrentY] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[tempCurrentX][tempCurrentY] = <span class="literal">true</span>;</span><br><span class="line">                ans[tempCurrentX][tempCurrentY] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (backtrace(matrix, visited, tempCurrentX, tempCurrentY, m, n, flag, steps, ans)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[tempCurrentX][tempCurrentY] = <span class="number">0</span>;</span><br><span class="line">                visited[tempCurrentX][tempCurrentY] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> matrix[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        matrix[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        matrix[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        flag = getAns(matrix, ans, flag);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                    System.out.print(ans[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No path found.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记忆化搜索 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>[] mem)</span> &#123;</span><br><span class="line">    <span class="comment">// 已知 dp[1] 和 dp[2] ，返回之</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    <span class="comment">// 若存在记录 dp[i] ，则直接返回之</span></span><br><span class="line">    <span class="keyword">if</span> (mem[i] != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> mem[i];</span><br><span class="line">    <span class="comment">// dp[i] = dp[i-1] + dp[i-2]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> dfs(i - <span class="number">1</span>, mem) + dfs(i - <span class="number">2</span>, mem);</span><br><span class="line">    <span class="comment">// 记录 dp[i]</span></span><br><span class="line">    mem[i] = count;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 爬楼梯：记忆化搜索 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">climbingStairsDFSMem</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// mem[i] 记录爬到第 i 阶的方案总数，-1 代表无记录</span></span><br><span class="line">    <span class="type">int</span>[] mem = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(mem, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> dfs(n, mem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h4><p>暴力搜索 O(2^n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 0-1 背包：暴力搜索 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsackDFS</span><span class="params">(<span class="type">int</span>[] wgt, <span class="type">int</span>[] val, <span class="type">int</span> i, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="comment">// 若已选完所有物品或背包无剩余容量，则返回价值 0</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若超过背包容量，则只能选择不放入背包</span></span><br><span class="line">    <span class="keyword">if</span> (wgt[i - <span class="number">1</span>] &gt; c) &#123;</span><br><span class="line">        <span class="keyword">return</span> knapsackDFS(wgt, val, i - <span class="number">1</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算不放入和放入物品 i 的最大价值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">no</span> <span class="operator">=</span> knapsackDFS(wgt, val, i - <span class="number">1</span>, c);</span><br><span class="line">    <span class="type">int</span> <span class="variable">yes</span> <span class="operator">=</span> knapsackDFS(wgt, val, i - <span class="number">1</span>, c - wgt[i - <span class="number">1</span>]) + val[i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 返回两种方案中价值更大的那一个</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(no, yes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空间优化加动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 0-1 背包：空间优化后的动态规划 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsackDPComp</span><span class="params">(<span class="type">int</span>[] wgt, <span class="type">int</span>[] val, <span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> wgt.length;</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cap + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 倒序遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> cap; c &gt;= <span class="number">1</span>; c--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wgt[i - <span class="number">1</span>] &lt;= c) &#123;</span><br><span class="line">                <span class="comment">// 不选和选物品 i 这两种方案的较大值</span></span><br><span class="line">                dp[c] = Math.max(dp[c], dp[c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[cap];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><p>空间优化加动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 完全背包：空间优化后的动态规划 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">unboundedKnapsackDPComp</span><span class="params">(<span class="type">int</span>[] wgt, <span class="type">int</span>[] val, <span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> wgt.length;</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cap + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>; c &lt;= cap; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wgt[i - <span class="number">1</span>] &gt; c) &#123;</span><br><span class="line">                <span class="comment">// 若超过背包容量，则不选物品 i</span></span><br><span class="line">                dp[c] = dp[c];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不选和选物品 i 这两种方案的较大值</span></span><br><span class="line">                dp[c] = Math.max(dp[c], dp[c - wgt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[cap];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-322-零钱兑换"><a href="#Leetcode-322-零钱兑换" class="headerlink" title="Leetcode 322.零钱兑换"></a>Leetcode 322.零钱兑换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">types</span> <span class="operator">=</span> coins.length;</span><br><span class="line">        <span class="type">int</span> dp[] = <span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;=amount;i++)&#123;</span><br><span class="line">            dp[i]=amount+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;types;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;=amount;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j&gt;=coins[i])&#123; <span class="comment">//会用到这个硬币</span></span><br><span class="line">                    <span class="keyword">if</span>(dp[j-coins[i]]+<span class="number">1</span>&lt;dp[j])&#123;</span><br><span class="line">                        dp[j] = dp[j-coins[i]]+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[amount]==amount+<span class="number">1</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="零钱兑换问题2"><a href="#零钱兑换问题2" class="headerlink" title="零钱兑换问题2"></a>零钱兑换问题2</h4><p>凑硬币</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 零钱兑换 II：动态规划 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">coinChangeIIDP</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amt)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][amt + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化首列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; a &lt;= amt; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (coins[i - <span class="number">1</span>] &gt; a) &#123;</span><br><span class="line">                <span class="comment">// 若超过目标金额，则不选硬币 i</span></span><br><span class="line">                dp[i][a] = dp[i - <span class="number">1</span>][a];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不选和选硬币 i 这两种方案之和</span></span><br><span class="line">                dp[i][a] = dp[i - <span class="number">1</span>][a] + dp[i][a - coins[i - <span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][amt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加空间优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 零钱兑换 II：空间优化后的动态规划 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">coinChangeIIDPComp</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amt)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">    <span class="comment">// 初始化 dp 表</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amt + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; a &lt;= amt; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (coins[i - <span class="number">1</span>] &gt; a) &#123;</span><br><span class="line">                <span class="comment">// 若超过目标金额，则不选硬币 i</span></span><br><span class="line">                dp[a] = dp[a];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不选和选硬币 i 这两种方案之和</span></span><br><span class="line">                dp[a] = dp[a] + dp[a - coins[i - <span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑距离问题"><a href="#编辑距离问题" class="headerlink" title="编辑距离问题"></a>编辑距离问题</h4><p><a href="https://www.hello-algo.com/chapter_dynamic_programming/edit_distance_problem/#1">14.6  编辑距离问题 - Hello 算法 (hello-algo.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.dp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Levenshtein</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">distance</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> a.length();</span><br><span class="line">         <span class="type">int</span> <span class="variable">length2</span> <span class="operator">=</span> b.length();</span><br><span class="line">         <span class="type">int</span> dp[][] = <span class="keyword">new</span> <span class="title class_">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=length1;i++)&#123;</span><br><span class="line">             dp[i][<span class="number">0</span>]=i;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=length2;j++)&#123;</span><br><span class="line">             dp[<span class="number">0</span>][j]=j;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ;i&lt;=length1;i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=length2;j++)&#123;</span><br><span class="line">                 <span class="keyword">if</span> (a.charAt(i-<span class="number">1</span>)==b.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> dp[length1][length2];</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;kitten&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;sitting&quot;</span>;</span><br><span class="line">          <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> distance(s1,s2);</span><br><span class="line">          System.out.println(ans);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-198-打家劫舍"><a href="#Leetcode-198-打家劫舍" class="headerlink" title="Leetcode 198.打家劫舍"></a>Leetcode 198.打家劫舍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> dp [] = <span class="keyword">new</span> <span class="title class_">int</span> [length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt; length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">before</span> <span class="operator">=</span> i-<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">                dp[i]=Math.max(nums[i],nums[i-<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i]=Math.max(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]+nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-139-单词拆分"><a href="#Leetcode-139-单词拆分" class="headerlink" title="Leetcode 139.单词拆分"></a>Leetcode 139.单词拆分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span> dp[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[length+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;length+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i]&amp;&amp;wordDict.contains(s.substring(i,j)))&#123;</span><br><span class="line">                    dp[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>一般情况下，贪心算法的适用情况分以下两种。</p><ol><li><strong>可以保证找到最优解</strong>：贪心算法在这种情况下往往是最优选择，因为它往往比回溯、动态规划更高效。</li><li><strong>可以找到近似最优解</strong>：贪心算法在这种情况下也是可用的。对于很多复杂问题来说，寻找全局最优解非常困难，能以较高效率找到次优解也是非常不错的。</li></ol><p>贪心问题的解决流程大体可分为以下三步。</p><ol><li><strong>问题分析</strong>：梳理与理解问题特性，包括状态定义、优化目标和约束条件等。这一步在回溯和动态规划中都有涉及。</li><li><strong>确定贪心策略</strong>：确定如何在每一步中做出贪心选择。这个策略能够在每一步减小问题的规模，并最终解决整个问题。</li><li><strong>正确性证明</strong>：通常需要证明问题具有贪心选择性质和最优子结构。这个步骤可能需要用到数学证明，例如归纳法或反证法等。</li></ol><h4 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> gas.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumGas</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sumCost += cost[i];</span><br><span class="line">            sumGas += gas[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sumCost &gt; sumGas)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hasPassed</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; hasPassed &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == n)</span><br><span class="line">                    j = <span class="number">0</span>;</span><br><span class="line">                rest += gas[j];</span><br><span class="line">                <span class="keyword">if</span> (rest &gt;= cost[j]) &#123;</span><br><span class="line">                    rest -= cost[j];</span><br><span class="line">                    hasPassed++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hasPassed == n)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCP-03-机器人大冒险"><a href="#LCP-03-机器人大冒险" class="headerlink" title="LCP 03. 机器人大冒险"></a><a href="https://leetcode.cn/problems/programmable-robot/">LCP 03. 机器人大冒险</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">robot</span><span class="params">(String cmd, <span class="type">int</span>[][] obstacles, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cmd.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sx</span> <span class="operator">=</span> <span class="number">0</span>, sy = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录走完一轮后机器人的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> cmd.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;U&#x27;</span>) ++ sy;</span><br><span class="line">            <span class="keyword">else</span> ++ sx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先计算能否到达终点 不考虑障碍物</span></span><br><span class="line">        <span class="comment">// 若不能直接返回false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">canFinish</span> <span class="operator">=</span> canReach(cmd, x, y, sx, sy);</span><br><span class="line">        <span class="keyword">if</span> (!canFinish) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 判断在终点前会不会遇到障碍物 </span></span><br><span class="line">        <span class="comment">// 若遇到则返回false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] o : obstacles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o[<span class="number">0</span>] &gt; x || o[<span class="number">1</span>] &gt; y)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (canReach(cmd, o[<span class="number">0</span>], o[<span class="number">1</span>], sx, sy)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断能否从坐标(x, y)到达(tx, ty)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReach</span><span class="params">(String cmd, <span class="type">int</span> tx, <span class="type">int</span> ty, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="comment">// round记录走到目标点至少要走多少轮</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">round</span> <span class="operator">=</span> Math.min(tx/x, ty/y);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> round*x, ny = round*y;</span><br><span class="line">        <span class="keyword">if</span> (nx == tx &amp;&amp; ny == ty) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cmd.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> cmd.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;U&#x27;</span>) ++ ny;</span><br><span class="line">            <span class="keyword">else</span> ++ nx;</span><br><span class="line">            <span class="keyword">if</span> (nx &gt; tx || ny &gt; ty) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (nx == tx &amp;&amp; ny == ty) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-135-分发糖果"><a href="#Leetcode-135-分发糖果" class="headerlink" title="Leetcode 135.分发糖果"></a>Leetcode 135.分发糖果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ratings.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inc</span> <span class="operator">=</span> <span class="number">1</span>, dec = <span class="number">0</span>, pre = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt;= ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dec = <span class="number">0</span>;</span><br><span class="line">                pre = ratings[i] == ratings[i - <span class="number">1</span>] ? <span class="number">1</span> : pre + <span class="number">1</span>;</span><br><span class="line">                ret += pre;</span><br><span class="line">                inc = pre;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dec++;</span><br><span class="line">                <span class="keyword">if</span> (dec == inc) &#123;</span><br><span class="line">                    dec++;</span><br><span class="line">                &#125;</span><br><span class="line">                ret += dec;</span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-42-接雨水"><a href="#Leetcode-42-接雨水" class="headerlink" title="Leetcode 42.接雨水"></a>Leetcode 42.接雨水</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max_left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (height[j]&gt;max_left)</span><br><span class="line">                max_left = height[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max_right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (height[j]&gt;max_right)</span><br><span class="line">                max_right = height[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height[i]&lt;Math.min(max_left,max_right))&#123;</span><br><span class="line">                ans+=Math.min(max_left,max_right)- height[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-13-罗马数字转整形"><a href="#Leetcode-13-罗马数字转整形" class="headerlink" title="Leetcode 13.罗马数字转整形"></a>Leetcode 13.罗马数字转整形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; romanMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        romanMap.put(<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;L&#x27;</span>,<span class="number">50</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;D&#x27;</span>,<span class="number">500</span>);</span><br><span class="line">        romanMap.put(<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i==length-<span class="number">1</span>)ans+=romanMap.get(s.charAt(i));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (romanMap.get(s.charAt(i))&lt;romanMap.get(s.charAt(i+<span class="number">1</span>)))&#123;</span><br><span class="line">                    ans-=romanMap.get(s.charAt(i));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans+=romanMap.get(s.charAt(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-12-整数转罗马数字"><a href="#Leetcode-12-整数转罗马数字" class="headerlink" title="Leetcode 12.整数转罗马数字"></a>Leetcode 12.整数转罗马数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] values = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    String[] symbols = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">roman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> values[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">symbol</span> <span class="operator">=</span> symbols[i];</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= value) &#123;</span><br><span class="line">                num -= value;</span><br><span class="line">                roman.append(symbol);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roman.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-63-不同路径2"><a href="#Leetcode-63-不同路径2" class="headerlink" title="Leetcode 63.不同路径2"></a>Leetcode 63.不同路径2</h3><p>动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid == <span class="literal">null</span> || obstacleGrid.length == <span class="number">0</span> || obstacleGrid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示到达 (i, j) 的路径数</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j] == <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">// 遇到障碍物，之后的格子路径数为0</span></span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化第一列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">// 遇到障碍物，之后的格子路径数为0</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充 dp 表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>; <span class="comment">// 遇到障碍物，路径数为0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]; <span class="comment">// 返回右下角的路径数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-68-文本左右对齐"><a href="#Leetcode-68-文本左右对齐" class="headerlink" title="Leetcode 68.文本左右对齐"></a>Leetcode 68.文本左右对齐</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fullJustify</span><span class="params">(String[] words, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>, n = words.length;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> right; <span class="comment">// 当前行的第一个单词在 words 的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sumLen</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 统计这一行单词长度之和</span></span><br><span class="line">            <span class="comment">// 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; sumLen + words[right].length() + right - left &lt;= maxWidth) &#123;</span><br><span class="line">                sumLen += words[right++].length();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格</span></span><br><span class="line">            <span class="keyword">if</span> (right == n) &#123;</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> join(words, left, n, <span class="string">&quot; &quot;</span>);</span><br><span class="line">                sb.append(blank(maxWidth - sb.length()));</span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">numWords</span> <span class="operator">=</span> right - left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">numSpaces</span> <span class="operator">=</span> maxWidth - sumLen;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前行只有一个单词：该单词左对齐，在行末填充剩余空格</span></span><br><span class="line">            <span class="keyword">if</span> (numWords == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(words[left]);</span><br><span class="line">                sb.append(blank(numSpaces));</span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前行不只一个单词</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">avgSpaces</span> <span class="operator">=</span> numSpaces / (numWords - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">extraSpaces</span> <span class="operator">=</span> numSpaces % (numWords - <span class="number">1</span>);</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            sb.append(join(words, left, left + extraSpaces + <span class="number">1</span>, blank(avgSpaces + <span class="number">1</span>))); <span class="comment">// 拼接额外加一个空格的单词</span></span><br><span class="line">            sb.append(blank(avgSpaces));</span><br><span class="line">            sb.append(join(words, left + extraSpaces + <span class="number">1</span>, right, blank(avgSpaces))); <span class="comment">// 拼接其余单词</span></span><br><span class="line">            ans.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// blank 返回长度为 n 的由空格组成的字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">blank</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// join 返回用 sep 拼接 [left, right) 范围内的 words 组成的字符串</span></span><br><span class="line">    <span class="keyword">public</span> StringBuffer <span class="title function_">join</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right, String sep)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(words[left]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left + <span class="number">1</span>; i &lt; right; ++i) &#123;</span><br><span class="line">            sb.append(sep);</span><br><span class="line">            sb.append(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-125-验证回文串"><a href="#Leetcode-125-验证回文串" class="headerlink" title="Leetcode 125.验证回文串"></a>Leetcode 125.验证回文串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s.toLowerCase();</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s2.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(s2.charAt(i))||Character.isDigit(s2.charAt(i)))&#123;</span><br><span class="line">                stack.push(s2.charAt(i));</span><br><span class="line">                queue.offer(s2.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.peek()==queue.peek())&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-167-两数之和-II-输入有序数组"><a href="#Leetcode-167-两数之和-II-输入有序数组" class="headerlink" title="Leetcode 167.两数之和 II - 输入有序数组"></a>Leetcode 167.<a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">两数之和 II - 输入有序数组</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers[low] + numbers[high];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;low + <span class="number">1</span>, high + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                ++low;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --high;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-11-盛最多水的容器"><a href="#Leetcode-11-盛最多水的容器" class="headerlink" title="Leetcode 11.盛最多水的容器"></a>Leetcode 11.盛最多水的容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法会超时</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> ((j-i)*Math.min(height[i],height[j])&gt;ans)&#123;</span><br><span class="line">                    ans = (j-i)*Math.min(height[i],height[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双指针，正确性可以用反证法：如果高度更高的反而改变了，那么能装的水肯定是变小的，所以这种策略一定是让能装的水变多的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minHeight</span> <span class="operator">=</span> Math.min(height[start],height[end]);</span><br><span class="line">            <span class="keyword">if</span> ((end-start)*minHeight&gt;ans)&#123;</span><br><span class="line">                ans = (end-start)*minHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minHeight==height[start])start++;</span><br><span class="line">            <span class="keyword">else</span> end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-15-三数之和"><a href="#Leetcode-15-三数之和" class="headerlink" title="Leetcode 15.三数之和"></a>Leetcode 15.三数之和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt;ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (j&lt;k&amp;&amp;nums[j]+nums[k]&gt;t)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j==k)<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[j]+nums[k]==t)&#123;</span><br><span class="line">                    List&lt;Integer&gt;list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                    list.add(nums[j]);</span><br><span class="line">                    list.add(nums[k]);</span><br><span class="line">                    ans.add(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-209-长度最小的子数组"><a href="#Leetcode-209-长度最小的子数组" class="headerlink" title="Leetcode 209.长度最小的子数组"></a>Leetcode 209.长度最小的子数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力 会超时</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> presum[]=<span class="keyword">new</span> <span class="title class_">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=length;i++)&#123;</span><br><span class="line">                presum[i]=presum[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (presum[length]&lt;target)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=length;j&gt;=i;j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (presum[j]-presum[i]&gt;=target)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (j-i&lt;ans)ans = j-i;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//滑动窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            end++;</span><br><span class="line">            <span class="keyword">if</span> (sum&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">while</span> (sum&gt;=target)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (end-start&lt;ans)ans = end -start;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    sum-=nums[start];</span><br><span class="line">                    start++;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-3-无重复字符的最长子串"><a href="#Leetcode-3-无重复字符的最长子串" class="headerlink" title="Leetcode 3.无重复字符的最长子串"></a>Leetcode 3.无重复字符的最长子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(Character.valueOf(s.charAt(i)))!=<span class="literal">null</span>&amp;&amp;start&lt;map.get(Character.valueOf(s.charAt(i)))+<span class="number">1</span>)&#123; <span class="comment">//发现有重复的了</span></span><br><span class="line">                start=map.get(Character.valueOf(s.charAt(i)))+<span class="number">1</span>; <span class="comment">//跳到没有重复的地方</span></span><br><span class="line">            &#125;</span><br><span class="line">            map.put(Character.valueOf(s.charAt(i)),i);</span><br><span class="line">            <span class="keyword">if</span> (i-start+<span class="number">1</span>&gt;ans)ans = i-start+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-36-有效的数独"><a href="#Leetcode-36-有效的数独" class="headerlink" title="Leetcode 36.有效的数独"></a>Leetcode 36.有效的数独</h3><p>暴力解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; board[i][j] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!getEffective(i, j, board))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getEffective</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        <span class="comment">// 验证一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; board[i].length; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][k] == board[i][j] &amp;&amp; k != j)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; board.length; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[k][j] == board[i][j] &amp;&amp; k != i)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证当前 3 * 3 数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">heng</span> <span class="operator">=</span> (i / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zhong</span> <span class="operator">=</span> (j / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> heng; k1 &lt; heng + <span class="number">3</span>; k1++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k2</span> <span class="operator">=</span> zhong; k2 &lt; zhong + <span class="number">3</span>; k2++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((board[k1][k2] == board[i][j]) &amp;&amp; (k1 != i &amp;&amp; k2 != j))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-54-螺旋矩阵"><a href="#Leetcode-54-螺旋矩阵" class="headerlink" title="Leetcode 54.螺旋矩阵"></a>Leetcode 54.螺旋矩阵</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; order = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length, columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[rows][columns];</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> rows * columns;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>, column = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">directionIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">            order.add(matrix[row][column]);</span><br><span class="line">            visited[row][column] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextRow</span> <span class="operator">=</span> row + directions[directionIndex][<span class="number">0</span>], nextColumn = column + directions[directionIndex][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nextRow &lt; <span class="number">0</span> || nextRow &gt;= rows || nextColumn &lt; <span class="number">0</span> || nextColumn &gt;= columns || visited[nextRow][nextColumn]) &#123;</span><br><span class="line">                directionIndex = (directionIndex + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            row += directions[directionIndex][<span class="number">0</span>];</span><br><span class="line">            column += directions[directionIndex][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-48-旋转图像"><a href="#Leetcode-48-旋转图像" class="headerlink" title="Leetcode 48.旋转图像"></a>Leetcode 48.旋转图像</h3><p>这种旋转的题就注意位置映射关系就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (n + <span class="number">1</span>) / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[n - j - <span class="number">1</span>][i];</span><br><span class="line">                matrix[n - j - <span class="number">1</span>][i] = matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>];</span><br><span class="line">                matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>] = matrix[j][n - i - <span class="number">1</span>];</span><br><span class="line">                matrix[j][n - i - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-289-生命游戏"><a href="#Leetcode-289-生命游戏" class="headerlink" title="Leetcode 289.生命游戏"></a>Leetcode 289.生命游戏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gameOfLife</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span> isAlive[][]=<span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> getNum(board,i,j,m,n);</span><br><span class="line">                <span class="keyword">if</span> (board[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (num&lt;<span class="number">2</span>||num&gt;<span class="number">3</span>)isAlive[i][j]=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (num==<span class="number">2</span>||num==<span class="number">3</span>)isAlive[i][j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (num==<span class="number">3</span>)isAlive[i][j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (isAlive[i][j])board[i][j]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    board[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span>[][] board,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=x-<span class="number">1</span>;i&lt;=x+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;<span class="number">0</span>||i&gt;=m)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j= y-<span class="number">1</span>;j&lt;=y+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j&lt;<span class="number">0</span>||j&gt;=n||i==x&amp;&amp;j==y)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j]==<span class="number">1</span>)num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="Leetcode-383-赎金信"><a href="#Leetcode-383-赎金信" class="headerlink" title="Leetcode 383.赎金信"></a>Leetcode 383.赎金信</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span> nums[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> magazine.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            nums[magazine.charAt(i)-<span class="string">&#x27;a&#x27;</span>]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rSize= ransomNote.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;rSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            nums[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-205-同构字符串"><a href="#Leetcode-205-同构字符串" class="headerlink" title="Leetcode 205.同构字符串"></a>Leetcode 205.同构字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        Map&lt;Character,Character&gt; cMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character,Character&gt;();</span><br><span class="line">        Map&lt;Character,Character&gt; cMap2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character,Character&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cMap.containsKey(Character.valueOf(s.charAt(i)))||cMap2.containsKey(Character.valueOf(t.charAt(i))))&#123;</span><br><span class="line">                <span class="keyword">if</span> (cMap.get(Character.valueOf(s.charAt(i)))!=Character.valueOf(t.charAt(i)))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cMap.put(Character.valueOf(s.charAt(i)),Character.valueOf(t.charAt(i)));</span><br><span class="line">                cMap2.put(Character.valueOf(t.charAt(i)),Character.valueOf(s.charAt(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-290-单词规律"><a href="#Leetcode-290-单词规律" class="headerlink" title="Leetcode 290.单词规律"></a>Leetcode 290.单词规律</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">        Map&lt;Character,String&gt; cMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character,String&gt;();</span><br><span class="line">        </span><br><span class="line">        Map&lt;String,Character&gt; cMap2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Character&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        String words[]=s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (words.length!=length)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cMap.containsKey(Character.valueOf(pattern.charAt(i))))&#123;</span><br><span class="line">                <span class="keyword">if</span> (!cMap.get(Character.valueOf(pattern.charAt(i))).equals(words[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cMap2.containsKey(words[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cMap.put(Character.valueOf(pattern.charAt(i)),words[i]);</span><br><span class="line">                cMap2.put(words[i],Character.valueOf(pattern.charAt(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-49-字母异位词分组"><a href="#Leetcode-49-字母异位词分组" class="headerlink" title="Leetcode 49.字母异位词分组"></a>Leetcode 49.字母异位词分组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误解法,没考虑到次数，但注意keySet的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        HashMap&lt;HashSet&lt;Character&gt;,ArrayList&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> length2=strs[i].length();</span><br><span class="line">            HashSet&lt;Character&gt;set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ;j&lt;length2;j++)&#123;</span><br><span class="line">                set.add(Character.valueOf(strs[i].charAt(j)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(set))&#123;</span><br><span class="line">                ArrayList&lt;String&gt;list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                list.add(strs[i]);</span><br><span class="line">                map.put(set,list);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(set).add(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (HashSet&lt;Character&gt; key: map.keySet())&#123;</span><br><span class="line">            ans.add(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确解法，注意char的数组可以直接new String转为String类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">       Map&lt;String,List&lt;String&gt;&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> length2=strs[i].length();</span><br><span class="line">            <span class="type">char</span> word[]=<span class="keyword">new</span> <span class="title class_">char</span>[length2];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;length2;j++)&#123;</span><br><span class="line">                word[j]=strs[i].charAt(j) ;</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.sort(word);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(word);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(key))&#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                list.add(strs[i]);</span><br><span class="line">                map.put(key,list);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(key).add(strs[i]);</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String key: map.keySet())&#123;</span><br><span class="line">            ans.add(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-128-最长连续序列"><a href="#Leetcode-128-最长连续序列" class="headerlink" title="Leetcode 128.最长连续序列"></a>Leetcode 128.最长连续序列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length==<span class="number">0</span>||length==<span class="number">1</span>)<span class="keyword">return</span> length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i-<span class="number">1</span>]+<span class="number">1</span>==nums[i])&#123;</span><br><span class="line">                num++;</span><br><span class="line">                ans=Math.max(num,ans);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i-<span class="number">1</span>]==nums[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                num=<span class="number">1</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><h3 id="Leetcode-228-汇总区间"><a href="#Leetcode-228-汇总区间" class="headerlink" title="Leetcode 228.汇总区间"></a>Leetcode 228.汇总区间</h3><p>注意Integer.toString（）和StringBuilder的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">summaryRanges</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(Integer.toString(nums[low]));</span><br><span class="line">            <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">                temp.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                temp.append(Integer.toString(nums[high]));</span><br><span class="line">            &#125;</span><br><span class="line">            ret.add(temp.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-56-合并区间"><a href="#Leetcode-56-合并区间" class="headerlink" title="Leetcode 56.合并区间"></a>Leetcode 56.合并区间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; merged = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; intervals.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>], R = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (merged.size() == <span class="number">0</span> || merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] &lt; L) &#123;</span><br><span class="line">                merged.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;L, R&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] = Math.max(merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>], R);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[merged.size()][]); <span class="comment">//List.toArray(array)，注意array是新开辟的未分配的空间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-57-插入区间"><a href="#Leetcode-57-插入区间" class="headerlink" title="Leetcode 57.插入区间"></a>Leetcode 57.插入区间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] insert(<span class="type">int</span>[][] intervals, <span class="type">int</span>[] newInterval) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length2</span> <span class="operator">=</span> length1+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> [][]ans = <span class="keyword">new</span> <span class="title class_">int</span>[length2][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length1;i++)&#123;</span><br><span class="line">            ans[i][<span class="number">0</span>]=intervals[i][<span class="number">0</span>];</span><br><span class="line">            ans[i][<span class="number">1</span>]=intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ans[length1][<span class="number">0</span>]=newInterval[<span class="number">0</span>];</span><br><span class="line">        ans[length1][<span class="number">1</span>]=newInterval[<span class="number">1</span>];</span><br><span class="line">        Arrays.sort(ans,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[]nums1,<span class="type">int</span>[] nums2)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[<span class="number">0</span>]-nums2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt;ans2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length2;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ans2.size()==<span class="number">0</span>||ans2.get(ans2.size()-<span class="number">1</span>)[<span class="number">1</span>]&lt;ans[i][<span class="number">0</span>])&#123;</span><br><span class="line">                ans2.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;ans[i][<span class="number">0</span>],ans[i][<span class="number">1</span>]&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans2.get(ans2.size()-<span class="number">1</span>)[<span class="number">1</span>]=Math.max(ans[i][<span class="number">1</span>],ans2.get(ans2.size()-<span class="number">1</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans2.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[ans2.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-452-用最少数量的箭引爆气球"><a href="#Leetcode-452-用最少数量的箭引爆气球" class="headerlink" title="Leetcode 452.用最少数量的箭引爆气球"></a>Leetcode 452.用最少数量的箭引爆气球</h3><p>注意贪心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> points.length;</span><br><span class="line">        Arrays.sort(points,(a,b)-&gt;Integer.compare(a[<span class="number">1</span>],b[<span class="number">1</span>]));</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ans.size()==<span class="number">0</span>||ans.get(ans.size()-<span class="number">1</span>)[<span class="number">1</span>]&lt;points[i][<span class="number">0</span>])&#123;</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;points[i][<span class="number">0</span>],points[i][<span class="number">1</span>]&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="Leetcode-71-简化路径"><a href="#Leetcode-71-简化路径" class="headerlink" title="Leetcode 71.简化路径"></a>Leetcode 71.简化路径</h3><p>注意双端队列Deque用LinkedList来实现，StringBuilder.tostring()转为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplifyPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        String []strs = path.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        Deque&lt;String&gt;stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="keyword">for</span> (String str:strs)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;..&quot;</span>.equals(str))&#123;</span><br><span class="line">                <span class="keyword">if</span> (!stack.isEmpty())&#123;</span><br><span class="line">                    stack.pollLast();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str.length()&gt;<span class="number">0</span>&amp;&amp;!<span class="string">&quot;.&quot;</span>.equals(str))&#123;</span><br><span class="line">                stack.offerLast(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty())&#123;</span><br><span class="line">            sb.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">                sb.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                sb.append(stack.pollFirst());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-155-最小栈"><a href="#Leetcode-155-最小栈" class="headerlink" title="Leetcode 155.最小栈"></a>Leetcode 155.最小栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>. stack =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        stack.add(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.get(stack.size()-<span class="number">1</span>).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Integer num:stack)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num&lt;ans)ans = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-150-逆波兰表达式"><a href="#Leetcode-150-逆波兰表达式" class="headerlink" title="Leetcode 150.逆波兰表达式"></a>Leetcode 150.逆波兰表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt;stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">for</span> (String str:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;+&quot;</span>.equals(str)&amp;&amp;!<span class="string">&quot;-&quot;</span>.equals(str)&amp;&amp;!<span class="string">&quot;*&quot;</span>.equals(str)&amp;&amp;!<span class="string">&quot;/&quot;</span>.equals(str))&#123;</span><br><span class="line">                stack.push(str);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(str))&#123;</span><br><span class="line">                    stack.push(String.valueOf(a+b));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(str))&#123;</span><br><span class="line">                    stack.push(String.valueOf(a-b));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(str))&#123;</span><br><span class="line">                    stack.push(String.valueOf(a*b));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/&quot;</span>.equals(str))&#123;</span><br><span class="line">                    stack.push(String.valueOf(a/b));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>注意哑结点的构造，很方便！！！</p><h3 id="Leetcode-141-环形链表"><a href="#Leetcode-141-环形链表" class="headerlink" title="Leetcode 141.环形链表"></a>Leetcode 141.环形链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span>head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;slow!=<span class="literal">null</span>)&#123;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-2-两数相加"><a href="#Leetcode-2-两数相加" class="headerlink" title="Leetcode 2.两数相加"></a>Leetcode 2.两数相加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>, tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> l1 != <span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> l2 != <span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-206-反转链表"><a href="#Leetcode-206-反转链表" class="headerlink" title="Leetcode 206.反转链表"></a>Leetcode 206.反转链表</h3><p>递归做法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)<span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-92-反转链表2"><a href="#Leetcode-92-反转链表2" class="headerlink" title="Leetcode 92.反转链表2"></a>Leetcode 92.反转链表2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="comment">// 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点</span></span><br><span class="line">        <span class="comment">// 建议写在 for 循环里，语义清晰</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            rightNode = rightNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 3 步：切断出一个子链表（截取链表）</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> rightNode.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：切断链接</span></span><br><span class="line">        pre.next = <span class="literal">null</span>;</span><br><span class="line">        rightNode.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 4 步：同第 206 题，反转链表的子区间</span></span><br><span class="line">        reverseLinkedList(leftNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 5 步：接回到原来的链表中</span></span><br><span class="line">        pre.next = rightNode;</span><br><span class="line">        leftNode.next = curr;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 也可以使用递归反转一个链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Leetcode-138-随机链表的复制"><a href="#Leetcode-138-随机链表的复制" class="headerlink" title="Leetcode 138.随机链表的复制"></a>Leetcode 138.随机链表的复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Node,Node&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(head))&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(head.val);</span><br><span class="line">            map.put(head,newNode);</span><br><span class="line">            newNode.next = copyRandomList(head.next);</span><br><span class="line">            newNode.random = copyRandomList(head.random);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-19-删除链表的倒数第N个节点"><a href="#Leetcode-19-删除链表的倒数第N个节点" class="headerlink" title="Leetcode 19.删除链表的倒数第N个节点"></a>Leetcode 19.删除链表的倒数第N个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        ArrayList&lt;ListNode&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); </span><br><span class="line">        <span class="keyword">while</span>(currentNode!=<span class="literal">null</span>)&#123;</span><br><span class="line">            nodes.add(currentNode);</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nodes.size();</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">        currentNode = pre;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;num-n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode.next=currentNode.next.next;</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-82-删除排序链表中的重复元素2"><a href="#Leetcode-82-删除排序链表中的重复元素2" class="headerlink" title="Leetcode 82.删除排序链表中的重复元素2"></a>Leetcode 82.删除排序链表中的重复元素2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.val == cur.next.next.val) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> cur.next.val;</span><br><span class="line">                <span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.next.val == x) &#123;</span><br><span class="line">                    cur.next = cur.next.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-61-旋转链表"><a href="#Leetcode-61-旋转链表" class="headerlink" title="Leetcode 61.旋转链表"></a>Leetcode 61.旋转链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">rotateRight</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        ArrayList&lt;ListNode&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dumbNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">111</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            nodes.add(cur);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nodes.size();</span><br><span class="line">        <span class="keyword">if</span> (num==<span class="number">0</span>)<span class="keyword">return</span> head;</span><br><span class="line">        k = k%num;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">0</span>)<span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preOrder</span> <span class="operator">=</span> num-k-<span class="number">1</span>;</span><br><span class="line">        cur = dumbNode;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;=preOrder;i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">preNode</span> <span class="operator">=</span> cur;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span>preNode.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> next;</span><br><span class="line">        <span class="keyword">while</span>(last!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (last.next==<span class="literal">null</span>)<span class="keyword">break</span>;</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line">        dumbNode.next = next;</span><br><span class="line">        last.next = head;</span><br><span class="line">        preNode.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> dumbNode.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leetcode-146-LRU缓存"><a href="#Leetcode-146-LRU缓存" class="headerlink" title="Leetcode 146.LRU缓存"></a>Leetcode 146.LRU缓存</h3><p>直接继承<code>LinkedHashMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>哈希+双链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">(<span class="type">int</span> _key, <span class="type">int</span> _value)</span> &#123;key = _key; value = _value;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> DLinkedNode head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 使用伪头部和伪尾部节点</span></span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 key 不存在，创建一个新的节点</span></span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>(key, value);</span><br><span class="line">            <span class="comment">// 添加进哈希表</span></span><br><span class="line">            cache.put(key, newNode);</span><br><span class="line">            <span class="comment">// 添加至双向链表的头部</span></span><br><span class="line">            addToHead(newNode);</span><br><span class="line">            ++size;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="comment">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class="line">                <span class="type">DLinkedNode</span> <span class="variable">tail</span> <span class="operator">=</span> removeTail();</span><br><span class="line">                <span class="comment">// 删除哈希表中对应的项</span></span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                --size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(DLinkedNode node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DLinkedNode <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">res</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于动态规划/性价比/背包问题的思考</title>
      <link href="/2024/06/24/%E5%85%B3%E4%BA%8E%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E6%80%A7%E4%BB%B7%E6%AF%94%E9%97%AE%E9%A2%98%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2024/06/24/%E5%85%B3%E4%BA%8E%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E6%80%A7%E4%BB%B7%E6%AF%94%E9%97%AE%E9%A2%98%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="关于动态规划-性价比-背包问题的思考"><a href="#关于动态规划-性价比-背包问题的思考" class="headerlink" title="关于动态规划&#x2F;性价比&#x2F;背包问题的思考"></a>关于动态规划&#x2F;性价比&#x2F;背包问题的思考</h1><p>01背包本质上就可以用空间换时间，动规本质上也是那空间换时间，本身也就是一个贪心算法，所以<br>01背包&lt;–&gt;贪心&lt;–&gt;动态规划</p><p>如果说是0-1背包问题，需要逆序更新，原因是东西只有一个，不能影响之前的部分</p><p>如果是东西有无数个，则直接顺序更新</p><p>如果东西是牛奶之类的，有性价比，并且可以买非整数数量的，可以退化为贪心来做，结构体：数量，价格，性价比，sort一下就完事儿了。</p><p>讲究序列（排列问题），先遍历背包，不要求序列（组合问题），先遍历物品</p><p>滚动数组</p><p>另外，0-1背包要求倒序，若要求组合而非排列，即为先物品，再背包，且倒顺序，滚动数组添加</p><p>而且，如果是算有多少种，直接加就行,dp[0]&#x3D;1，其他为0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[j]+=dp[j-nums[i]]</span><br><span class="line">    <span class="comment">//这里怎么去理解呢，会导致重复吗？</span></span><br><span class="line">    <span class="comment">//不会重复</span></span><br></pre></td></tr></table></figure><p>如果是要算最多&#x2F;最少，还要min和max比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-nums[i]]+value[i])</span><br></pre></td></tr></table></figure><p>[(425条消息) 背包问题（背包九讲）_你好世界wxx的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_42638946/article/details/114028588?ops_request_misc=%7B%22request_id%22:%22167933155516800186567314%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=167933155516800186567314&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-6-114028588-null-null.142%5Ev74%5Epc_new_rank,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98">https://blog.csdn.net/weixin_42638946/article/details/114028588?ops_request_misc=%7B%22request%5Fid%22%3A%22167933155516800186567314%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=167933155516800186567314&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-6-114028588-null-null.142^v74^pc_new_rank,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=01背包问题</a> 凑整&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by WXX on 2021/2/24 14:36</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v[i]; j--) <span class="comment">//倒叙</span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by WXX on 2021/2/24 15:21</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = v[i]; j &lt;= m; j++)<span class="comment">//顺序</span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by WXX on 2021/2/24 16:07</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N], s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  <span class="comment">// 先循环物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)  <span class="comment">// 再循环容量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++)  <span class="comment">// 最后循环决策</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研夏令营他人经验总结</title>
      <link href="/2024/06/24/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%BA%90/"/>
      <url>/2024/06/24/%E4%BF%9D%E7%A0%94%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="保研夏令营"><a href="#保研夏令营" class="headerlink" title="保研夏令营"></a><strong>保研夏令营</strong></h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h2><ul><li>CSP，最好300+？（<strong>对于北航有效</strong>）</li><li>报名一般5月开始，联系老师建议4月</li></ul><h2 id="入营"><a href="#入营" class="headerlink" title="入营"></a><strong>入营</strong></h2><ul><li>主要看<strong>成绩</strong>，<strong>高质量科研</strong>成果加分，实习经历、获奖<strong>无用</strong>，入营后成绩影响不大（rank1可加<strong>印象分</strong>）——郑博文</li><li>清北上交学硕rank1都不一定进得去</li><li>都留给本校学生了</li><li>复旦卡rank1</li><li>南大比较海rank5&#x2F;6好像就行</li><li>中科大有点歧视非计科出身，软院入营看运气</li><li>自动化所要rank1&#x2F;2</li><li>计算所联系老师</li><li>清深热门专业也比较难入</li><li>其他方向还好</li><li>北大整个都是联系老师流的</li><li>浙大夏令营没有学硕，就不说了</li><li>清华也没学硕，直博也不给offer</li><li>人大高瓴要rank1&#x2F;2        ——郑博文</li></ul><h2 id="机试"><a href="#机试" class="headerlink" title="机试"></a><strong>机试</strong></h2><ul><li>非常不推荐力扣（不需要自己设计数据结构、不需要自己处理输入输出），不推荐其他语言</li><li>语言：<strong>C++</strong>        平台：<strong>洛谷、AcWing</strong>        ——郑博文</li><li>狠抓，因为很多学校都因为这个初筛，人工智能机试卷中卷，尽量现在就连起来  leetcode（主要看思想） pat要相对难一点，重点！！！要看输入输出；在保研成绩稳的情况下，准备机试（我摔了很多次的地方一定要在强调很多遍） 数据结构——刘欣宇</li><li>计算所机试vipl实验室如果用c++的话  不能调用stl库  考的也就是用c实现了  其他的都是可以调用库的——刘欣宇</li><li>有一本王道机试指南  你可以找找电子版  里面题很经典 前面的比较简单  尽量早点过  后面图论也比较容易考，算法里面很爱考贪心  动态规划，你也可以看看时间函数  我遇到过两次机试  是考时间的  题目大概是  上班打卡，下班也要打卡，打卡方式有很多种，但是都是同一个人的，这个人会进出公司，看谁累计上班时间长 ——刘欣宇</li></ul><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a><strong>笔试</strong></h2><ul><li>看是计算机学院还是ai学院，数据结构比较重视，其他三门专业课主要看知识点，数据结构刷了一本王道        ——郑博文</li><li>大多数学校没有笔试，南大、计算所有，南大难，考底层，计算所  有单独的数学考试（他还考了少量的微积分  极少极少）——刘欣宇</li></ul><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li>408和数学也要复习 面试会问你，408里面 数据结构》计网》操作系统  计组</li><li>先看数据结构  数学（线代很爱问正定矩阵  概率论很爱问大数定律和中心极限定理） 然后在看计网 os ，计组基本上没问——刘欣宇</li></ul><h2 id="科研"><a href="#科研" class="headerlink" title="科研"></a><strong>科研</strong></h2><ul><li>最好找个<strong>外校</strong>的实验室，<strong>计院</strong>的也行，本校实验室不算实习，但可以让老师帮挂公司</li><li>一定要<strong>高质量</strong>科研成果        ——郑博文</li></ul><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><ul><li>突然想起来  心态也很重要  有可能夏令营啥也没拿到  或者只有一个  但是别慌 预推免还有  预推免先都报上  如只要能面试  就有很大概率候补到  不要全都选很好的专业  很容易落得一场空  坚信  只要我面试了 肯定会有候补到的时候；今年浙软  南大计算机  北航计算机 国防科大都快被鸽穿了 ——刘欣宇</li></ul><h2 id="一些文章链接"><a href="#一些文章链接" class="headerlink" title="一些文章链接"></a>一些文章链接</h2><p><a href="https://blog.csdn.net/mengwuyaaa/article/details/82918032?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-82918032-blog-125315403.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-82918032-blog-125315403.pc_relevant_vip_default&utm_relevant_index=2">https://blog.csdn.net/mengwuyaaa/article/details/82918032?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-82918032-blog-125315403.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-82918032-blog-125315403.pc_relevant_vip_default&amp;utm_relevant_index=2</a></p><h1 id="经验贴的一些阅读"><a href="#经验贴的一些阅读" class="headerlink" title="经验贴的一些阅读"></a>经验贴的一些阅读</h1><h2 id="人品"><a href="#人品" class="headerlink" title="人品"></a>人品</h2><p>导师人品最重要，千万不要去坑导直博，即使是清北的。</p><p>可以先去导师评价网找找，目前可用的有 <a href="https://link.zhihu.com/?target=https://www.yankong.org/">研控</a> 、<a href="https://link.zhihu.com/?target=https://www.daoshipingjia.xyz/">硕博导师评价网</a>，另外我这里还有导师评价网后台数据库 excel（包含全国各大院校 1 万条导师评价信息），以及上交电院导师评价，不方便发，需要的话可以私戳。</p><p>然后就是在百度、谷歌上搜，还可以去问组内 &#x2F; 隔壁组学长学姐。如何联系学长学姐？<strong>一种方法是找本校保研到该校或在绿群找到保研到该校的学长学姐，请他介绍介绍；另一种方法是通过导师的论文，推测出学长学姐的名字，然后在论文网站里找邮箱发邮件问。注意要兼听则明</strong></p><h2 id="专业课怎么复习"><a href="#专业课怎么复习" class="headerlink" title="专业课怎么复习"></a>专业课怎么复习</h2><p>如果时间不是很充裕，不要全面撒网，每门课要复习的也就一二十个常见问题，找找保研 &#x2F; 考研面试重点问题来看看就行。</p><p>要复习的课有：</p><ul><li>数学：线性代数、概率论、高数</li><li>计算机：数据结构、计组、操作系统、计网、算法、数据库、软件工程、编译原理、编程语言</li><li>人工智能：机器学习、深度学习</li></ul><p>注意这些课不必完全复习，挑几门和研究方向相关的看看重点就行，比如对于 AI 方向，最重要的是数学、数据结构、人工智能。</p><h2 id="没有科研经历咋办"><a href="#没有科研经历咋办" class="headerlink" title="没有科研经历咋办"></a>没有科研经历咋办</h2><p>和老师方向一致的科研经历非常重要，即使没有产出论文，也是巨大的加分项，这就像去找工作，实习经历是巨大的加分项一样。</p><p>如果你现在是大三下学期开学之前的话，可以去联系本校老师进实验室做科研。如果已经很晚了，如六月份了，可以去找一些论文，复现或者读懂代码，掌握好细节，包装成一个项目，耗时半个月左右，前提是不能被问穿，得答得上来。</p><p>一段科研经历，老师更关注你做了什么，而不是这个科研做的结果。要讲好一个项目，需要讲好 motivation（为什么做）、method（做了什么）、result（做得咋样）、contribution（你做了啥），其中最重要的是 contribution 和 motivation。不要说得太直白，尽量学术化一点。（可以参考顶会论文的 Introduction，看看怎样讲好一个故事）。老师也非常喜欢问你的科研项目里面用到的东西的底层原理，而这些东西你可能就是在 PyTorch 里面调了个库，需要注意一下。</p><p>如果有论文，论文的内容、细节一定要清楚，还有 EI 会议之类的水文不建议写在简历，如果被问穿了，可能是减分项</p><h2 id="要准备哪些文书"><a href="#要准备哪些文书" class="headerlink" title="要准备哪些文书"></a>要准备哪些文书</h2><p>文书材料的模板后续我会整理发出来。</p><ul><li>简历：推荐 <a href="https://link.zhihu.com/?target=https://www.wondercv.com/">超级简历WonderCV</a> ，内容写保研要素中比较重要的就行，包括：联系方式、学校、专业、成绩、排名、获奖、项目、数学、编程、英语、读博意向等，自己的劣势部分不要往上面写。</li><li>个人陈述：准备 1000 字、2000 字的，就是简历的扩充，重点是讲做过的项目，研究规划等。</li><li>推荐信：准备 2 封教授推荐信即可，这东西没人看，注意复旦、北航等学校需正教授推荐信，清华、复旦等学校要求老师本人在线填写或用本人的邮箱发送推荐信。</li><li>套磁信：既要简洁了当，直言主题，又不能不客套。edu邮箱比较正式，gmail有邮件追踪插件mailtrack。</li><li>PPT：相当于把简历讲出来，大部分的篇幅应该讲项目，和学习无关的不要讲太多。</li><li>各种证明材料：成绩单、排名证明、获奖证书、身份证、学生证、英语证明，都扫描成pdf。</li></ul><h2 id="一些有用的网站"><a href="#一些有用的网站" class="headerlink" title="一些有用的网站"></a>一些有用的网站</h2><ul><li>邮件追踪：Gmail 有个插件 mailtrack，可以看到你发的邮件什么时候被老师打开了，打开了几次。</li><li>查老师学术水平：<a href="https://link.zhihu.com/?target=https://scholar.google.com/">Google Scholar</a>、<a href="https://link.zhihu.com/?target=https://dblp.org/">dblp</a>、<a href="https://link.zhihu.com/?target=https://www.aminer.cn/">AMiner</a>、<a href="https://link.zhihu.com/?target=https://csrankings.org/%23/index?all&cn">CSRankings</a>、<a href="https://link.zhihu.com/?target=https://www.semanticscholar.org/">Semantic Scholar</a></li><li>查国家自然科学基金：<a href="https://link.zhihu.com/?target=https://www.ceshigo.com/Nsfc/fund">测试狗基金查询</a>、<a href="https://link.zhihu.com/?target=https://grants.nsfc.gov.cn/egrantindex/funcindex/prjsearch-list">基金委查询系统</a></li><li>导师评价网：<a href="https://link.zhihu.com/?target=https://www.yankong.org/">研控</a> 、<a href="https://link.zhihu.com/?target=https://www.daoshipingjia.xyz/">硕博导师评价网</a></li><li>机试刷题平台：<a href="https://link.zhihu.com/?target=https://www.acwing.com/">AcWing</a></li><li>夏令营 &#x2F; 预推免开营信息：<a href="https://link.zhihu.com/?target=http://pc.baoyanwang.com.cn/">保研信息网</a></li><li>中科院计算所各实验室介绍：<a href="https://link.zhihu.com/?target=http://cskaoyan.com/thread-237791-1-2.html">中科院计算所实验室情况简要介绍-王道论坛</a></li></ul><h1 id="清北华五院系分析"><a href="#清北华五院系分析" class="headerlink" title="清北华五院系分析"></a>清北华五院系分析</h1><h2 id="1-清华大学"><a href="#1-清华大学" class="headerlink" title="1 清华大学"></a>1 清华大学</h2><p>清华的 offer 基本在预推免发，夏令营发 offer 的只有叉院、深研院。除了软件、深研院外，外校基本只能拿直博。夏令营各院系自己组织，可以报多个，但有些院系没有夏令营。预推免是学校系统上报，最多报两个。</p><ul><li>计算机系（贵系）：国内计算机 top1，需要尽早联系导师。开夏令营，但不发 offer，通过机试的，预推免免试。机试很难，3 道编程题，难度和 CSP 第 3-4 题差不多。</li><li>自动化系（雷系）：有做 AI 的老师，注意自动化系的硕士分三种，学硕、大数据工程（要去贵州）、校企联培（要去企业）。</li><li>叉院：国内 bar 最高的学院，至少要 985 rk1 + 在投顶会 &#x2F; ACM，6 月初就开营。</li><li>软件学院：没有夏令营，基本上是专硕，强com，主要看机试成绩，机试难度中等。</li><li>网研院：相当于贵系网安专业，难度比贵系低。</li><li>深研院：有计算机技术、人工智能、大数据、TBSI 四个方向，TBSI 是学硕，其他都是专硕，计算机技术机试很难，人工智能最卷，TBSI 要求六级 500+。</li><li>高等研究院：有 msra 校企联培博士，导师郭百宁，但是好像没啥人知道，可以早点联系捡漏。</li></ul><h2 id="2-北京大学"><a href="#2-北京大学" class="headerlink" title="2 北京大学"></a>2 北京大学</h2><p>北大的 offer 大多是夏令营发出去，预推免相当于补录了，可以报多个院系。</p><ul><li><p>计算机学院：超弱 com，完全取决于老师要不要你，夏令营无机试，面试走过场，需要尽早联系导师，去进组实习，bar 比贵系低，985 前 5% 就可以试试。夏令营之后，软件所一般鸽的比较多，还有外校基本只能拿直博。</p></li><li><p>智能学院：原信科智能所，和计算机学院的情况差不多。</p></li><li><p>软微：基本全是专硕，纯就业向，强com，入营主要看排名，不过据说从今年开始，也要做科研了。</p></li><li><p>深研院：基本全是学硕，弱com，不过坑导较多。</p></li><li><p>软微：</p><ul><li><p>不得不说北京真的是大城市，这是我第一次来北京，真的感受到了首都的魅力。</p><p>   复试分为两个部分：手撕算法题 + 面试</p><pre><code>  手撕算法题部分，当天面试的所有人都在一起写题，一共有三道题，选其中一道题手撕代码就可以了，难度大概是 easy 到 medium 之间吧，手撕快排也有，大模拟也有。  面试部分，首先你要给每位老师发你的简历，老师看到我是湖大的，就要我英文描述一下湖大的风景，其实我早有准备，当时背的是介绍长沙，我就活用了。然后老师让我抽一道基础题，我抽到了数据库系统，其实很不巧我就数据库没怎么复习，但是还是凭自己的记忆说了一通，然后老师还问了数据库系统和数据库管理系统的区别，我记得他说的是 DBS 和 DBMS 的区别，当时我秒懂，DBMS 我会啊，所以我又说了一通。  接着老师会拿出刚刚手撕的算法题问你觉得怎么样，写得对不对，你要尽可能展现出你的算法功底就好了，比方说一个很简单的求平方和，没有给你数据范围时，其实是一个大数乘法 + 大数加法。然后老师开始问我项目了，大概问了我的代码量和实现难点。</code></pre></li><li></li></ul></li></ul><h2 id="3-中科院"><a href="#3-中科院" class="headerlink" title="3 中科院"></a>3 中科院</h2><p>中科院各所差别极大，所内各组也差别极大，所谓“强组清北，弱组211”。中科院的师生比很高，一般硕导一年 0-1 个硕士名额，博导一年1硕1博，中科院可以报任意多个所（多准备几个邮箱多注册几个号就行）。计算机相关的研究所有：</p><p>表格 还在加载中，请等待加载完成后再尝试复制</p><p>各所基本是夏令营就招完学生，预推免相当于补录，另外，国科大计算机学院、人工智能学院也招生（比两所容易一些），导师基本是两所的。最后再说一下，虽然两所的实力要略强于华五，如果你以后从事专业相关的事情（如：学术届、企业技术岗），可以来两所；但如果以后从事非专业相关的事情（如：考公），更建议去华五。</p><ul><li>计算所：体系结构方向亚洲第一，AI 方向实力也很强，超弱com，你甚至没入营都可以拿 offer，有霸面机制，即如果你没有入营，老师也可以邀请你来面试，和入营的没区别。计算所是分组来考核的，所里不管，牛组竞争非常激烈（如寒武纪、龙芯、vipl等）。体系结构和 AI 的大牛很多，就不细说了。还有要注意很多组要求博士延毕一年。</li><li>自动化所：体量很大，光模式识别国重就 100 多位老师，AI 方向特别 CV 很强，模式识别国重有很多 AI 大牛。强 com，bar 985 前 5，以“未来的邀约”闻名于保研圈。</li><li>软件所：有计算机科学国重（软件与理论方向），另外中文信息实验室的孙l、韩xp老师也比较强（NLP 方向）。</li><li>信工所：有网安国重，有个 CV 组也很强（操xc组），不过，操老师去年跳槽到中山当院长了。</li><li>神仙院：深圳先进技术研究院，下面的数字所有个 MM Lab 很强，和港中大那个 MM Lab 、商汤、上海浦江实验室关系密切，负责人是乔y老师（3万引），另外组里董c老师也是大牛。</li></ul><h2 id="4-上海交通大学"><a href="#4-上海交通大学" class="headerlink" title="4 上海交通大学"></a>4 上海交通大学</h2><p>招生主要在夏令营，预推免招的少。注意上交电院博士毕业是出了名的难，据说基本 6 年起步。密西根是单独报名，其他院系在学校系统上报名，只能报一个。</p><ul><li>计算机系、网安：上交计算机系像贵系那样，各方向都有，都比较强。硕士非常难，2021 年非华五只录了 4 个，有机试。直博入营容易，没有机试，关键是要找到导师接收（直博没有导师接收，拿了优营也没用）。上交牛导很多，AI 方向有几个年轻老师特别火，如卢cw、张wn、张qs、严jc 等。</li><li>软件学院：国内最强的软件学院，以 ipads实验室（分布式系统方向）闻名，机试听说是开发软件，比较硬核。</li><li>网安学院：比计算机系要容易。</li><li>密西根学院：想去上交，密西根最容易，不过学费贵，导师一般。</li></ul><h2 id="5-浙江大学"><a href="#5-浙江大学" class="headerlink" title="5 浙江大学"></a>5 浙江大学</h2><p>浙大的计算机图形学国内第一，计算机学院体量也非常大。浙大只能报一个学院。</p><ul><li>计算机学院：夏令营只有直博，要去做一个多月的项目，内容由报名老师指定，8月下旬，每个博导可以推荐 1 名学生（院士 2 名），进入学院答辩环节（走过场）。浙大大量名额（含所有硕士名额）在预推免，不过要跟浙大本校竞争。CAD&amp;CG 国重里面有很多 CG、CV 大牛。</li><li>软件学院：在宁波，纯就业向，夏令营入营点击就送，千人海王营，考核要做项目，优营容易拿，但没什么用，还是要参加预推免，预推免有机试。</li><li>工程师学院：夏令营、预推免都有，比计算机学院容易。</li><li>国际联合学院：在嘉兴市海宁市（县级市），不太了解，招计算机专业的学生。</li></ul><h2 id="6-复旦大学"><a href="#6-复旦大学" class="headerlink" title="6 复旦大学"></a>6 复旦大学</h2><p>复旦的计算机是 B+，但是人工智能方向很强，学校 title 好，魔都位置好。复旦只能报一个学院。</p><ul><li>计算机学院：发放 offer 夏令营：预推免 &#x3D; 1 : 2，夏令营的 bar 巨高，985 一个专业只能入一个。有机试但不算分。NLP 组（黄邱张）很强，CV 方向姜yg组、薛xy组也比较强。</li><li>大数据学院：发统计学或金融学位证，难度不比计算机学院低，对数学要求高。</li><li>工研院：难度比计算机学院低。</li><li>类脑智能研究院：有部分老师做 AI 和生物交叉。</li></ul><h2 id="7-南京大学"><a href="#7-南京大学" class="headerlink" title="7 南京大学"></a>7 南京大学</h2><p>南大三个学院都可以报，但只能入一个，海王营，入营后有线上笔试，考408等专业课，没有机试，南大是超强 com。</p><ul><li>计算机系：软件所非常强，软件所在学院夏令营前有自己办的夏令营，另外 MCG 组的王lm老师是南大 CV 最强的老师，NLP 组黄sj老师也比较强。</li><li>人工智能学院：lamda（周zh组）非常强，主要是做机器学习、数据挖掘的， lamda 在学院夏令营前也有自己办的夏令营，lamda 一共两轮面试，第一轮学长面，第二轮报考老师面。注意拿了 lamda offer 后，还需要人工智能学院优营才能录取，南大的 com 非常强。</li><li>软件学院：比 CS、AI 容易一些，纯就业型。</li></ul><h2 id="8-中国科学技术大学"><a href="#8-中国科学技术大学" class="headerlink" title="8 中国科学技术大学"></a>8 中国科学技术大学</h2><p>中科大没有直博，全是硕士，系统里可以报三个志愿，只能入一个，基本上只有一志愿有用，中科大是弱 com。还有入营中科大后会收到入营大礼包！！！</p><ul><li>计算机学院：入营歧视软件专业，我校计算机前5%可入，软件只能入1%，没有预推免。AI方向做数据挖掘的多，几乎没有做CV的（都在自动化系、电子系）。BDAA（陈eh组）很强，陈eh老师是杰青，组里还有刘q、连df两位优青，人好学术好。网络方向李xy（ACM &#x2F; IEEE fellow）组很牛，组里张yy老师也是IEEE fellow，做智能感知的。另外计算机学院还有网红教授张l（逃）</li><li>自动化系（10系）：自动化系和电子系虽然同属信息学院，但招生是分开的，必须导师推荐才能入营，预推免有少量名额。CV 方向的张tz，查zj老师很强，都是优青+万引。</li><li>电子系（6系）：虽然叫电子系，其实很多老师是做人工智能的，大牛很多。何xn组（巨牛，30岁，2.2万引）非常强，何老师组里两位小老板也很强，王x（7k引）、冯fl（4k引），都是30岁出头。电子系AI方向还有吴f（院士候选人）、李hq、张yd等杰青，周wg、刘d、谢ht、王j等优青，实力非常强。</li><li>大数据学院：就是计算机、自动化、电子的老师，一般科大本校喜欢拿大数据学院名额，所以外校入营难，没有预推免。</li><li>网安学院：何xn的两个小老板都挂在网安学院，这里甚至还能找到潘建伟。</li><li>软件学院：一共就几个保研招生名额，主要招考研。</li><li>苏州研究院：比本部简单一些，值得一提的是，中科院计算所奇迹组的周sh老师（IEEE fellow，万引，医学影像大牛）全职来中科大，在这里招生物医学工程专业的学生（医学 CV 方向）。</li><li>先研院：比本部简单一些。</li><li>科学岛：中科院合肥物质研究院，发中科大毕业证，入营点击就送，最容易上岸华五的地方。</li></ul><h2 id="9-中国人民大学"><a href="#9-中国人民大学" class="headerlink" title="9 中国人民大学"></a>9 中国人民大学</h2><p>人大在中关村，位置好，学术强的老师大多在高瓴，强 com。人大信息和高瓴可以都报，也可以都入营，</p><ul><li>信息学院（王老吉）：夏令营 4 月 20 号左右就开放报名了，然后愣是 6 月 29 才发入营名单，官网通告栏一直是王老吉奖学金获奖公示，绿群群友们天天去刷学院官网都等不到入营名单，故称为王老吉学院。王老吉招生人数少，之前入营也少，bar 很高（学硕卡 985 rk2 左右），但今年是海王营了。王老吉数据库方向比较强，无预推免。</li><li>高瓴人工智能学院（加多宝）：王老吉的 hxd 当然是加多宝了。高瓴的老师基本都是做 AI 的（偏信息检索、数据挖掘），没有什么比较差的，下限很高，都做学术。高瓴只有学硕和直博，都在夏令营招生，没有预推免，鸽子比较多，一般入营即 offer，学硕 bar 挺高，可能 985 2% 左右，直博低一些。文jr、徐j等老师都是 msra 过来的，IR 大牛，严r老师是北大王选所过来的，NLP 大牛，还有几个姚班毕业的 AP 也很强。高瓴最大的劣势就是人大这个 title 不够好了吧。</li></ul><h2 id="10-其他学校的部分AI牛组"><a href="#10-其他学校的部分AI牛组" class="headerlink" title="10 其他学校的部分AI牛组"></a>10 其他学校的部分AI牛组</h2><p>我保研过程中了解到的其他学校的一些 AI 牛组（还有很多没列上来）：</p><p>南开大学程mm组（CV）、哈工大SCIR实验室（刘t组，NLP）、北航VR国重（CV）、厦门大学mac实验室（纪rr组，CV）、东南大学palm实验室（耿x组）、中山大学郑ws组（CV）、华科白x组（OCR）、上科大虞jy组（CV）、西湖大学李zq组（原自动化所大牛）、西湖大学张y组（NLP）。</p>]]></content>
      
      
      <categories>
          
          <category> 经验贴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 夏令营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（一）认识分布式系统</title>
      <link href="/2024/06/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/06/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="认识分布式系统"><a href="#认识分布式系统" class="headerlink" title="认识分布式系统"></a>认识分布式系统</h1><h2 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1 什么是分布式系统"></a>1.1 什么是分布式系统</h2><p>定义：</p><p>分布式系统指的是由多台计算机组成的系统，这些计算机通过网络连接起来，协同工作以实现共同的目标。在分布式系统中，各个计算机之间相互独立，同时也需要协同工作来处理大量的数据和任务。分布式系统可以包括不同类型的计算机，包括服务器、台式机、移动设备等等。</p><p>分布式系统的一个主要特点是其高度的可扩展性，可以随着需求增长而增加计算机的数量。分布式系统还具有高可靠性，因为即使其中一个计算机发生故障，系统也可以继续运行，不会因为单一点的故障而完全崩溃。分布式系统还可以提供更好的性能和更快的响应时间，因为可以将任务分配给多个计算机并行处理，而不是依靠单个计算机来处理所有任务。</p><p>分布式系统的应用非常广泛，包括云计算、大数据处理、分布式数据库、分布式存储系统、分布式搜索引擎等等。</p><h2 id="1-2-为什么需要分布式系统"><a href="#1-2-为什么需要分布式系统" class="headerlink" title="1.2 为什么需要分布式系统"></a>1.2 为什么需要分布式系统</h2><p>分布式系统是由多个独立计算机组成的网络，这些计算机通过网络互相通信和协调，共同完成某些任务或提供某些服务。分布式系统之所以重要，是因为它可以带来以下几个好处：</p><ol><li>可靠性：分布式系统可以提高系统的可靠性，因为它可以在某个节点或多个节点发生故障的情况下继续工作。</li><li>可扩展性：分布式系统可以通过增加计算机节点来扩展系统的处理能力，从而应对更大的工作负载。</li><li>高性能：分布式系统可以将任务分割成多个子任务，并在多个节点上并行处理，从而提高系统的处理速度。</li><li>负载均衡：分布式系统可以将负载分配到多个节点上，避免某个节点过度负载的情况发生，从而提高系统的稳定性和可用性。</li><li>数据共享：分布式系统可以让不同节点之间共享数据，从而使得数据更容易被访问和处理。</li></ol><p>总之，分布式系统可以提高系统的可靠性、可扩展性、高性能和负载均衡能力，使得系统更加稳定和高效。因此，在大规模应用中，分布式系统已成为一种必要的技术手段。</p><h2 id="1-3-分布式系统的示例"><a href="#1-3-分布式系统的示例" class="headerlink" title="1.3 分布式系统的示例"></a>1.3 分布式系统的示例</h2><h3 id="1-3-1-搜索引擎"><a href="#1-3-1-搜索引擎" class="headerlink" title="1.3.1 搜索引擎"></a>1.3.1 搜索引擎</h3><p>DNS是一个将IP地址和域名相互映射的分布式数据库，主要特点包括去中心化、可扩展性和健壮性。</p><p>搜索引擎背后的分布式基础设施：</p><ul><li>一个全球化、巨大的多数据中心（一个中心上万台物理机）</li><li>一个分布式文件系统（GFS）</li><li>大规模结构化数据的存储系统（Bigtable）</li><li>分布式锁服务(chubby)</li><li>并行和分布式计算的编程模式（MapReduce）</li><li>分布式数据库（Spanner）</li></ul><h3 id="1-3-2-加密货币"><a href="#1-3-2-加密货币" class="headerlink" title="1.3.2 加密货币"></a>1.3.2 加密货币</h3><p>加密货币和分布式系统密不可分。事实上，加密货币的核心技术就是基于分布式系统。</p><p>加密货币使用的是一种称为区块链的分布式账本技术。这种技术将账本数据分散存储在网络上的多个节点中，每个节点都有完整的账本副本，并通过加密算法进行验证和保护。这种分布式存储和验证方式使得区块链上的交易记录无法被篡改或删除，从而确保了加密货币的安全性和去中心化特点。</p><p>此外，分布式系统还能够实现去中心化的交易和转账，以及实现智能合约等功能。智能合约是一种自动执行的计算机程序，可以自动化完成各种事务，例如支付、转账、投票等。</p><p><a href="https://blog.csdn.net/weixin_40413961/article/details/122639770?ops_request_misc=%7B%22request_id%22:%22168554858916800213023799%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168554858916800213023799&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122639770-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&spm=1018.2226.3001.4187">(458条消息) 区块链技术必杀技之——智能合约_区块链智能合约_jeff-y的博客-CSDN博客</a></p><p>总的来说，加密货币和分布式系统密切相关，加密货币的实现离不开分布式系统的技术支持，同时分布式系统也因为加密货币的需求而得到了广泛的应用和发展。</p><p>加密货币中的区块链技术使用了Merkle Tree来实现快速验证交易的有效性。</p><p>Merkle Tree是一种树状结构，它将数据分成小块并对这些块进行哈希运算。每个哈希值代表了它所对应数据块的内容。然后再将这些哈希值进行哈希，得到新的哈希值，称为父节点。父节点也可以再和其他父节点一起哈希，形成新的父节点，最终形成根节点。这个过程就像一棵树一样，因此被称为Merkle Tree。</p><p>在加密货币的交易验证中，Merkle Tree被用来快速验证某个交易是否属于某个区块。每个区块中的所有交易数据被组织成Merkle Tree结构，根节点的哈希值被包含在区块头中。当其他节点需要验证某个交易是否属于该区块时，只需要验证该交易的哈希值与Merkle Tree中的对应哈希值是否匹配，如果匹配，则该交易有效，否则无效。</p><p>通过Merkle Tree的结构，交易数据可以被高效地组织和验证，从而提高了加密货币系统的安全性和效率。</p><h2 id="1-4-分布式系统的挑战"><a href="#1-4-分布式系统的挑战" class="headerlink" title="1.4 分布式系统的挑战"></a>1.4 分布式系统的挑战</h2><p>网络延迟问题，部分失效问题，时钟问题</p><h3 id="1-4-1-网络延迟问题"><a href="#1-4-1-网络延迟问题" class="headerlink" title="1.4.1 网络延迟问题"></a>1.4.1 网络延迟问题</h3><p>分布式系统中的网络延迟是一个常见的问题，特别是在跨越不同的地理位置和数据中心时。网络延迟指的是从一个节点发送消息到另一个节点所需的时间。这个时间可以受到多种因素的影响，包括网络拓扑、带宽、传输协议和网络拥塞等。</p><p>为了降低网络延迟，可以采取以下措施：</p><ol><li>网络拓扑优化：设计一个合理的网络拓扑，使得节点之间的距离尽可能短，减少网络传输所需的时间。</li><li>协议选择优化：选择合适的协议，例如使用TCP&#x2F;IP协议时可以采用TCP快速打开（TCP Fast Open）协议来减少握手时间，或使用UDP协议来减少传输延迟。</li><li>数据压缩优化：对需要传输的数据进行压缩，可以减少数据传输量，从而减少网络传输所需的时间。</li><li>缓存优化：使用缓存技术可以减少对数据的重复访问，从而减少网络传输所需的时间。</li><li>负载均衡优化：使用负载均衡技术可以将请求分散到多个节点上，减少单个节点的负载，从而减少网络传输所需的时间。</li></ol><p>综上所述，网络延迟是分布式系统中的一个重要问题，需要采取多种优化措施来降低延迟，提高系统的性能和可靠性。</p><h3 id="1-4-2-部分失效问题"><a href="#1-4-2-部分失效问题" class="headerlink" title="1.4.2 部分失效问题"></a>1.4.2 部分失效问题</h3><p>分布式系统中的部分失效问题是指在分布式系统中的某些节点或者服务发生故障或失效，而系统的其他部分仍然正常运行。这种情况下，分布式系统需要采取措施来保证系统的可用性和稳定性。</p><p>以下是分布式系统中解决部分失效问题的一些常见方法：</p><ol><li>冗余备份：通过在分布式系统中增加冗余节点或服务来保证系统的可用性。当某些节点或服务失效时，冗余节点或服务可以接管其工作，从而保证系统的正常运行。</li><li>负载均衡：将请求分散到多个节点上，可以减轻单个节点的负担，从而减少故障的发生概率。负载均衡也可以将请求转发到最近的可用节点上，提高系统的性能和可用性。</li><li>异常检测和恢复：当某些节点或服务发生故障时，需要及时检测并采取恰当的措施进行恢复。这可以通过使用异常检测和恢复机制来实现，例如使用心跳检测机制来检测节点或服务是否存活。</li><li>限流和熔断：当某些节点或服务的负载过高时，可以采用限流和熔断机制来保护系统免受过度负载的影响。限流机制可以控制流量的速率，熔断机制可以暂时关闭某些节点或服务，以防止它们的故障影响整个系统的正常运行。</li><li>事务处理和回滚：当某些节点或服务发生故障时，可能会导致分布式事务失败。在这种情况下，需要采取事务处理和回滚机制来恢复故障，保证数据的一致性和可靠性。</li></ol><p>综上所述，分布式系统中的部分失效问题是一个常见的挑战，需要采取多种技术和机制来保证系统的可用性和稳定性。</p><h3 id="1-4-3-时钟问题"><a href="#1-4-3-时钟问题" class="headerlink" title="1.4.3 时钟问题"></a>1.4.3 时钟问题</h3><p>分布式系统中的时钟问题是指由于系统中的节点位于不同的地理位置，所以节点的时钟存在偏差和不同步的问题。时钟偏差和不同步会导致分布式系统中的数据同步、事务处理和协议执行等方面出现问题，从而影响系统的正确性和可靠性。</p><p>以下是分布式系统中解决时钟问题的一些常见方法：</p><ol><li>物理时钟同步：物理时钟同步是通过使用网络时间协议（NTP）或其他时钟同步协议来保证系统中的节点时钟保持同步。这可以减少节点之间的时钟偏差，从而提高系统的可靠性和正确性。</li><li>逻辑时钟：逻辑时钟是一种基于事件顺序的时钟，可以用于跨越不同节点的事件顺序标记。例如，Lamport时钟和向量时钟可以记录事件的发生顺序，并通过比较时间戳来确定事件的先后关系。</li><li>时钟漂移和修正：由于硬件时钟存在漂移，因此需要定期对时钟进行修正。例如，可以使用时间同步协议来校正时钟漂移，或者在节点之间进行时钟校准，从而减少时钟漂移的影响。</li><li>时钟容忍度：时钟容忍度是指在分布式系统中接受的时钟误差范围。节点之间的时钟误差超出容忍度范围时，系统会采取相应的措施来避免时钟问题对系统产生不良影响。</li></ol><p>综上所述，时钟问题是分布式系统中的一个重要挑战，需要采取多种技术和机制来解决。物理时钟同步、逻辑时钟、时钟漂移和修正以及时钟容忍度等技术和机制可以用来解决时钟问题，提高系统的可靠性和正确性。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++刷题</title>
      <link href="/2024/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2024/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><p>[(459条消息) 【C语言】程序运行过程：预处理&#x2F;编译&#x2F;汇编&#x2F;链接_预处理编译汇编链接_慕雪华年的博客-CSDN博客](<a href="https://blog.csdn.net/muxuen/article/details/123227200?ops_request_misc=%7B%22request_id%22:%22168596052316800182799736%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168596052316800182799736&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123227200-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E9%A2%84%E5%A4%84%E7%90%86">https://blog.csdn.net/muxuen/article/details/123227200?ops_request_misc=%7B%22request%5Fid%22%3A%22168596052316800182799736%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168596052316800182799736&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123227200-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=预处理</a> 编译 汇编 链接&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/weixin_54338498/article/details/126953046?ops_request_misc=%7B%22request_id%22:%22168175034116800197040062%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168175034116800197040062&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126953046-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E4%BF%9D%E7%A0%94%E6%9C%BA%E8%AF%95&spm=1018.2226.3001.4187">(443条消息) 保研机试——1基础算法（排序、哈希、模拟（日期、图形、查找、进制、字符串）、递归与分治、贪心）_Yuezero_的博客-CSDN博客</a></p><p>[(425条消息) 数据结构保研面试题整理（自用）_保研数据结构常温问题_乌鸡摸鱼的博客-CSDN博客](<a href="https://blog.csdn.net/m0_52571748/article/details/120505195?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">https://blog.csdn.net/m0_52571748/article/details/120505195?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=数据结构</a> 保研&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-120505195.142^v73^pc_search_v2,201^v4^add_ask,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_53524653/article/details/121522229?ops_request_misc=%7B%22request_id%22:%22168740926216782425172942%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168740926216782425172942&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121522229-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&spm=1018.2226.3001.4187">(463条消息) 插入排序–折半插入排序（来一来，看一看，走过路过，不要错过）_老 胡的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/385907273">P问题、NP问题、NPC问题、NP-hard问题详解 - 知乎 (zhihu.com)</a></p><p>[保研机试整理 - 知乎 (zhihu.com)</p><p>什么时候才考虑用二分答案的技巧？<br>正向求出答案不好入手，求解答案远远没有验证答案简单。</p><p>已知前序后序算中序有多少种：</p><p>[<a href="https://blog.csdn.net/qq_37437983/article/details/79613947">(441条消息) 二叉树遍历（已知前序和后序遍历，求中序遍历的可能的序列数）_已知二叉树的前序遍历和后序遍历_我要出家当道士的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/40915131"></a></p><p><a href="https://blog.csdn.net/yizhiniu_xuyw/article/details/109596961?ops_request_misc=%7B%22request_id%22:%22168707250016800213049573%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168707250016800213049573&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109596961-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%A0%86%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&spm=1018.2226.3001.4187">(462条消息) 堆排序的时间复杂度分析_一只牛_007的博客-CSDN博客</a></p><p>建立索引树：[(462条消息) 2020北航计算机夏令营机试题目个人理解_北航夏令营 机试_四处碰壁嘤嘤怪的博客-CSDN博客](<a href="https://blog.csdn.net/Bernie_double/article/details/118190022?ops_request_misc=%7B%22request_id%22:%22168715279416800185829257%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168715279416800185829257&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-118190022-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%8C%97%E8%88%AA%E5%A4%8F%E4%BB%A4%E8%90%A5">https://blog.csdn.net/Bernie_double/article/details/118190022?ops_request_misc=%7B%22request%5Fid%22%3A%22168715279416800185829257%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168715279416800185829257&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-118190022-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=北航夏令营</a> 机试&amp;spm&#x3D;1018.2226.3001.4187)</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>scanf后，用getchar()吃掉回车</p><p>表示最大 INT_MAX(climits)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc</span></span><br><span class="line"><span class="type">int</span> *nums;</span><br><span class="line">nums=(*<span class="type">int</span>)<span class="built_in">malloc</span>(<span class="number">10</span>*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="comment">//long long int 别用cin cout</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>scanf还会返回成功输入的变量的个数,因此可判定EOF</p><p>Floyd判圈法很吊</p><p>1.lower_bound(v.begin(), v.end(), key)-v.begin()返回有序序列中大于等于key的第一个值的位置<br>2.upper_bound(v.begin(), v.end(), key)-v.begin()返回有序序列中大于key的第一个值的位置<br>3.lower_bound(v.begin(), v.end(), key, greater<int>())-v.begin()返回有序序列中小于等于key的第一个值的位置<br>4.upper_bound(v.begin(), v.end(), key, greater<int>())-v.begin()返回有序序列中小于key的第一个值的位置<br>5.上述四个函数，若无满足条件的值，则返回v.size() </p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br></pre></td></tr></table></figure><h2 id="一些常用的库"><a href="#一些常用的库" class="headerlink" title="一些常用的库"></a>一些常用的库</h2><ol><li>algorithm</li><li>vector</li><li>map</li><li>queue</li><li>iostream</li><li>string</li><li>bits&#x2F;stdc++.h（带上就对了）</li><li>cmath(sqrt之类的)</li><li>climits（INT_MAX INT_MIN）</li></ol><p><strong>STL内置find()复杂度</strong>：<br><code>algorithm的find</code> 复杂度是<code>O(n)</code>，对vector，string等 顺序查询。<br><code>map::find</code> 和 <code>set::find</code> 复杂度是<code>O(logn)</code>，因为map和set底层都是红黑树。</p><hr><h3 id="vector"><a href="#vector" class="headerlink" title="vector:"></a><strong>vector:</strong></h3><p>下面是一些常用的vector方法：</p><ol><li><p><code>push_back</code>：在vector的末尾添加一个元素。</p></li><li><p><code>pop_back</code>：删除vector末尾的一个元素。</p></li><li><p><code>size</code>：返回vector中元素的个数。</p></li><li><p><code>clear</code>：删除vector中所有的元素。</p></li><li><p><code>empty</code>：判断vector是否为空。</p></li><li><p><code>at</code>：返回vector中指定位置的元素。</p></li><li><p><code>front</code>：返回第一个元素。</p></li><li><p><code>back</code>：返回最后一个元素。</p></li><li><p><code>erase</code>：删除vector中指定位置的元素。</p></li><li><p><code>insert</code>：在vector中指定位置插入一个元素或多个元素。</p></li><li><p><code>resize</code>：改变vector的大小。</p></li><li><p><code>reserve</code>：为vector预留一定的空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li><li><p><code>swap</code>：交换两个vector中的元素。</p></li><li><p><code>begin</code>：返回指向vector第一个元素的迭代器。</p></li><li><p><code>end</code>：返回指向vector最后一个元素之后的迭代器。 这些方法能够满足大部分情况下的需求，可以根据具体的使用场景选择合适的方法进行操作。</p></li></ol><p>要取迭代器的值，直接*指针取值</p><p>对于向量(vector)，它是一种支持随机访问的容器，因此<strong>可以直接通过下标访问向量中的元素</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 使用auto关键字定义迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vector不能直接使用sort函数进行排序，需要传入一个迭代器指定排序的范围。修改代码如下：</p><p>sort(v.begin(),v.end(),com);</p><hr><h3 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h3><p>以下是C++中map类的常用方法：</p><ol><li><p>insert(make_pair&lt;key, value&gt;)：向map中插入一个键值对。</p></li><li><p>erase(key)：删除map中指定键的元素。</p></li><li><p>clear()：清空map中所有元素。</p></li><li><p>size()：返回map中元素的个数。</p></li><li><p>empty()：返回map是否为空。</p></li><li><p>find(key)：查找map中是否存在指定键的元素，如果存在则返回指向该元素的迭代器，否则返回end()迭代器。</p><p>常常和end联合起来用判断找到没。(<strong>这个适合动态查找，底层红黑树实现</strong>)</p></li><li><p>count(key)：返回指定键在map中出现的次数，如果不存在则返回0或1。</p></li><li><p>begin()：返回指向map第一个元素的迭代器。</p></li><li><p>end()：返回指向map最后一个元素后面的位置的迭代器。</p></li><li><p>operator[]：通过键访问map中的元素，如果键不存在，则自动插入一个新的键值对并返回对应的值。</p></li><li><p>lower_bound(key)：返回第一个大于或等于指定键的元素的迭代器。</p></li><li><p>upper_bound(key)：返回第一个大于指定键的元素的迭代器。</p></li><li><p>equal_range(key)：返回一个pair对象，其中包含lower_bound和upper_bound返回的迭代器。</p></li><li><p>swap(map2)：交换当前map和map2的元素。 C++中的map类是一种关联式容器，用于存储键值对，其中每个键都唯一，并且按照一定的顺序排列。map的底层实现通常是红黑树，因此查找、插入和删除操作的时间复杂度为O(log n)，其中n是map中元素的个数。map类提供了丰富的方法，可以方便地进行键值对的操作，例如插入、删除、查找、排序等。同时，由于map使用键值对来存储数据，因此可以将map看作是一种特殊的数组，其下标为键，对应的值为数组元素。因此，可以通过下标来访问和修改map中的元素。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; m = &#123;&#123;<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;banana&quot;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&quot;orange&quot;</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 使用auto关键字定义迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a><strong>stack</strong></h3><p>C++ 中的 stack 库提供了以下常用的方法：</p><ul><li>push(elem)：将元素 elem 压入栈顶。</li><li>pop()：弹出栈顶元素。</li><li>top()：返回栈顶元素，但不弹出。</li><li>empty()：判断栈是否为空。</li><li>size()：返回栈中元素的个数。 除此之外，stack 还支持以下操作：</li><li>emplace(args…)：构造一个新元素并将其压入栈顶。</li><li>swap(stack)：交换两个 stack 的元素。</li><li>operator&#x3D;&#x3D;、operator!&#x3D;、operator&lt;、operator&lt;&#x3D;、operator&gt;、operator&gt;&#x3D;：比较两个 stack 是否相等、不相等、小于、小于等于、大于、大于等于。 具体用法可以参考下面的示例代码</li></ul><p>stack元素可以是任何类型。</p><hr><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a><strong>queue</strong></h3><p>C++中的queue是一种容器适配器，用于实现“先进先出”（FIFO）的数据结构。queue基于deque或list进行实现，提供了一些方法来操作队列，包括入队、出队、获取队首元素、获取队列大小等。以下是queue的常用方法：</p><ol><li>push(element)：将一个元素加入队列的尾部。</li><li>pop()：将队列头部的元素弹出，但没有返回值。</li><li>front()：返回队列头部的元素。</li><li>top():返回队列头部元素（和front一样）</li><li>back()：返回队列尾部的元素。</li><li>empty()：判断队列是否为空。</li><li>size()：返回队列中元素的个数。 使用queue需要包含头文件，可以通过以下方式创建一个queue对象：</li></ol><p>对于队列(queue)，由于它是一种先进先出(FIFO)的数据结构，因此只能通过front()和back()函数来访问队列的头部和尾部元素，<strong>而不能直接通过下标访问</strong>。如果要使用下标访问队列元素，需要先将队列转换为数组或向量。 </p><hr><h4 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a><strong>priority_queue</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">//对于基础类型 默认是大顶堆</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; a; </span><br><span class="line">    <span class="comment">//等同于 priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; a;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; c;  <span class="comment">//这样就是小顶堆</span></span><br><span class="line">    priority_queue&lt;string&gt; b;</span><br></pre></td></tr></table></figure><p>对于优先队列，复杂结构类型要重载运算符<a href="https://blog.csdn.net/qq_27278957/article/details/85269245?ops_request_misc=%7B%22request_id%22:%22168033538216800213097640%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168033538216800213097640&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-85269245-null-null.142%5Ev80%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=c++%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6&spm=1018.2226.3001.4187">(436条消息) C++ 运算符重载_c 重载运算符_高祥xiang的博客-CSDN博客</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">complex</span>&#123;</span><br><span class="line"><span class="type">int</span> real;</span><br><span class="line"><span class="type">int</span> imag;</span><br><span class="line">......</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(Complex c)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> real*real+imag*imag&lt;c.real*c.real+c.imag*c.imag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面这个const是必须要有的</p><hr><h3 id="string"><a href="#string" class="headerlink" title="string"></a><strong>string</strong></h3><p>C++中的string类是一个封装了字符串操作的类，提供了一系列方法来处理和操作字符串。以下是常用的string类方法：</p><ol><li><p>length()：返回字符串的长度。</p></li><li><p>size()：返回字符串的长度。</p></li><li><p>clear()：清空字符串。</p></li><li><p>empty()：判断字符串是否为空。</p></li><li><p>assign(str)：将字符串的值设置为str。</p></li><li><p>assign(str, pos, len)：将字符串的值设置为str中从pos位置开始的长度为len的子串。</p></li><li><p>append(str)：在字符串的末尾添加str。</p></li><li><p>append(str, pos, len)：在字符串的末尾添加str中从pos位置开始的长度为len的子串。</p></li><li><p>push_back(ch)：在字符串的末尾添加一个字符。</p></li><li><p>insert(pos, str)：在字符串的pos位置插入str。</p></li><li><p>erase(pos, len)：删除从pos位置开始长度为len的子串。</p><p>erase(n):删除indexn后面的字符</p></li><li><p>replace(pos, len, str)：替换从pos位置开始长度为len的子串为str。</p></li><li><p><strong>substr(pos, len)：返回从pos位置开始长度为len的子串。</strong></p></li><li><p><strong>find(str)：查找str在字符串中第一次出现的位置，返回该位置的索引值。</strong>(找不到就是-1)</p></li><li><p>rfind(str)：查找str在字符串中最后一次出现的位置，返回该位置的索引值。</p></li><li><p>compare(str)：比较字符串和str的大小，返回0（相等）、1（大于）或-1（小于）。 除了以上列举的方法，string类还支持重载运算符，例如+（字符串拼接）、+&#x3D;（字符串拼接赋值）、&#x3D;&#x3D;（字符串相等判断）、[]（访问字符串中指定位置的字符）等。string类的使用非常方便，可以像使用普通变量一样对字符串进行赋值、拼接、查找、替换等操作。例如：</p></li></ol><p>注意string s，其s[i]类型为char，char强制类型转换可以这样转换</p><p>string(1,s[i])，1表示char长度</p><p>s[i]可以直接比较</p><p>输入str1,如果str1为空则退出</p><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20230313213418581.png" alt="image-20230313213418581"></p><p>scanf不会读回车，如果下一行是gets会直接读取缓冲区中的回车，所有会用一个getchar()在中间把缓冲区中的回车抵消掉</p><p>stoi(str) 将其转换为整数，注意，如果是”04”,直接变成4</p><p>string::npos用于判断结尾（其实找不到直接-1也行）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find函数返回 jk 在 s 中的下标位置</span></span><br><span class="line">position = s.<span class="built_in">find</span>(<span class="string">&quot;jk&quot;</span>);</span><br><span class="line"><span class="comment">// 如果没找到，返回一个特别的标志</span></span><br><span class="line"><span class="comment">// c++中用npos表示，我这里npos取值是4294967295</span></span><br><span class="line"><span class="keyword">if</span>(position != s.npos)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;position: &quot;</span> &lt;&lt; position &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Not found the flag&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果输入的字符串有空格，那么用如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getline</span>(cin,str)</span><br></pre></td></tr></table></figure><p>可以直接通过下标修改字符</p><p>删除字符串内重复字符:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;aadfgggh&quot;</span>;</span><br><span class="line"><span class="comment">//去重复</span></span><br><span class="line"><span class="built_in">sort</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">str.<span class="built_in">erase</span>(<span class="built_in">unique</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>()),str.<span class="built_in">end</span>());  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除字符串内某个指定字符:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;aadfgggh&quot;</span>;</span><br><span class="line">str.<span class="built_in">erase</span>(<span class="built_in">remove</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),<span class="string">&#x27;a&#x27;</span>),str.<span class="built_in">end</span>()); <span class="comment">//在容器中, 删除[begin,end)之间的所有值等于&#x27;a&#x27;的值.</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line">string::<span class="built_in">erase</span>(begin,end)：删除[begin,end)之间的所有值c</span><br></pre></td></tr></table></figure><p>在Find the Smallest Number中，我发现string的超出index一位的位置依然可以访问，但是没有数</p><hr><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a><strong>algorithm</strong></h3><p>C++标准库中的algorithm库提供了许多常用的算法，这些算法可以用于处理容器中的数据，例如排序、查找、遍历等。以下是algorithm库中常用的方法：</p><ol><li>sort(first, last, func)：对[first, last)区间内的元素进行升&#x2F;降序排序（取决于func返回）。</li><li>reverse(first, last)：对[first, last)区间内的元素进行翻转。</li><li>find(first, last, val)：在[first, last)区间内查找值为val的元素，返回该元素的迭代器。如果没有找到，返回last。</li><li>find_if(first, last, pred)：在[first, last)区间内查找满足条件pred的第一个元素，返回该元素的迭代器。如果没有找到，返回last。</li><li>count(first, last, val)：统计[first, last)区间内值为val的元素个数。</li><li>count_if(first, last, pred)：统计[first, last)区间内满足条件pred的元素个数。</li><li>accumulate(first, last, init)：对[first, last)区间内的元素进行累加，初始值为init。</li><li>max_element(first, last)：返回[first, last)区间内的最大元素的迭代器。</li><li>min_element(first, last)：返回[first, last)区间内的最小元素的迭代器。</li><li>unique(first, last)：对[first, last)区间内的元素去重，返回去重后的末尾迭代器。</li><li>remove(first, last, val)：删除[first, last)区间内值为val的元素，返回删除后的末尾迭代器。</li><li>remove_if(first, last, pred)：删除[first, last)区间内满足条件pred的元素，返回删除后的末尾迭代器。</li><li>for_each(first, last, func)：对[first, last)区间内的元素执行操作func。</li><li>transform(first1, last1, first2, result, op)：将[first1, last1)区间内的元素和[first2, …)区间内的元素进行op操作，并将结果存储到[result, …)区间内。</li></ol><h3 id="climits"><a href="#climits" class="headerlink" title="climits"></a>climits</h3><p><climits>中定义的常量主要有以下几种：</p><ol><li>整数类型的最大值和最小值：INT_MAX、INT_MIN、LONG_MAX、LONG_MIN、SHRT_MAX、SHRT_MIN等等。</li><li>字符类型的最大值和最小值：CHAR_MAX、CHAR_MIN、SCHAR_MAX、SCHAR_MIN、UCHAR_MAX等等。</li><li>位数相关的常量：CHAR_BIT、INT_BIT、LONG_BIT等等。</li><li>其他常量：MB_LEN_MAX表示一个多字节字符的最大长度，FLT_MAX、FLT_MIN、DBL_MAX、DBL_MIN等等表示浮点类型的最大值和最小值。</li></ol><h2 id="设置输出精度"><a href="#设置输出精度" class="headerlink" title="设置输出精度"></a>设置输出精度</h2><p>设置输出精度为1位小数</p><p>cout &lt;&lt; fixed &lt;&lt; setprecision(1) &lt;&lt; ans &lt;&lt; endl</p><h2 id="设置输出位数"><a href="#设置输出位数" class="headerlink" title="设置输出位数"></a>设置输出位数</h2><p>printf(“%02d”,&amp;)</p><p>前面补零，两位，不够两位就补零</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p><a href="https://zhuanlan.zhihu.com/p/83334559">KMP 算法详解 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/v_JULY_v/article/details/7041827?ops_request_misc=%7B%22request_id%22:%22167957843316800227474381%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167957843316800227474381&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-7041827-null-null.142%5Ev76%5Epc_new_rank,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=KMP&spm=1018.2226.3001.4187">(427条消息) 从头到尾彻底理解KMP（2014年8月22日版）_kmp算法难吗是什么级别_v_JULY_v的博客-CSDN博客</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//next</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(<span class="type">char</span>* p,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p[k]表示前缀，p[j]表示后缀</span></span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k]) </span><br><span class="line">&#123;</span><br><span class="line">++k;</span><br><span class="line">++j;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kmp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sLen = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="type">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//①如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++    </span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//②如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]    </span></span><br><span class="line"><span class="comment">//next[j]即为j所对应的next值      </span></span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == pLen)</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="最大连续子序列"><a href="#最大连续子序列" class="headerlink" title="最大连续子序列"></a>最大连续子序列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> nums[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;N)&#123;</span><br><span class="line"><span class="keyword">if</span> (N==EOF)<span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> maxnum=INT_MIN;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">cin&gt;&gt;nums[i];</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>]=nums[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (N==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(nums[i],dp[i<span class="number">-1</span>]+nums[i]);</span><br><span class="line">maxnum=<span class="built_in">max</span>(dp[i],maxnum);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxnum&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最大子矩阵"><a href="#最大子矩阵" class="headerlink" title="最大子矩阵"></a>最大子矩阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> matrix[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> support[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hangmax</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxnum;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(arr[i],dp[i<span class="number">-1</span>]+arr[i]);</span><br><span class="line">maxnum=<span class="built_in">max</span>(maxnum,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">allmax</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxnum;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">arr[k]=support[j][k];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">arr[k]=support[j][k]-support[i<span class="number">-1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">maxnum=<span class="built_in">max</span>(<span class="built_in">hangmax</span>(n),maxnum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">cin&gt;&gt;matrix[i][j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)support[i][j]=matrix[i][j];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">support[i][j]=matrix[i][j]+support[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxnum;</span><br><span class="line">maxnum=<span class="built_in">allmax</span>(n);</span><br><span class="line">cout&lt;&lt;maxnum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递增-减序列"><a href="#最长递增-减序列" class="headerlink" title="最长递增&#x2F;减序列"></a>最长递增&#x2F;减序列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> daodan[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countmax</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxnum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (daodan[i]&lt;=daodan[j])</span><br><span class="line">dp[i]=<span class="built_in">max</span>(<span class="number">1</span>,dp[j]+<span class="number">1</span>);</span><br><span class="line">maxnum=<span class="built_in">max</span>(maxnum,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;daodan[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxnum;</span><br><span class="line">maxnum=<span class="built_in">countmax</span>(n);</span><br><span class="line">cout&lt;&lt;maxnum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大上升子序列和（O-N-2-）"><a href="#最大上升子序列和（O-N-2-）" class="headerlink" title="最大上升子序列和（O(N^2)）"></a>最大上升子序列和（O(N^2)）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> nums[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countmax</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> maxsum;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i]=nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i]&gt;nums[j])</span><br><span class="line">dp[i]=<span class="built_in">max</span>(nums[i],dp[j]+nums[i]);</span><br><span class="line">maxsum=<span class="built_in">max</span>(maxsum,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxsum;</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;nums[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">maxsum=<span class="built_in">countmax</span>(n);</span><br><span class="line">cout&lt;&lt;maxsum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最长公共子序列（LCS）"><a href="#最长公共子序列（LCS）" class="headerlink" title="最长公共子序列（LCS）"></a>最长公共子序列（LCS）</h3><p>1<br>7<br>3<br>5<br>9<br>4<br>8<br>3</p><p><a href="https://blog.csdn.net/lxt_Lucia/article/details/81209962?ops_request_misc=%7B%22request_id%22:%22168639963816800225544693%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168639963816800225544693&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81209962-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=LCS&spm=1018.2226.3001.4187">(461条消息) 最长公共子序列 (LCS) 详解+例题模板（全）_lxt_Lucia的博客-CSDN博客</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string s1;</span><br><span class="line">string s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countmax</span><span class="params">(string s1,string s2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> length1=s1.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> length2=s2.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> dp[length1][length2];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;length2;j++)&#123;</span><br><span class="line">dp[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxnum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;length2;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (s1[i]==s2[j])&#123;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">dp[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">maxnum=<span class="built_in">max</span>(maxnum,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxnum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s1&gt;&gt;s2)&#123;</span><br><span class="line"><span class="type">int</span> maxnum=<span class="built_in">countmax</span>(s1,s2);</span><br><span class="line">cout&lt;&lt;maxnum&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LIS（Nlogn）"><a href="#LIS（Nlogn）" class="headerlink" title="LIS（Nlogn）"></a>LIS（Nlogn）</h3><p><a href="https://blog.csdn.net/lxt_Lucia/article/details/81206439?ops_request_misc=%7B%22request_id%22:%22168766303316800185860492%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168766303316800185860492&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81206439-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%9C%80%E5%A4%A7%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97&spm=1018.2226.3001.4187">(465条消息) 最长上升子序列 (LIS) 详解+例题模板 (全)_lxt_Lucia的博客-CSDN博客</a></p><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">d</span>&#123;</span><br><span class="line"><span class="type">int</span> price;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> C,N;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt;C&gt;&gt;N)&#123;</span><br><span class="line"><span class="keyword">if</span> (C==<span class="number">0</span>&amp;&amp;N==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> dp[C+<span class="number">1</span>];</span><br><span class="line">d deal[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=C;i++)&#123;</span><br><span class="line">dp[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="type">int</span> price;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">cin&gt;&gt;price&gt;&gt;score;</span><br><span class="line">deal[i].price=price;</span><br><span class="line">deal[i].score=score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=C;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span> (j&gt;=deal[i].price)&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j-deal[i].price]+deal[i].score,dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[C]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个背包的变种</p><p><a href="https://blog.csdn.net/weixin_41994332/article/details/115829716?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-115829716-blog-109011034.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-115829716-blog-109011034.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=1">(465条消息) 复旦大学2021年计算机学院机试题解_复旦oj_PyKt的博客-CSDN博客</a></p><p>这里是直接顺序的</p><h2 id="DFS-BFS"><a href="#DFS-BFS" class="headerlink" title="DFS BFS"></a>DFS BFS</h2><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> hight)</span>  <span class="comment">//合并函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* b = <span class="keyword">new</span> <span class="type">int</span>[hight - low + <span class="number">1</span>];  <span class="comment">//用 new 申请一个辅助函数</span></span><br><span class="line"><span class="type">int</span> i = low, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;    <span class="comment">// k为 b 数组的小标</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= hight)  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">&#123;</span><br><span class="line">b[k++] = a[i++];  <span class="comment">//按从小到大存放在 b 数组里面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)  <span class="comment">// j 序列结束，将剩余的 i 序列补充在 b 数组中 </span></span><br><span class="line">&#123;</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= hight)<span class="comment">// i 序列结束，将剩余的 j 序列补充在 b 数组中 </span></span><br><span class="line">&#123;</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">0</span>;  <span class="comment">//从小标为 0 开始传送</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= hight; i++)  <span class="comment">//将 b 数组的值传递给数组 a</span></span><br><span class="line">&#123;</span><br><span class="line">a[i] = b[k++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]b;     <span class="comment">// 辅助数组用完后，将其的空间进行释放（销毁）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> low, <span class="type">int</span> hight)</span> <span class="comment">//归并排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; hight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (low + hight) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(a, low, mid);          <span class="comment">//对 a[low,mid]进行排序</span></span><br><span class="line"><span class="built_in">mergesort</span>(a, mid + <span class="number">1</span>, hight);    <span class="comment">//对 a[mid+1,hight]进行排序</span></span><br><span class="line"><span class="built_in">merge</span>(a, low, mid, hight);       <span class="comment">//进行合并操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, a[<span class="number">100</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入数列中的元素个数 n 为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请依次输入数列中的元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">mergesort</span>(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;归并排序结果&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> m=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quickpow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="comment">//与运算，可判断奇偶，详细见注释</span></span><br><span class="line">sum=sum*a%m;<span class="comment">//取模运算</span></span><br><span class="line">a=a*a%m;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;<span class="comment">//位运算，右移，相当于除以2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="模拟问题"><a href="#模拟问题" class="headerlink" title="模拟问题"></a>模拟问题</h2><p>就是找规律，还行</p><h2 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h2><p>要预处理</p><h2 id="最大公因数-最小公倍数"><a href="#最大公因数-最小公倍数" class="headerlink" title="最大公因数&#x2F;最小公倍数"></a>最大公因数&#x2F;最小公倍数</h2><p>最小公倍数&#x3D;a*b&#x2F;c</p><p>c为最大公因数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大公因数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">biggest</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b!=<span class="number">0</span>?<span class="built_in">biggest</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最小公倍数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">smallest</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> big=<span class="built_in">biggest</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> a*b/big;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="素数筛法"><a href="#素数筛法" class="headerlink" title="素数筛法"></a>素数筛法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt;n)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">2</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> sushu[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sushu[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (sushu[i]==<span class="literal">false</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;j*i&lt;=n;j++)&#123; <span class="comment">//j直接从i开始，提高效率</span></span><br><span class="line"><span class="keyword">if</span> (j*i&lt;n)&#123;</span><br><span class="line">sushu[j*i]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (sushu[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (i%<span class="number">10</span>==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一个数n，其质因数最多只有一个大于其平方根！</p><h2 id="矩阵乘法（构造函数）"><a href="#矩阵乘法（构造函数）" class="headerlink" title="矩阵乘法（构造函数）"></a>矩阵乘法（构造函数）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line"><span class="type">int</span> matrix[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="built_in">Matrix</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">row</span>(a),<span class="built_in">col</span>(b)&#123;&#125;<span class="comment">//注意构造函数的写法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">Multiply</span><span class="params">(Matrix a,Matrix b)</span></span>&#123;</span><br><span class="line">Matrix ans=<span class="built_in">Matrix</span>(a.row,b.col);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.row;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;b.col;j++)&#123;</span><br><span class="line"><span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;a.col;k++)&#123;</span><br><span class="line">temp+=a.matrix[i][k]*b.matrix[k][j];</span><br><span class="line">&#125;</span><br><span class="line">ans.matrix[i][j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMatrix</span><span class="params">(Matrix m)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> row=m.row;</span><br><span class="line"><span class="type">int</span> col=m.col;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (j!=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;m.matrix[i][j];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Matrix a=<span class="built_in">Matrix</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">Matrix b=<span class="built_in">Matrix</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">cin&gt;&gt;a.matrix[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">cin&gt;&gt;b.matrix[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Matrix c=<span class="built_in">Multiply</span>(a,b);</span><br><span class="line"><span class="built_in">printMatrix</span>(c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p><a href="https://so.csdn.net/so/search?spm=1000.2115.3001.4498&q=prim%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&t=&u=">prim算法求最小生成树- CSDN搜索</a></p><p>kruscal</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(edge c)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> weight&gt;c.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">edge</span>(<span class="type">int</span> q,<span class="type">int</span> w,<span class="type">int</span> e):<span class="built_in">a</span>(q),<span class="built_in">b</span>(w),<span class="built_in">weight</span>(e)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;edge,vector&lt;edge&gt;,greater&lt;edge&gt;&gt;edges;</span><br><span class="line"><span class="type">int</span> graph[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (graph[x]==<span class="number">-1</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp=<span class="built_in">find</span>(graph[x]);</span><br><span class="line">graph[x]=temp;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> a,b,weight;</span><br><span class="line"><span class="type">int</span> num=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">memset</span>(graph,<span class="number">-1</span>,<span class="built_in">sizeof</span>(graph));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">graph[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (num--)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;weight;</span><br><span class="line">edge edge1=<span class="built_in">edge</span>(a,b,weight);</span><br><span class="line">edges.<span class="built_in">push</span>(edge1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!edges.<span class="built_in">empty</span>()&amp;&amp;count&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">edge temp=edges.<span class="built_in">top</span>();</span><br><span class="line">edges.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> a=<span class="built_in">find</span>(temp.a);</span><br><span class="line"><span class="type">int</span> b=<span class="built_in">find</span>(temp.b);</span><br><span class="line"><span class="type">int</span> weight=temp.weight;</span><br><span class="line"><span class="keyword">if</span> (a!=b)&#123;</span><br><span class="line">graph[a]=b;</span><br><span class="line">count++;</span><br><span class="line">sum+=weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弗洛伊德"><a href="#弗洛伊德" class="headerlink" title="弗洛伊德"></a>弗洛伊德</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;k ++) &#123; </span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123; </span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) &#123; </span><br><span class="line"> <span class="keyword">if</span> (ans[i][k] == 无穷 || ans[k][j] == 无穷) <span class="keyword">continue</span>; </span><br><span class="line"> <span class="keyword">if</span> (ans[i][j] == 无穷 || ans[i][k] + ans[k][j] &lt; ans[i][j]) </span><br><span class="line"> ans[i][j] = ans[i][k] + ans[k][j]; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="迪杰斯特拉"><a href="#迪杰斯特拉" class="headerlink" title="迪杰斯特拉"></a>迪杰斯特拉</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123; <span class="comment">//初始化</span></span><br><span class="line"> Dis[i] = <span class="number">-1</span>; <span class="comment">//所有距离为-1，即不可达</span></span><br><span class="line"> mark[i] = <span class="literal">false</span>; <span class="comment">//所有结点不属于集合K</span></span><br><span class="line"> &#125; </span><br><span class="line"> Dis[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//得到最近的点为结点1,长度为0</span></span><br><span class="line"> mark[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">//将结点1加入集合K</span></span><br><span class="line"> <span class="type">int</span> newP = <span class="number">1</span>; <span class="comment">//集合K中新加入的点为结点1 </span></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++) &#123; <span class="comment">//循环n-1次,按照最短路径递增的顺序确定其他n-1个点的最短路径长度</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; edge[newP].<span class="built_in">size</span>();j ++) &#123; <span class="comment">//遍历与该新加入集合</span></span><br><span class="line">K中的结点直接相邻的边</span><br><span class="line"> <span class="type">int</span> t = edge[newP][j].next; <span class="comment">//该边的另一个结点</span></span><br><span class="line"> <span class="type">int</span> c = edge[newP][j].c; <span class="comment">//该边的长度</span></span><br><span class="line"> <span class="keyword">if</span> (mark[t] == <span class="literal">true</span>) <span class="keyword">continue</span>; <span class="comment">//若另一个结点也属于集合K,则跳过</span></span><br><span class="line"> <span class="keyword">if</span> (Dis[t] == - <span class="number">1</span> || Dis[t] &gt; Dis[newP] + c) <span class="comment">//若该结点尚不可</span></span><br><span class="line">达,或者该结点从新加入的结点经过一条边到达时比以往距离更短</span><br><span class="line"> Dis[t] = Dis[newP] + c; <span class="comment">//更新其距离信息</span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="type">int</span> min = <span class="number">123123123</span>; <span class="comment">//最小值初始化为一个大整数,为找最小值做准备</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) &#123; <span class="comment">//遍历所有结点</span></span><br><span class="line"> <span class="keyword">if</span> (mark[j] == <span class="literal">true</span>) <span class="keyword">continue</span>; <span class="comment">//若其属于集合K则跳过</span></span><br><span class="line"> <span class="keyword">if</span> (Dis[j] == <span class="number">-1</span>) <span class="keyword">continue</span>; <span class="comment">//若该结点仍不可达则跳过</span></span><br><span class="line"> <span class="keyword">if</span> (Dis[j] &lt; min) &#123; <span class="comment">//若该结点经由结点1至集合K中的某点在经过一条</span></span><br><span class="line">边到达时距离小于当前最小值</span><br><span class="line"> min = Dis[j]; <span class="comment">//更新其为最小值</span></span><br><span class="line"> newP = j; <span class="comment">//新加入的点暂定为该点</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉回路（hierholzer）"><a href="#欧拉回路（hierholzer）" class="headerlink" title="欧拉回路（hierholzer）"></a>欧拉回路（hierholzer）</h2><p><a href="https://blog.csdn.net/weixin_44316314/article/details/96898445?ops_request_misc=%7B%22request_id%22:%22168707940816800182775723%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168707940816800182775723&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-96898445-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E7%9A%84%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187">(462条消息) 欧拉回路（hierholzer算法）_逐步插入回路法_run around的博客-CSDN博客</a></p><h2 id="关键路径（AOE网）"><a href="#关键路径（AOE网）" class="headerlink" title="关键路径（AOE网）"></a>关键路径（AOE网）</h2><p>最早开始时间&#x3D;最晚开始时间</p><p>用拓扑图</p><p>最早开始时间（所有先序活动的最晚完成时间）</p><p>最晚开始时间（所有后续活动的最早开始时间减去该活动花费的时间）</p><p>注意源点的最早开始时间不一定为0，要初始化</p><p>汇点的最晚开始时间初始化为totalTime-该汇点任务的时间</p><p>非汇点的最晚开始时间为无穷</p><p>如果只是要求关键路径的长度，其实在earliest[i]初始化的时候就设置为任务的时间就行，但如果要算其他的，就还是设置为0</p><p>7 5<br>11 20 17 10 11 17 17<br>5 4<br>6 1<br>7 3<br>2 4<br>2 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> yushu 1e9+7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt;zero;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;re;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> to;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> in[<span class="number">100001</span>];</span><br><span class="line">vector&lt;edge&gt;edges[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> task[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> earliest[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> latest[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">in[i]=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;task[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num=m;</span><br><span class="line"><span class="type">int</span> allTime=<span class="number">0</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;input edge&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span> (num--)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">in[b]++;</span><br><span class="line">edge temp;</span><br><span class="line">temp.to=b;</span><br><span class="line">temp.weight=task[b];</span><br><span class="line">edges[a].<span class="built_in">push_back</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;input finished.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;earliest[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;earliest[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span> (in[i]==<span class="number">0</span>)&#123;</span><br><span class="line">zero.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!zero.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> node=zero.<span class="built_in">front</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;zero:&quot;</span>&lt;&lt;node&lt;&lt;endl;</span><br><span class="line">zero.<span class="built_in">pop</span>();</span><br><span class="line">re.<span class="built_in">push_back</span>(node);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;edges[node].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> to=edges[node][i].to;</span><br><span class="line"><span class="type">int</span> weight=edges[node][i].weight;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;edge:&quot;</span>&lt;&lt;node&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;to&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;weight&lt;&lt;endl;</span><br><span class="line">earliest[to]=<span class="built_in">max</span>(earliest[to],earliest[node]+task[node]);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;earliest[&quot;</span>&lt;&lt;to&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;earliest[to]&lt;&lt;endl;</span><br><span class="line">in[to]--;</span><br><span class="line"><span class="keyword">if</span> (in[to]==<span class="number">0</span>)&#123;</span><br><span class="line">zero.<span class="built_in">push</span>(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">allTime=<span class="built_in">max</span>(allTime,earliest[i]+task[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;reverse:&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=re.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> u=re[i];</span><br><span class="line"><span class="keyword">if</span> (edges[u].<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">latest[u]=allTime-task[u];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;latest:[&quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;latest[u]&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">latest[u]=<span class="number">99999999</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;edges[u].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="type">int</span> to=edges[u][j].to;</span><br><span class="line"><span class="type">int</span> weight=edges[u][j].weight;</span><br><span class="line">latest[u]=<span class="built_in">min</span>(latest[u],latest[to]-task[u]);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;latest:[&quot;</span>&lt;&lt;u&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;latest[u]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;earliest[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;earliest[i]&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;latest[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;latest[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum*=(latest[i]-earliest[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;allTime&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u011240016/article/details/53171808?ops_request_misc=%7B%22request_id%22:%22168784579716782425186584%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168784579716782425186584&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-53171808-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=AOE&spm=1018.2226.3001.4187">(466条消息) AOE问题总结_DrCrypto的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_44880154/article/details/114380592?ops_request_misc=&request_id=&biz_id=102&utm_term=AOE%E9%A2%98&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-114380592.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(466条消息) AOE网关键路径求解例题_关键路径例题图解_HardyDragon_CC的博客-CSDN博客</a></p><h2 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h2><p><a href="https://blog.csdn.net/yc_cy1999/article/details/104580701?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BF%9D%E7%A0%94%E6%9C%BA%E8%AF%95%E9%A2%98%E5%8D%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-104580701.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(443条消息) 2019年南京大学计算机考研复试机试真题_南大计算机专业考研机试_yc_cy1999的博客-CSDN博客</a></p><p>一个整数可以变为多少个整数相加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];<span class="comment">//存所有状态</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j ++)<span class="comment">//j是容量</span></span><br><span class="line">            f[j] = (f[j] + f[j - i]) % mod;</span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><p><a href="https://blog.csdn.net/qq12323qweeqwe/article/details/123083331?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%92%99%E5%BE%B7%E9%87%8C%E5%AE%89%E7%9A%84%E6%A2%A6%E6%83%B3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-123083331.nonecase&spm=1018.2226.3001.4187">(462条消息) 291. 蒙德里安的梦想（状压dp）_seez的博客-CSDN博客</a></p><p>[(462条消息) <a href="https://blog.csdn.net/yl_puyu/article/details/109631735?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%92%99%E5%BE%B7%E9%87%8C%E5%AE%89%E7%9A%84%E6%A2%A6%E6%83%B3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-109631735.nonecase&spm=1018.2226.3001.4187">状压dp] 蒙德里安的梦想(模板题+状压dp)_状压dp模板题_Ypuyu的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_27262727/article/details/105700957?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%B4%AA%E5%BF%83%E9%A2%98%E7%9B%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-105700957.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(462条消息) C++笔试题模版汇总(五)动态规划&#x2F;贪心_c++笔试题 考动态规划么_ai_XZP_master的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/hzf0701/article/details/117430400?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-117430400.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">状态压缩DP学习总结+经典例题精解_状压dp-CSDN博客</a></p><h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2><p>结论：把i个盘子移到另一个柱面上，需要2^i-1步</p><p><a href="https://zhuanlan.zhihu.com/p/392523306">关于汉诺塔问题 - 知乎 (zhihu.com)</a></p><h2 id="放置街灯（Placing-Lampposts-UVa-10859）-star"><a href="#放置街灯（Placing-Lampposts-UVa-10859）-star" class="headerlink" title="放置街灯（Placing Lampposts, UVa 10859）:star:"></a>放置街灯（Placing Lampposts, UVa 10859）:star:</h2><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20230515221130204.png" alt="image-20230515221130204"></p><h2 id="经典贪心"><a href="#经典贪心" class="headerlink" title="经典贪心"></a>经典贪心</h2><p><a href="https://blog.csdn.net/KXL5180/article/details/82824003?ops_request_misc=%7B%22request_id%22:%22168424305316800227456811%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168424305316800227456811&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-82824003-null-null.142%5Ev87%5Einsert_down28,239%5Ev2%5Einsert_chatgpt&utm_term=UVa10382&spm=1018.2226.3001.4187">(450条消息) UVA-10382经典贪心问题，区间覆盖_uva 10382_KXL5180的博客-CSDN博客</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//酸奶工程</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;<span class="comment">//定义long long，防止爆int</span></span><br><span class="line">ll n,s;</span><br><span class="line">ll c[<span class="number">10010</span>],y[<span class="number">10010</span>];<span class="comment">//存储费用和交互数量</span></span><br><span class="line">ll f[<span class="number">10010</span>];</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;c[i],&amp;y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            f[i]=c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            f[i]=<span class="built_in">min</span>(c[i],f[i<span class="number">-1</span>]+s);</span><br><span class="line">        &#125;</span><br><span class="line">        sum=sum+f[i]*y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳跃问题"><a href="#跳跃问题" class="headerlink" title="跳跃问题"></a>跳跃问题</h2><p><a href="https://blog.csdn.net/weixin_41570890/article/details/110795229?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%B7%B3%E8%B7%83%E9%97%AE%E9%A2%982&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-110795229.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(462条消息) Leetcode——跳跃问题II_跳跃问题2_Purple.’’的博客-CSDN博客</a></p><h2 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h2><p><a href="https://blog.csdn.net/youngyangyang04/article/details/111190664?ops_request_misc=%7B%22request_id%22:%22168647702416800197016860%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168647702416800197016860&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-111190664-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C&spm=1018.2226.3001.4187">(462条消息) 「leetcode」135.分发糖果【贪心算法】详细图解_代码随想录的博客-CSDN博客</a></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p><a href="https://blog.csdn.net/weixin_45697774/article/details/104274713?ops_request_misc=%7B%22request_id%22:%22168667245116800197028500%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168667245116800197028500&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104274713-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E7%BA%BF%E6%AE%B5%E6%A0%91&spm=1018.2226.3001.4187">(462条消息) 线段树 从入门到进阶（超清晰，简单易懂）_线段树进阶_繁凡さん的博客-CSDN博客</a></p><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p><a href="https://blog.csdn.net/lemonxiaoxiao/article/details/108672039?ops_request_misc=%7B%22request_id%22:%22168667270816800222874127%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168667270816800222874127&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108672039-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187">(462条消息) 匈牙利算法详解_Amelie_xiao的博客-CSDN博客</a></p><p><strong>一个二分图中的最大匹配数等于这个图中的最小点覆盖数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> M, N;            <span class="comment">//M, N分别表示左、右侧集合的元素数量</span></span><br><span class="line"><span class="type">int</span> Map[MAXM][MAXN]; <span class="comment">//邻接矩阵存图</span></span><br><span class="line"><span class="type">int</span> p[MAXN];         <span class="comment">//记录当前右侧元素所对应的左侧元素</span></span><br><span class="line"><span class="type">bool</span> vis[MAXN];      <span class="comment">//记录右侧元素是否已被访问过</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; ++j)</span><br><span class="line">        <span class="keyword">if</span> (Map[i][j] &amp;&amp; !vis[j]) <span class="comment">//有边且未访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[j] = <span class="literal">true</span>;                 <span class="comment">//记录状态为访问过</span></span><br><span class="line">            <span class="keyword">if</span> (p[j] == <span class="number">0</span> || <span class="built_in">match</span>(p[j])) <span class="comment">//如果暂无匹配，或者原来匹配的左侧元素可以找到新的匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[j] = i;    <span class="comment">//当前左侧元素成为当前右侧元素的新匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//返回匹配成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//循环结束，仍未找到匹配，返回匹配失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis)); <span class="comment">//重置vis数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">match</span>(i))</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>[(462条消息) 2018南京大学计算机夏令营机试第二题（回溯）_只会写臭虫的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_43175029/article/details/94670710?ops_request_misc=&request_id=&biz_id=102&utm_term=Missing">https://blog.csdn.net/weixin_43175029/article/details/94670710?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Missing</a> number  Given a positi&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-94670710.142^v88^control_2,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p><p>回溯就是dfs，并且在每次dfs时记得恢复原状态；如果只需要输出一种状态，设置flag标志位</p><p>N皇后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// bool数组用来判断搜索的下一个位置是否可行</span></span><br><span class="line"><span class="comment">// col列，dg对角线，udg反对角线</span></span><br><span class="line"><span class="comment">// g[N][N]用来存路径</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N], dg[N], udg[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// u == n 表示已经搜了n行，故输出这条路径</span></span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">puts</span>(g[i]);   <span class="comment">// 等价于cout &lt;&lt; g[i] &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);  <span class="comment">// 换行</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 枚举u这一行，搜索合法的列</span></span><br><span class="line">    <span class="type">int</span> x = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; n; y ++ )</span><br><span class="line">        <span class="comment">// 剪枝(对于不满足要求的点，不再继续往下搜索)  </span></span><br><span class="line">        <span class="comment">// 这里y-x+n是左上角到右下角,y+x是左下角到右上角</span></span><br><span class="line">        <span class="keyword">if</span> (col[y] == <span class="literal">false</span> &amp;&amp; dg[y - x + n] == <span class="literal">false</span> &amp;&amp; udg[y + x] == <span class="literal">false</span>) &#123;</span><br><span class="line">            col[y] = dg[y - x + n] = udg[y + x] = <span class="literal">true</span>;</span><br><span class="line">            g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">            g[x][y] = <span class="string">&#x27;.&#x27;</span>;  <span class="comment">// 恢复现场</span></span><br><span class="line">            col[y] = dg[y - x + n] = udg[y + x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="建立索引树"><a href="#建立索引树" class="headerlink" title="建立索引树"></a>建立索引树</h2><p>[(462条消息) 2020北航计算机夏令营机试题目个人理解_北航夏令营 机试_四处碰壁嘤嘤怪的博客-CSDN博客](<a href="https://blog.csdn.net/Bernie_double/article/details/118190022?ops_request_misc=%7B%22request_id%22:%22168715279416800185829257%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168715279416800185829257&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-118190022-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%8C%97%E8%88%AA%E5%A4%8F%E4%BB%A4%E8%90%A5">https://blog.csdn.net/Bernie_double/article/details/118190022?ops_request_misc=%7B%22request%5Fid%22%3A%22168715279416800185829257%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168715279416800185829257&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-118190022-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=北航夏令营</a> 机试&amp;spm&#x3D;1018.2226.3001.4187)</p><p>注意 建树不一定要指针，数组也可</p><p>4 5<br>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统（二）分布式系统模型</title>
      <link href="/2024/06/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/06/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统模型"><a href="#分布式系统模型" class="headerlink" title="分布式系统模型"></a>分布式系统模型</h1><h2 id="2-1-两将军问题"><a href="#2-1-两将军问题" class="headerlink" title="2.1 两将军问题"></a>2.1 两将军问题</h2><p>“两将军问题”是一个经典的分布式系统问题，旨在研究在存在故障节点的情况下如何协调两个进程之间的通信。</p><p>问题场景是两个将军分别率领一支军队进攻敌方城市。两个将军之间必须达成一致，以确定进攻时间和策略。但是，将军们分别位于两个不同的营地，只能通过信使进行通信。此外，有可能存在恶劣的天气或其它因素干扰通信，或者其中一个将军的信使被敌人抓住并修改了消息。</p><p>该问题的关键是如何确保将军之间的通信可靠，并避免消息的丢失和篡改。经典的解决方案是使用拜占庭将军问题中的拜占庭容错算法，该算法可以容忍部分节点的故障和恶意攻击。</p><p>具体实现上，将军们需要达成共识，以决定进攻时间和策略。首先，每个将军向所有其他将军发送一个决策信息，并等待回复。如果将军收到的回复都是一致的，他就可以确定其他将军的决策，并做出相应的行动。如果将军收到的回复不一致，他会将这些信息再次发送给所有其他将军，直到收到一致的回复。</p><p>在该问题中，每个将军需要知道有多少其他将军参与协调，并且需要容忍其他将军的可能失败和恶意行为。这需要设计合适的算法和协议来保证将军之间的协作和共识。</p><p>总之，“两将军问题”是一个经典的分布式系统问题，它探讨了如何在分布式系统中实现可靠通信和共识协作的问题。拜占庭容错算法提供了一种解决方案，可以容忍部分节点的故障和恶意攻击，从而确保将军之间的通信可靠性和一致性。</p><p><strong>TCP三次握手与其的关系</strong></p><p>TCP三次握手是一种建立TCP连接的过程，包括客户端发送SYN报文，服务器回复SYN+ACK报文，最后客户端回复ACK报文，建立连接。</p><p>在分布式系统中，TCP三次握手是实现可靠通信的重要手段。它确保了客户端和服务器之间的连接在建立时具有可靠性和稳定性。通过三次握手，客户端和服务器可以确保对方已经准备好进行通信，同时也可以在连接建立之前进行一些必要的信息交换和验证，如协商连接参数和检查连接的有效性等。</p><p>在分布式系统中，TCP三次握手也可以用于解决“两将军问题”，确保两个进程之间的通信可靠和一致。类似于TCP三次握手，两个进程可以通过发送和确认消息来建立连接，并在建立连接之前进行必要的验证和信息交换，以确保连接的可靠性和有效性。</p><p>总之，TCP三次握手是分布式系统中实现可靠通信的重要手段，它可以确保连接的可靠性和有效性，同时也可以应用于解决其他类似的分布式系统问题，如“两将军问题”。</p><h2 id="2-2-拜占庭将军问题"><a href="#2-2-拜占庭将军问题" class="headerlink" title="2.2 拜占庭将军问题"></a>2.2 拜占庭将军问题</h2><p>拜占庭将军问题（Byzantine Generals Problem）是分布式系统中的一个经典问题，涉及到在存在故障或恶意行为的情况下，如何进行分布式决策。</p><p>问题场景是，在拜占庭帝国，几个将军率领各自的部队围攻敌人。他们必须就进攻或撤退达成一致的决策，但是将军之间只能通过消息传递进行通信。然而，有可能存在一些叛变的将军，他们会传递虚假信息，导致其他将军做出错误的决策。</p><p>在这种情况下，如何确保将军们可以就正确的进攻或撤退做出决策，即使有些将军叛变或发生故障。</p><p>拜占庭将军问题的解决方案是拜占庭容错算法（Byzantine Fault Tolerance Algorithm）。该算法可以容忍部分节点的故障和恶意攻击，从而确保分布式系统在存在故障或恶意行为的情况下仍然能够正确地工作。</p><p>具体实现上，拜占庭容错算法需要将每个将军看作一个节点，将节点之间的通信看作消息传递。每个将军必须向其他将军发送自己的决策信息，并根据接收到的消息来做出最终的决策。</p><p>在算法中，每个将军必须决定一个信任阈值（trust threshold），即可以容忍多少个叛变节点。如果叛变节点的数量超过信任阈值，则将军不再相信这些节点传递的信息。每个将军都需要向其他将军发送自己的决策信息，并在接收到足够数量的信息后，根据这些信息来做出最终的决策。</p><p>拜占庭容错算法提供了一种解决分布式系统中存在故障或恶意行为的问题的方法，可以保证在一定程度上容忍节点的故障和恶意攻击，从而确保系统的可靠性和正确性。</p><h2 id="2-3-系统模型"><a href="#2-3-系统模型" class="headerlink" title="2.3 系统模型"></a>2.3 系统模型</h2><h3 id="2-3-1-网络链路模型"><a href="#2-3-1-网络链路模型" class="headerlink" title="2.3.1 网络链路模型"></a>2.3.1 网络链路模型</h3><p>可靠链路、公平损失链路和任意链路是三种不同类型的链路模型，它们分别描述了网络链路的不同特性。</p><ol><li>可靠链路：指传输层提供的数据传输服务是可靠的，即数据包不会丢失、重复、乱序等，而且保证数据传输的正确性。这种链路通常用于需要可靠传输的应用，例如文件传输、电子邮件等。</li><li>公平损失链路：指传输层提供的数据传输服务是不可靠的，即数据包可能会丢失、重复、乱序等，但是丢失的概率是公平的，即每个数据包有相同的丢失概率。这种链路通常用于需要低延迟和高吞吐量的应用，例如视频流和音频流。</li><li>任意链路：指传输层提供的数据传输服务是不可靠的，数据包可能会丢失、重复、乱序等，并且丢失的概率也是不确定的。这种链路通常用于互联网等大规模、不可控的网络环境中。</li></ol><p>在实际应用中，不同的链路模型适用于不同的应用场景。例如，可靠链路适用于需要可靠传输的应用，公平损失链路适用于需要低延迟和高吞吐量的应用，任意链路则适用于大规模、不可控的网络环境。</p><h3 id="2-3-2-节点故障类型"><a href="#2-3-2-节点故障类型" class="headerlink" title="2.3.2 节点故障类型"></a>2.3.2 节点故障类型</h3><p>在分布式系统中，节点故障类型主要有以下几种：</p><ol><li>宕机故障：指节点因为硬件故障、软件故障等原因而停止工作，无法处理请求和发送响应。</li><li>网络故障：指节点与网络中的其他节点失去了连接，无法正常通信。</li><li>时钟偏差故障：指节点的本地时钟与其他节点的时钟存在偏差，导致节点无法准确判断事件的先后顺序。</li><li>节点软件故障：指节点运行的软件出现了错误，导致节点无法正常处理请求和发送响应。</li><li>节点配置故障：指节点的配置文件或者参数设置出现错误，导致节点无法正常工作。</li></ol><p>以上节点故障类型都可能对分布式系统的正常运行造成影响，因此在设计和实现分布式系统时需要考虑如何处理这些故障，提高系统的容错性和可靠性。常用的方法包括备份、冗余、检查点和恢复等。</p><p>崩溃停止、崩溃恢复和拜占庭故障是分布式系统中常见的故障类型和处理方法。</p><ol><li>崩溃停止：指节点因为硬件故障、软件故障等原因而停止工作，无法处理请求和发送响应。在这种情况下，通常的做法是通过备份或者冗余机制来保证系统的可用性。</li><li>崩溃恢复：指节点在崩溃之后能够恢复正常工作。在分布式系统中，崩溃恢复通常通过检查点和恢复机制实现。检查点是指在节点正常工作的过程中定期保存系统状态的快照，当节点崩溃之后，可以通过恢复最近一次的检查点来恢复系统状态。</li><li>拜占庭故障：指节点在分布式系统中出现不可预测的错误或者故障，例如节点发送错误的消息、故意不发送消息、篡改消息等。这种故障在分布式系统中比较常见，因此需要采取特殊的处理方式。在拜占庭故障中，通常使用多数投票算法或者拜占庭容错算法来解决。多数投票算法是指节点之间通过投票来决定最终的结果，只有得到多数节点的认可才被认为是有效的。拜占庭容错算法则是一种更加复杂的算法，可以在少数节点出现故障或者恶意行为的情况下仍然保证系统的正确性。</li></ol><p>在实际应用中，分布式系统需要根据不同的故障类型和处理方式来设计和实现，提高系统的容错性和可靠性。</p><h3 id="2-3-3-按时间划分模型"><a href="#2-3-3-按时间划分模型" class="headerlink" title="2.3.3 按时间划分模型"></a>2.3.3 按时间划分模型</h3><p>同步模型、异步模型和部分同步模型是分布式系统中常见的通信模型。</p><ol><li>同步模型：指进程之间的通信是基于同步的，即发送方发送消息后需要等待接收方确认收到消息后才能继续执行。这种模型具有简单、可靠、易于实现的优点，但同时也存在效率低、容易死锁等问题。</li><li>异步模型：指进程之间的通信是基于异步的，即发送方发送消息后不需要等待接收方确认，可以直接继续执行。这种模型具有效率高、并行度高等优点，但同时也存在可靠性低、容易产生乱序等问题。</li><li>部分同步模型：指进程之间的通信既包括同步模型的特点，又包括异步模型的特点。具体来说，部分同步模型中既存在同步消息，也存在异步消息。这种模型可以在保证可靠性的同时，又能充分发挥系统的并行性能，因此在分布式系统中得到广泛应用。</li></ol><p>在实际应用中，需要根据具体的场景来选择不同的通信模型。例如，在需要保证数据一致性和可靠性的场景中，可以选择同步模型或者部分同步模型；而在需要高效并行处理的场景中，可以选择异步模型或者部分同步模型。</p><h2 id="2-4-消息语义传递"><a href="#2-4-消息语义传递" class="headerlink" title="2.4 消息语义传递"></a>2.4 消息语义传递</h2><p>消息语义传递指的是在分布式系统中，如何确保消息的正确传递和语义的一致性。在分布式系统中，消息的传递是通过网络进行的，网络通信可能会受到各种因素的干扰和影响，例如网络延迟、丢包、重复等问题。因此，在消息的传递过程中需要保证消息的正确性和语义的一致性。</p><p>在实际应用中，通常使用一些技术来保证消息的正确性和语义的一致性，例如：</p><ol><li>消息确认机制：发送方在发送消息后，需要等待接收方的确认消息，以确保消息被正确地接收。如果发送方在一定时间内没有收到确认消息，就会重新发送消息，以保证消息的可靠传递。</li><li>消息重复检测：接收方在接收到消息后，会对消息进行唯一性检测，以避免重复处理消息，从而保证消息语义的一致性。</li><li>事务机制：在涉及到多个操作的场景中，可以使用事务机制来保证操作的原子性、一致性和持久性。例如，数据库中的事务机制可以保证一组数据库操作要么全部执行成功，要么全部执行失败，从而确保数据的一致性和可靠性。</li><li>消息序列化和反序列化：在消息的传递过程中，需要将消息转换成网络传输格式进行传输。因此，需要对消息进行序列化和反序列化，以保证消息的正确性和可靠性。</li></ol><p>综上所述，消息语义传递是分布式系统中非常重要的一环，需要采取各种技术手段来确保消息的正确性和语义的一致性，从而保证分布式系统的稳定运行。</p><p>幂等性指的是在进行多次相同操作时，最终的结果与只执行一次操作时的结果是一致的。在分布式系统中，由于网络通信等因素的影响，可能会导致消息被重复传递，因此，需要考虑如何保证消息的幂等性。</p><p>具体来说，消息幂等性通常可以通过以下几种方式来实现：</p><ol><li>去重：对于已经处理过的消息，可以进行去重操作，避免重复处理相同的消息。</li><li>乐观锁：使用乐观锁机制可以避免多次修改同一资源导致的数据不一致问题。</li><li>版本号：在对资源进行修改时，可以使用版本号来确保修改的原子性和一致性。</li><li>业务逻辑实现：在实现业务逻辑时，可以通过设计合理的业务逻辑来确保多次执行相同操作时的结果是一致的。</li></ol><p>综上所述，消息语义和幂等性在分布式系统中都是非常重要的概念。消息语义保证了消息的正确性和语义的一致性，而幂等性则保证了操作的原子性和一致性，从而确保分布式系统的稳定运行。 </p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 深入理解分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
